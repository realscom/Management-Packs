<!--
==========
CHANGE LOG
==========
2023.3.20.0
-Add Cmdb.Group.WindowsCertificateDisableMonitoring group.
2022.7.14.1
-Change McAfee query to "Category='CatA' and Status='Disabled'". 
-Remove $RecordCount check in McAfee cmdb query due to the issue of not being able to remove group members if cmdb query returns 0 records.
2022.5.30.0
-Add IISCatC group.
2022.5.19.4
-Add IISCatB and McAfeeDisableMonitoring groups.
2022.5.17.0
-Minor case changes for some words.
2022.5.16.0
-Add ADFS groups
2022.5.12.0
-Add DNS groups
-Add DHCP groups
-Add IIS groups
-Add SQL groups
-Add WindowsCluster groups
2022.5.11.0
-Add ADDS groups
2022.5.10.1
-Rename mp displayname to remove full stop.
2022.5.10.0
-Add '$InSCOM=0' because it was returning an empty value if no agents were in SCOM.
2022.5.9.0
-Initial release.
====
BUGS
====
============
ENHANCEMENTS
============
30/6/2022
-Remove alert when cmdb count doesn't match SCOM group count. This will be replaced with cmdb true-up on daily report. Do this only after true-up script works properly.
========
COMMENTS
========
When adding a discovery, make sure you increase the IntervalSeconds element by 5 minutes (300 seconds) from the previous discovery.
-->
<ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
	<Manifest>
		<Identity>
			<ID>SCOM.Cmdb</ID>
			<Version>2023.3.20.0</Version>
		</Identity>
		<Name>SCOM.Cmdb</Name>
		<References>
			<Reference Alias="Windows">
				<ID>Microsoft.Windows.Library</ID>
				<Version>7.5.8501.0</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
			<Reference Alias="MSIGL">
				<ID>Microsoft.SystemCenter.InstanceGroup.Library</ID>
				<Version>7.5.8501.0</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
			<Reference Alias="System">
				<ID>System.Library</ID>
				<Version>7.5.8501.0</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
			<Reference Alias="SystemCenter">
				<ID>Microsoft.SystemCenter.Library</ID>
				<Version>7.0.8437.17</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
			<Reference Alias="Health">
				<ID>System.Health.Library</ID>
				<Version>7.0.8437.0</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
			<Reference Alias="ClusterLib">
				<ID>Microsoft.Windows.Cluster.Library</ID>
				<Version>7.0.8437.17</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
			<Reference Alias="McAfee">
				<ID>McAfee.Monitoring</ID>
				<Version>2022.5.19.0</Version>
				<PublicKeyToken>b9103d6ec5285c3a</PublicKeyToken>
			</Reference>
		</References>
	</Manifest>
	<TypeDefinitions>
		<EntityTypes>
			<ClassTypes>
				<!--WindowsServer-->
				<ClassType ID="Cmdb.Group.WindowsServerCatA" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<ClassType ID="Cmdb.Group.WindowsServerCatB" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<ClassType ID="Cmdb.Group.WindowsServerCatC" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<!--HealthServiceWatcher-->
				<ClassType ID="Cmdb.Group.HealthServiceWatcherCatA" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<ClassType ID="Cmdb.Group.HealthServiceWatcherCatB" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<ClassType ID="Cmdb.Group.HealthServiceWatcherCatC" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<!--ADDS-->
				<ClassType ID="Cmdb.Group.ADDSCatA" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<ClassType ID="Cmdb.Group.ADDSCatB" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<!--DNS-->
				<ClassType ID="Cmdb.Group.DNSCatA" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<ClassType ID="Cmdb.Group.DNSCatB" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<!--DHCP-->
				<ClassType ID="Cmdb.Group.DHCPCatA" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<ClassType ID="Cmdb.Group.DHCPCatB" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<!--IIS-->
				<ClassType ID="Cmdb.Group.IISCatA" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<ClassType ID="Cmdb.Group.IISCatB" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<ClassType ID="Cmdb.Group.IISCatC" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<!--SQL-->
				<ClassType ID="Cmdb.Group.SQLCatA" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<ClassType ID="Cmdb.Group.SQLCatB" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<!--WindowsCluster-->
				<ClassType ID="Cmdb.Group.WindowsClusterCatA" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<ClassType ID="Cmdb.Group.WindowsClusterCatB" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<ClassType ID="Cmdb.Group.WindowsClusterCatC" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<!--ADFS-->
				<ClassType ID="Cmdb.Group.ADFSCatA" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<ClassType ID="Cmdb.Group.ADFSCatB" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<!--McAfee-->
				<ClassType ID="Cmdb.Group.McAfeeDisableMonitoring" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<!--WindowsCertificate-->
				<ClassType ID="Cmdb.Group.WindowsCertificateDisableMonitoring" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
			</ClassTypes>
			<RelationshipTypes>
				<!--WindowsServer-->
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupWindowsServerCatAContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.WindowsServerCatA"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupWindowsServerCatBContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.WindowsServerCatB"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupWindowsServerCatCContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.WindowsServerCatC"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<!--ADDS-->
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupADDSCatAContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.ADDSCatA"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupADDSCatBContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.ADDSCatB"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<!--DNS-->
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupDNSCatAContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.DNSCatA"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupDNSCatBContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.DNSCatB"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<!--DHCP-->
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupDHCPCatAContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.DHCPCatA"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupDHCPCatBContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.DHCPCatB"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<!--IIS-->
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupIISCatAContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.IISCatA"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupIISCatBContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.IISCatB"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupIISCatCContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.IISCatC"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<!--SQL-->
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupSQLCatAContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.SQLCatA"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupSQLCatBContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.SQLCatB"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<!--WindowsCluster-->
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupWindowsClusterCatAContainsWindowsClusters" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.WindowsClusterCatA"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="ClusterLib!Microsoft.Windows.Cluster"/>
				</RelationshipType>
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupWindowsClusterCatBContainsWindowsClusters" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.WindowsClusterCatB"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="ClusterLib!Microsoft.Windows.Cluster"/>
				</RelationshipType>
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupWindowsClusterCatCContainsWindowsClusters" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.WindowsClusterCatC"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="ClusterLib!Microsoft.Windows.Cluster"/>
				</RelationshipType>
				<!--ADFS-->
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupADFSCatAContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.ADFSCatA"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupADFSCatBContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.ADFSCatB"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<!--McAfee-->
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupMcAfeeDisableMonitoringContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.McAfeeDisableMonitoring"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<!--WindowsCertificate-->
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupWindowsCertificateDisableMonitoringContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.WindowsCertificateDisableMonitoring"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
			</RelationshipTypes>
		</EntityTypes>
	</TypeDefinitions>
	<Monitoring>
		<Discoveries>
			<!--WindowsServerCatA-->
			<Discovery ID="Cmdb.Discovery.WindowsServerCatA" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.WindowsServerCatA"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>14400</IntervalSeconds>
					<SyncTime/>
					<ScriptName>WindowsServerCatA.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
#---------------------------------------------------------------------------------------------------
Function LogAndQuit {

$End=Get-Date
If ($CountError -gt 0) {
$EventLevel=1 # Log error event.
} ElseIf ($CountWarning -gt 0) {
$EventLevel=2 # Log warning event.
} Else {
$EventLevel=0 # Log info event.
}
$EventId=17621
$Mins=(New-TimeSpan -Start $start -End $end).minutes
$Secs=(New-TimeSpan -Start $start -End $end).seconds
# Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
$ObjMomApi.LogScriptEvent("The script $ScriptName executed in $Mins`m:$Secs`s", $EventId, $EventLevel, "Warnings: $CountWarning, Errors: $CountError`nRunning as: $Account`nWorkflow Name: $WorkflowName`nManagement Pack: $MpName (2023.3.20.0)`nPowerShell Version: $PSVersion`n$Message") # $Error dumps errors into the event.
}
#---------------------------------------------------------------------------------------------------
Function TerminatingError
{
$CountError+=1
$Message+="[CODE_SECTION_$CodeSection] A terminating error occurred. Error output: (" + $_.Exception.Message + ")."
EmptySnapshot
}
#---------------------------------------------------------------------------------------------------
Function SQLQuery {
param($OpsDbServer,$OpsDbName,$DbQuery)
$Connection=New-Object System.Data.SQLClient.SQLConnection
$Connection.ConnectionString="Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
$Connection.Open()
$Command=New-Object System.Data.SQLClient.SQLCommand
$Command.Connection=$Connection
$Command.CommandText=$DbQuery
$Reader=$Command.ExecuteReader()
$SqlTable=New-Object System.Data.DataTable
$SqlTable.Load($Reader)
$Connection.Close()
Return $SqlTable
}
#---------------------------------------------------------------------------------------------------
Function EmptySnapshot {
$DiscoveryData.IsSnapshot=$false # this is empty non-snapshot data.
SubmitDiscovery
}
#---------------------------------------------------------------------------------------------------
Function SubmitDiscovery {
<# FOR TESTING
$ObjMomApi.Return($DiscoveryData)
#>
$DiscoveryData
LogAndQuit
}
#---------------------------------------------------------------------------------------------------
Function GroupDiscovery {
Try{
<# FOR TESTING
$SqlTable=""
$SCOMTable=""
$SourceId="{00000000-0000-0000-0000-000000000000}"
$ManagedEntityId="{00000000-0000-0000-0000-000000000000}"
$Message=""
$CountError=0
$CountWarning=0
$CmdbTable=0
$InSCOM=0
$NotInSCOM=0
#>
<# CODE_SECTION_1
Set variables and load things we'll need.
#>
$CodeSection="1"
$Start=Get-Date
$Account=[System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$ObjMomApi=New-Object -comObject 'MOM.ScriptAPI' # MOMScriptAPI object.
$DiscoveryData=$ObjMomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
$SCOMGroupInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.WindowsServerCatA']$") # update
$SetupRegKey="HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
$OpsDbServer=(Get-ItemProperty $SetupRegKey).DatabaseServerName
$OpsDbName=(Get-ItemProperty $SetupRegKey).DatabaseName
<#
Not needed.
$DwDbServer=(Get-ItemProperty $SetupRegKey).DataWarehouseDBServerName
$DWDbName=(Get-ItemProperty $SetupRegKey).DataWarehouseDBName
#>
$MpName="SCOM.Cmdb" # Update
$WorkflowName="Cmdb.Discovery.WindowsServerCatA" # Update
$ScriptName="WindowsServerCatA.ps1" # Update
$CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='WindowsServer' and Category ='CatA' and status = 'Active'" # Update
$ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]" # Update
$InSCOM=0
$NotInSCOM=0
<# FOR TESTING
#$OpsDbServer="bad_error"
#$OpsDbName="bad_db"
#>
<# CODE_SECTION_2.
Get powershell version.
This is shown in events to assist troubleshooting if powershell doesn't play nice.
#>
$CodeSection="2"
$PSVersion=$PSVersionTable.PSVersion
[string]$PSMajor=$PSVersion.Major
[string]$PSMinor=$PSVersion.Minor
$PSVersion=$PSMajor + "." + $PSMinor
<# CODE_SECTION_3
Query databases.
#>
$CodeSection="3"
$DbQuery=$CmdbQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get cmdb list.
$RecordCount=($SqlTable.name).count
$CmdbTable=$SqlTable
$Message+="CMDB Records: $RecordCount`n"
If ($RecordCount -lt 1) {
EmptySnapshot # If query fails or no records quit.
} Else {
$DbQuery=$ScomQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get SCOM list.
$SCOMTable=$SqlTable
ForEach ($i In $CmdbTable) {
$Object=$i.Name
$match=select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet # Compare cmdb list to SCOM list. Confirmed do need to use "\b".
If ($match -eq $true) {
$InSCOM+=1
# If a match is found create discovery data and relationship between the SCOM group and the object.
$ObjectInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
$ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
$RelationshipInstance=$DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupWindowsServerCatAContainsWindowsComputers']$")
$RelationshipInstance.Source=$SCOMGroupInstance
$RelationshipInstance.Target=$ObjectInstance
$DiscoveryData.AddInstance($RelationshipInstance)   
} Else {
$NotInSCOM+=1
$CountWarning+=1
$MissingObjects+="$Object`n"
}
}
If ($NotInSCOM -gt 0) {
$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM (list below) `n$MissingObjects"
} Else {$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM`n$MissingObjects"
}
SubmitDiscovery
}
}
Catch
{
TerminatingError
}
}
GroupDiscovery -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--WindowsServerCatB-->
			<Discovery ID="Cmdb.Discovery.WindowsServerCatB" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.WindowsServerCatB"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>14700</IntervalSeconds>
					<SyncTime/>
					<ScriptName>WindowsServerCatB.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
#---------------------------------------------------------------------------------------------------
Function LogAndQuit {

$End=Get-Date
If ($CountError -gt 0) {
$EventLevel=1 # Log error event.
} ElseIf ($CountWarning -gt 0) {
$EventLevel=2 # Log warning event.
} Else {
$EventLevel=0 # Log info event.
}
$EventId=17621
$Mins=(New-TimeSpan -Start $start -End $end).minutes
$Secs=(New-TimeSpan -Start $start -End $end).seconds
# Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
$ObjMomApi.LogScriptEvent("The script $ScriptName executed in $Mins`m:$Secs`s", $EventId, $EventLevel, "Warnings: $CountWarning, Errors: $CountError`nRunning as: $Account`nWorkflow Name: $WorkflowName`nManagement Pack: $MpName (2023.3.20.0)`nPowerShell Version: $PSVersion`n$Message") # $Error dumps errors into the event.
}
#---------------------------------------------------------------------------------------------------
Function TerminatingError
{
$CountError+=1
$Message+="[CODE_SECTION_$CodeSection] A terminating error occurred. Error output: (" + $_.Exception.Message + ")."
EmptySnapshot
}
#---------------------------------------------------------------------------------------------------
Function SQLQuery {
param($OpsDbServer,$OpsDbName,$DbQuery)
$Connection=New-Object System.Data.SQLClient.SQLConnection
$Connection.ConnectionString="Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
$Connection.Open()
$Command=New-Object System.Data.SQLClient.SQLCommand
$Command.Connection=$Connection
$Command.CommandText=$DbQuery
$Reader=$Command.ExecuteReader()
$SqlTable=New-Object System.Data.DataTable
$SqlTable.Load($Reader)
$Connection.Close()
Return $SqlTable
}
#---------------------------------------------------------------------------------------------------
Function EmptySnapshot {
$DiscoveryData.IsSnapshot=$false # this is empty non-snapshot data.
SubmitDiscovery
}
#---------------------------------------------------------------------------------------------------
Function SubmitDiscovery {
<# FOR TESTING
$ObjMomApi.Return($DiscoveryData)
#>
$DiscoveryData
LogAndQuit
}
#---------------------------------------------------------------------------------------------------
Function GroupDiscovery {
Try{
<# FOR TESTING
$SqlTable=""
$SCOMTable=""
$SourceId="{00000000-0000-0000-0000-000000000000}"
$ManagedEntityId="{00000000-0000-0000-0000-000000000000}"
$Message=""
$CountError=0
$CountWarning=0
$CmdbTable=0
$InSCOM=0
$NotInSCOM=0
#>
<# CODE_SECTION_1
Set variables and load things we'll need.
#>
$CodeSection="1"
$Start=Get-Date
$Account=[System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$ObjMomApi=New-Object -comObject 'MOM.ScriptAPI' # MOMScriptAPI object.
$DiscoveryData=$ObjMomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
$SCOMGroupInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.WindowsServerCatB']$") # update
$SetupRegKey="HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
$OpsDbServer=(Get-ItemProperty $SetupRegKey).DatabaseServerName
$OpsDbName=(Get-ItemProperty $SetupRegKey).DatabaseName
<#
Not needed.
$DwDbServer=(Get-ItemProperty $SetupRegKey).DataWarehouseDBServerName
$DWDbName=(Get-ItemProperty $SetupRegKey).DataWarehouseDBName
#>
$MpName="SCOM.Cmdb" # Update
$WorkflowName="Cmdb.Discovery.WindowsServerCatB" # Update
$ScriptName="WindowsServerCatB.ps1" # Update
$CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='WindowsServer' and Category ='CatB' and status = 'Active'" # Update
$ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]" # Update
$InSCOM=0
$NotInSCOM=0
<# FOR TESTING
#$OpsDbServer="bad_error"
#$OpsDbName="bad_db"
#>
<# CODE_SECTION_2.
Get powershell version.
This is shown in events to assist troubleshooting if powershell doesn't play nice.
#>
$CodeSection="2"
$PSVersion=$PSVersionTable.PSVersion
[string]$PSMajor=$PSVersion.Major
[string]$PSMinor=$PSVersion.Minor
$PSVersion=$PSMajor + "." + $PSMinor
<# CODE_SECTION_3
Query databases.
#>
$CodeSection="3"
$DbQuery=$CmdbQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get cmdb list.
$RecordCount=($SqlTable.name).count
$CmdbTable=$SqlTable
$Message+="CMDB Records: $RecordCount`n"
If ($RecordCount -lt 1) {
EmptySnapshot # If query fails or no records quit.
} Else {
$DbQuery=$ScomQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get SCOM list.
$SCOMTable=$SqlTable
ForEach ($i In $CmdbTable) {
$Object=$i.Name
$match=select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet # Compare cmdb list to SCOM list. Confirmed do need to use "\b".
If ($match -eq $true) {
$InSCOM+=1
# If a match is found create discovery data and relationship between the SCOM group and the object.
$ObjectInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
$ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
$RelationshipInstance=$DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupWindowsServerCatBContainsWindowsComputers']$")
$RelationshipInstance.Source=$SCOMGroupInstance
$RelationshipInstance.Target=$ObjectInstance
$DiscoveryData.AddInstance($RelationshipInstance)   
} Else {
$NotInSCOM+=1
$CountWarning+=1
$MissingObjects+="$Object`n"
}
}
If ($NotInSCOM -gt 0) {
$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM (list below) `n$MissingObjects"
} Else {$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM`n$MissingObjects"
}
SubmitDiscovery
}
}
Catch
{
TerminatingError
}
}
GroupDiscovery -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--WindowsServerCatC-->
			<Discovery ID="Cmdb.Discovery.WindowsServerCatC" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.WindowsServerCatC"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>15000</IntervalSeconds>
					<SyncTime/>
					<ScriptName>WindowsServerCatC.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
#---------------------------------------------------------------------------------------------------
Function LogAndQuit {

$End=Get-Date
If ($CountError -gt 0) {
$EventLevel=1 # Log error event.
} ElseIf ($CountWarning -gt 0) {
$EventLevel=2 # Log warning event.
} Else {
$EventLevel=0 # Log info event.
}
$EventId=17621
$Mins=(New-TimeSpan -Start $start -End $end).minutes
$Secs=(New-TimeSpan -Start $start -End $end).seconds
# Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
$ObjMomApi.LogScriptEvent("The script $ScriptName executed in $Mins`m:$Secs`s", $EventId, $EventLevel, "Warnings: $CountWarning, Errors: $CountError`nRunning as: $Account`nWorkflow Name: $WorkflowName`nManagement Pack: $MpName (2023.3.20.0)`nPowerShell Version: $PSVersion`n$Message") # $Error dumps errors into the event.
}
#---------------------------------------------------------------------------------------------------
Function TerminatingError
{
$CountError+=1
$Message+="[CODE_SECTION_$CodeSection] A terminating error occurred. Error output: (" + $_.Exception.Message + ")."
EmptySnapshot
}
#---------------------------------------------------------------------------------------------------
Function SQLQuery {
param($OpsDbServer,$OpsDbName,$DbQuery)
$Connection=New-Object System.Data.SQLClient.SQLConnection
$Connection.ConnectionString="Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
$Connection.Open()
$Command=New-Object System.Data.SQLClient.SQLCommand
$Command.Connection=$Connection
$Command.CommandText=$DbQuery
$Reader=$Command.ExecuteReader()
$SqlTable=New-Object System.Data.DataTable
$SqlTable.Load($Reader)
$Connection.Close()
Return $SqlTable
}
#---------------------------------------------------------------------------------------------------
Function EmptySnapshot {
$DiscoveryData.IsSnapshot=$false # this is empty non-snapshot data.
SubmitDiscovery
}
#---------------------------------------------------------------------------------------------------
Function SubmitDiscovery {
<# FOR TESTING
$ObjMomApi.Return($DiscoveryData)
#>
$DiscoveryData
LogAndQuit
}
#---------------------------------------------------------------------------------------------------
Function GroupDiscovery {
Try{
<# FOR TESTING
$SqlTable=""
$SCOMTable=""
$SourceId="{00000000-0000-0000-0000-000000000000}"
$ManagedEntityId="{00000000-0000-0000-0000-000000000000}"
$Message=""
$CountError=0
$CountWarning=0
$CmdbTable=0
$InSCOM=0
$NotInSCOM=0
#>
<# CODE_SECTION_1
Set variables and load things we'll need.
#>
$CodeSection="1"
$Start=Get-Date
$Account=[System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$ObjMomApi=New-Object -comObject 'MOM.ScriptAPI' # MOMScriptAPI object.
$DiscoveryData=$ObjMomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
$SCOMGroupInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.WindowsServerCatC']$") # update
$SetupRegKey="HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
$OpsDbServer=(Get-ItemProperty $SetupRegKey).DatabaseServerName
$OpsDbName=(Get-ItemProperty $SetupRegKey).DatabaseName
<#
Not needed.
$DwDbServer=(Get-ItemProperty $SetupRegKey).DataWarehouseDBServerName
$DWDbName=(Get-ItemProperty $SetupRegKey).DataWarehouseDBName
#>
$MpName="SCOM.Cmdb" # Update
$WorkflowName="Cmdb.Discovery.WindowsServerCatC" # Update
$ScriptName="WindowsServerCatC.ps1" # Update
$CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='WindowsServer' and Category ='CatC' and status = 'Active'" # Update
$ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]" # Update
$InSCOM=0
$NotInSCOM=0
<# FOR TESTING
#$OpsDbServer="bad_error"
#$OpsDbName="bad_db"
#>
<# CODE_SECTION_2.
Get powershell version.
This is shown in events to assist troubleshooting if powershell doesn't play nice.
#>
$CodeSection="2"
$PSVersion=$PSVersionTable.PSVersion
[string]$PSMajor=$PSVersion.Major
[string]$PSMinor=$PSVersion.Minor
$PSVersion=$PSMajor + "." + $PSMinor
<# CODE_SECTION_3
Query databases.
#>
$CodeSection="3"
$DbQuery=$CmdbQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get cmdb list.
$RecordCount=($SqlTable.name).count
$CmdbTable=$SqlTable
$Message+="CMDB Records: $RecordCount`n"
If ($RecordCount -lt 1) {
EmptySnapshot # If query fails or no records quit.
} Else {
$DbQuery=$ScomQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get SCOM list.
$SCOMTable=$SqlTable
ForEach ($i In $CmdbTable) {
$Object=$i.Name
$match=select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet # Compare cmdb list to SCOM list. Confirmed do need to use "\b".
If ($match -eq $true) {
$InSCOM+=1
# If a match is found create discovery data and relationship between the SCOM group and the object.
$ObjectInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
$ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
$RelationshipInstance=$DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupWindowsServerCatCContainsWindowsComputers']$")
$RelationshipInstance.Source=$SCOMGroupInstance
$RelationshipInstance.Target=$ObjectInstance
$DiscoveryData.AddInstance($RelationshipInstance)   
} Else {
$NotInSCOM+=1
$CountWarning+=1
$MissingObjects+="$Object`n"
}
}
If ($NotInSCOM -gt 0) {
$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM (list below) `n$MissingObjects"
} Else {$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM`n$MissingObjects"
}
SubmitDiscovery
}
}
Catch
{
TerminatingError
}
}
GroupDiscovery -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--HealthServiceWatcherCatA-->
			<Discovery ID="Cmdb.Discovery.HealthServiceWatcherCatA" Enabled="true" Target="Cmdb.Group.HealthServiceWatcherCatA" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryRelationship TypeID="MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="SystemCenter!Microsoft.SystemCenter.GroupPopulator">
					<RuleId>$MPElement$</RuleId>
					<GroupInstanceId>$MPElement[Name="Cmdb.Group.HealthServiceWatcherCatA"]$</GroupInstanceId>
					<MembershipRules>
						<MembershipRule>
							<MonitoringClass>$MPElement[Name="SystemCenter!Microsoft.SystemCenter.HealthServiceWatcher"]$</MonitoringClass>
							<RelationshipClass>$MPElement[Name='MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities']$</RelationshipClass>
							<Expression>
								<Contains>
									<MonitoringClass>$MPElement[Name="SystemCenter!Microsoft.SystemCenter.HealthService"]$</MonitoringClass>
									<Expression>
										<Contained>
											<MonitoringClass>$MPElement[Name="Cmdb.Group.WindowsServerCatA"]$</MonitoringClass>
										</Contained>
									</Expression>
								</Contains>
							</Expression>
						</MembershipRule>
					</MembershipRules>
				</DataSource>
			</Discovery>
			<!--HealthServiceWatcherCatB-->
			<Discovery ID="Cmdb.Discovery.HealthServiceWatcherCatB" Enabled="true" Target="Cmdb.Group.HealthServiceWatcherCatB" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryRelationship TypeID="MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="SystemCenter!Microsoft.SystemCenter.GroupPopulator">
					<RuleId>$MPElement$</RuleId>
					<GroupInstanceId>$MPElement[Name="Cmdb.Group.HealthServiceWatcherCatB"]$</GroupInstanceId>
					<MembershipRules>
						<MembershipRule>
							<MonitoringClass>$MPElement[Name="SystemCenter!Microsoft.SystemCenter.HealthServiceWatcher"]$</MonitoringClass>
							<RelationshipClass>$MPElement[Name='MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities']$</RelationshipClass>
							<Expression>
								<Contains>
									<MonitoringClass>$MPElement[Name="SystemCenter!Microsoft.SystemCenter.HealthService"]$</MonitoringClass>
									<Expression>
										<Contained>
											<MonitoringClass>$MPElement[Name="Cmdb.Group.WindowsServerCatB"]$</MonitoringClass>
										</Contained>
									</Expression>
								</Contains>
							</Expression>
						</MembershipRule>
					</MembershipRules>
				</DataSource>
			</Discovery>
			<!--HealthServiceWatcherCatC-->
			<Discovery ID="Cmdb.Discovery.HealthServiceWatcherCatC" Enabled="true" Target="Cmdb.Group.HealthServiceWatcherCatC" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryRelationship TypeID="MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="SystemCenter!Microsoft.SystemCenter.GroupPopulator">
					<RuleId>$MPElement$</RuleId>
					<GroupInstanceId>$MPElement[Name="Cmdb.Group.HealthServiceWatcherCatC"]$</GroupInstanceId>
					<MembershipRules>
						<MembershipRule>
							<MonitoringClass>$MPElement[Name="SystemCenter!Microsoft.SystemCenter.HealthServiceWatcher"]$</MonitoringClass>
							<RelationshipClass>$MPElement[Name='MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities']$</RelationshipClass>
							<Expression>
								<Contains>
									<MonitoringClass>$MPElement[Name="SystemCenter!Microsoft.SystemCenter.HealthService"]$</MonitoringClass>
									<Expression>
										<Contained>
											<MonitoringClass>$MPElement[Name="Cmdb.Group.WindowsServerCatC"]$</MonitoringClass>
										</Contained>
									</Expression>
								</Contains>
							</Expression>
						</MembershipRule>
					</MembershipRules>
				</DataSource>
			</Discovery>
			<!--ADDSCatA-->
			<Discovery ID="Cmdb.Discovery.ADDSCatA" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.ADDSCatA"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>15300</IntervalSeconds>
					<SyncTime/>
					<ScriptName>ADDSCatA.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
#---------------------------------------------------------------------------------------------------
Function LogAndQuit {

$End=Get-Date
If ($CountError -gt 0) {
$EventLevel=1 # Log error event.
} ElseIf ($CountWarning -gt 0) {
$EventLevel=2 # Log warning event.
} Else {
$EventLevel=0 # Log info event.
}
$EventId=17621
$Mins=(New-TimeSpan -Start $start -End $end).minutes
$Secs=(New-TimeSpan -Start $start -End $end).seconds
# Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
$ObjMomApi.LogScriptEvent("The script $ScriptName executed in $Mins`m:$Secs`s", $EventId, $EventLevel, "Warnings: $CountWarning, Errors: $CountError`nRunning as: $Account`nWorkflow Name: $WorkflowName`nManagement Pack: $MpName (2023.3.20.0)`nPowerShell Version: $PSVersion`n$Message") # $Error dumps errors into the event.
}
#---------------------------------------------------------------------------------------------------
Function TerminatingError
{
$CountError+=1
$Message+="[CODE_SECTION_$CodeSection] A terminating error occurred. Error output: (" + $_.Exception.Message + ")."
EmptySnapshot
}
#---------------------------------------------------------------------------------------------------
Function SQLQuery {
param($OpsDbServer,$OpsDbName,$DbQuery)
$Connection=New-Object System.Data.SQLClient.SQLConnection
$Connection.ConnectionString="Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
$Connection.Open()
$Command=New-Object System.Data.SQLClient.SQLCommand
$Command.Connection=$Connection
$Command.CommandText=$DbQuery
$Reader=$Command.ExecuteReader()
$SqlTable=New-Object System.Data.DataTable
$SqlTable.Load($Reader)
$Connection.Close()
Return $SqlTable
}
#---------------------------------------------------------------------------------------------------
Function EmptySnapshot {
$DiscoveryData.IsSnapshot=$false # this is empty non-snapshot data.
SubmitDiscovery
}
#---------------------------------------------------------------------------------------------------
Function SubmitDiscovery {
<# FOR TESTING
$ObjMomApi.Return($DiscoveryData)
#>
$DiscoveryData
LogAndQuit
}
#---------------------------------------------------------------------------------------------------
Function GroupDiscovery {
Try{
<# FOR TESTING
$SqlTable=""
$SCOMTable=""
$SourceId="{00000000-0000-0000-0000-000000000000}"
$ManagedEntityId="{00000000-0000-0000-0000-000000000000}"
$Message=""
$CountError=0
$CountWarning=0
$CmdbTable=0
$InSCOM=0
$NotInSCOM=0
#>
<# CODE_SECTION_1
Set variables and load things we'll need.
#>
$CodeSection="1"
$Start=Get-Date
$Account=[System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$ObjMomApi=New-Object -comObject 'MOM.ScriptAPI' # MOMScriptAPI object.
$DiscoveryData=$ObjMomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
$SCOMGroupInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.ADDSCatA']$") # update
$SetupRegKey="HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
$OpsDbServer=(Get-ItemProperty $SetupRegKey).DatabaseServerName
$OpsDbName=(Get-ItemProperty $SetupRegKey).DatabaseName
<#
Not needed.
$DwDbServer=(Get-ItemProperty $SetupRegKey).DataWarehouseDBServerName
$DWDbName=(Get-ItemProperty $SetupRegKey).DataWarehouseDBName
#>
$MpName="SCOM.Cmdb" # Update
$WorkflowName="Cmdb.Discovery.ADDSCatA" # Update
$ScriptName="ADDSCatA.ps1" # Update
$CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='DomainController' and Category ='CatA' and status = 'Active'" # Update
$ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]" # Update
$InSCOM=0
$NotInSCOM=0
<# FOR TESTING
#$OpsDbServer="bad_error"
#$OpsDbName="bad_db"
#>
<# CODE_SECTION_2.
Get powershell version.
This is shown in events to assist troubleshooting if powershell doesn't play nice.
#>
$CodeSection="2"
$PSVersion=$PSVersionTable.PSVersion
[string]$PSMajor=$PSVersion.Major
[string]$PSMinor=$PSVersion.Minor
$PSVersion=$PSMajor + "." + $PSMinor
<# CODE_SECTION_3
Query databases.
#>
$CodeSection="3"
$DbQuery=$CmdbQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get cmdb list.
$RecordCount=($SqlTable.name).count
$CmdbTable=$SqlTable
$Message+="CMDB Records: $RecordCount`n"
If ($RecordCount -lt 1) {
EmptySnapshot # If query fails or no records quit.
} Else {
$DbQuery=$ScomQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get SCOM list.
$SCOMTable=$SqlTable
ForEach ($i In $CmdbTable) {
$Object=$i.Name
$match=select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet # Compare cmdb list to SCOM list. Confirmed do need to use "\b".
If ($match -eq $true) {
$InSCOM+=1
# If a match is found create discovery data and relationship between the SCOM group and the object.
$ObjectInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
$ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
$RelationshipInstance=$DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupADDSCatAContainsWindowsComputers']$")
$RelationshipInstance.Source=$SCOMGroupInstance
$RelationshipInstance.Target=$ObjectInstance
$DiscoveryData.AddInstance($RelationshipInstance)   
} Else {
$NotInSCOM+=1
$CountWarning+=1
$MissingObjects+="$Object`n"
}
}
If ($NotInSCOM -gt 0) {
$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM (list below) `n$MissingObjects"
} Else {$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM`n$MissingObjects"
}
SubmitDiscovery
}
}
Catch
{
TerminatingError
}
}
GroupDiscovery -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--ADDSCatB-->
			<Discovery ID="Cmdb.Discovery.ADDSCatB" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.ADDSCatB"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>15600</IntervalSeconds>
					<SyncTime/>
					<ScriptName>ADDSCatB.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
#---------------------------------------------------------------------------------------------------
Function LogAndQuit {

$End=Get-Date
If ($CountError -gt 0) {
$EventLevel=1 # Log error event.
} ElseIf ($CountWarning -gt 0) {
$EventLevel=2 # Log warning event.
} Else {
$EventLevel=0 # Log info event.
}
$EventId=17621
$Mins=(New-TimeSpan -Start $start -End $end).minutes
$Secs=(New-TimeSpan -Start $start -End $end).seconds
# Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
$ObjMomApi.LogScriptEvent("The script $ScriptName executed in $Mins`m:$Secs`s", $EventId, $EventLevel, "Warnings: $CountWarning, Errors: $CountError`nRunning as: $Account`nWorkflow Name: $WorkflowName`nManagement Pack: $MpName (2023.3.20.0)`nPowerShell Version: $PSVersion`n$Message") # $Error dumps errors into the event.
}
#---------------------------------------------------------------------------------------------------
Function TerminatingError
{
$CountError+=1
$Message+="[CODE_SECTION_$CodeSection] A terminating error occurred. Error output: (" + $_.Exception.Message + ")."
EmptySnapshot
}
#---------------------------------------------------------------------------------------------------
Function SQLQuery {
param($OpsDbServer,$OpsDbName,$DbQuery)
$Connection=New-Object System.Data.SQLClient.SQLConnection
$Connection.ConnectionString="Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
$Connection.Open()
$Command=New-Object System.Data.SQLClient.SQLCommand
$Command.Connection=$Connection
$Command.CommandText=$DbQuery
$Reader=$Command.ExecuteReader()
$SqlTable=New-Object System.Data.DataTable
$SqlTable.Load($Reader)
$Connection.Close()
Return $SqlTable
}
#---------------------------------------------------------------------------------------------------
Function EmptySnapshot {
$DiscoveryData.IsSnapshot=$false # this is empty non-snapshot data.
SubmitDiscovery
}
#---------------------------------------------------------------------------------------------------
Function SubmitDiscovery {
<# FOR TESTING
$ObjMomApi.Return($DiscoveryData)
#>
$DiscoveryData
LogAndQuit
}
#---------------------------------------------------------------------------------------------------
Function GroupDiscovery {
Try{
<# FOR TESTING
$SqlTable=""
$SCOMTable=""
$SourceId="{00000000-0000-0000-0000-000000000000}"
$ManagedEntityId="{00000000-0000-0000-0000-000000000000}"
$Message=""
$CountError=0
$CountWarning=0
$CmdbTable=0
$InSCOM=0
$NotInSCOM=0
#>
<# CODE_SECTION_1
Set variables and load things we'll need.
#>
$CodeSection="1"
$Start=Get-Date
$Account=[System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$ObjMomApi=New-Object -comObject 'MOM.ScriptAPI' # MOMScriptAPI object.
$DiscoveryData=$ObjMomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
$SCOMGroupInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.ADDSCatB']$") # update
$SetupRegKey="HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
$OpsDbServer=(Get-ItemProperty $SetupRegKey).DatabaseServerName
$OpsDbName=(Get-ItemProperty $SetupRegKey).DatabaseName
<#
Not needed.
$DwDbServer=(Get-ItemProperty $SetupRegKey).DataWarehouseDBServerName
$DWDbName=(Get-ItemProperty $SetupRegKey).DataWarehouseDBName
#>
$MpName="SCOM.Cmdb" # Update
$WorkflowName="Cmdb.Discovery.ADDSCatB" # Update
$ScriptName="ADDSCatB.ps1" # Update
$CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='DomainController' and Category ='CatB' and status = 'Active'" # Update
$ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]" # Update
$InSCOM=0
$NotInSCOM=0
<# FOR TESTING
#$OpsDbServer="bad_error"
#$OpsDbName="bad_db"
#>
<# CODE_SECTION_2.
Get powershell version.
This is shown in events to assist troubleshooting if powershell doesn't play nice.
#>
$CodeSection="2"
$PSVersion=$PSVersionTable.PSVersion
[string]$PSMajor=$PSVersion.Major
[string]$PSMinor=$PSVersion.Minor
$PSVersion=$PSMajor + "." + $PSMinor
<# CODE_SECTION_3
Query databases.
#>
$CodeSection="3"
$DbQuery=$CmdbQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get cmdb list.
$RecordCount=($SqlTable.name).count
$CmdbTable=$SqlTable
$Message+="CMDB Records: $RecordCount`n"
If ($RecordCount -lt 1) {
EmptySnapshot # If query fails or no records quit.
} Else {
$DbQuery=$ScomQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get SCOM list.
$SCOMTable=$SqlTable
ForEach ($i In $CmdbTable) {
$Object=$i.Name
$match=select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet # Compare cmdb list to SCOM list. Confirmed do need to use "\b".
If ($match -eq $true) {
$InSCOM+=1
# If a match is found create discovery data and relationship between the SCOM group and the object.
$ObjectInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
$ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
$RelationshipInstance=$DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupADDSCatBContainsWindowsComputers']$")
$RelationshipInstance.Source=$SCOMGroupInstance
$RelationshipInstance.Target=$ObjectInstance
$DiscoveryData.AddInstance($RelationshipInstance)   
} Else {
$NotInSCOM+=1
$CountWarning+=1
$MissingObjects+="$Object`n"
}
}
If ($NotInSCOM -gt 0) {
$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM (list below) `n$MissingObjects"
} Else {$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM`n$MissingObjects"
}
SubmitDiscovery
}
}
Catch
{
TerminatingError
}
}
GroupDiscovery -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--DNSCatA-->
			<Discovery ID="Cmdb.Discovery.DNSCatA" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.DNSCatA"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>15900</IntervalSeconds>
					<SyncTime/>
					<ScriptName>DNSCatA.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
#---------------------------------------------------------------------------------------------------
Function LogAndQuit {

$End=Get-Date
If ($CountError -gt 0) {
$EventLevel=1 # Log error event.
} ElseIf ($CountWarning -gt 0) {
$EventLevel=2 # Log warning event.
} Else {
$EventLevel=0 # Log info event.
}
$EventId=17621
$Mins=(New-TimeSpan -Start $start -End $end).minutes
$Secs=(New-TimeSpan -Start $start -End $end).seconds
# Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
$ObjMomApi.LogScriptEvent("The script $ScriptName executed in $Mins`m:$Secs`s", $EventId, $EventLevel, "Warnings: $CountWarning, Errors: $CountError`nRunning as: $Account`nWorkflow Name: $WorkflowName`nManagement Pack: $MpName (2023.3.20.0)`nPowerShell Version: $PSVersion`n$Message") # $Error dumps errors into the event.
}
#---------------------------------------------------------------------------------------------------
Function TerminatingError
{
$CountError+=1
$Message+="[CODE_SECTION_$CodeSection] A terminating error occurred. Error output: (" + $_.Exception.Message + ")."
EmptySnapshot
}
#---------------------------------------------------------------------------------------------------
Function SQLQuery {
param($OpsDbServer,$OpsDbName,$DbQuery)
$Connection=New-Object System.Data.SQLClient.SQLConnection
$Connection.ConnectionString="Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
$Connection.Open()
$Command=New-Object System.Data.SQLClient.SQLCommand
$Command.Connection=$Connection
$Command.CommandText=$DbQuery
$Reader=$Command.ExecuteReader()
$SqlTable=New-Object System.Data.DataTable
$SqlTable.Load($Reader)
$Connection.Close()
Return $SqlTable
}
#---------------------------------------------------------------------------------------------------
Function EmptySnapshot {
$DiscoveryData.IsSnapshot=$false # this is empty non-snapshot data.
SubmitDiscovery
}
#---------------------------------------------------------------------------------------------------
Function SubmitDiscovery {
<# FOR TESTING
$ObjMomApi.Return($DiscoveryData)
#>
$DiscoveryData
LogAndQuit
}
#---------------------------------------------------------------------------------------------------
Function GroupDiscovery {
Try{
<# FOR TESTING
$SqlTable=""
$SCOMTable=""
$SourceId="{00000000-0000-0000-0000-000000000000}"
$ManagedEntityId="{00000000-0000-0000-0000-000000000000}"
$Message=""
$CountError=0
$CountWarning=0
$CmdbTable=0
$InSCOM=0
$NotInSCOM=0
#>
<# CODE_SECTION_1
Set variables and load things we'll need.
#>
$CodeSection="1"
$Start=Get-Date
$Account=[System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$ObjMomApi=New-Object -comObject 'MOM.ScriptAPI' # MOMScriptAPI object.
$DiscoveryData=$ObjMomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
$SCOMGroupInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.DNSCatA']$") # update
$SetupRegKey="HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
$OpsDbServer=(Get-ItemProperty $SetupRegKey).DatabaseServerName
$OpsDbName=(Get-ItemProperty $SetupRegKey).DatabaseName
<#
Not needed.
$DwDbServer=(Get-ItemProperty $SetupRegKey).DataWarehouseDBServerName
$DWDbName=(Get-ItemProperty $SetupRegKey).DataWarehouseDBName
#>
$MpName="SCOM.Cmdb" # Update
$WorkflowName="Cmdb.Discovery.DNSCatA" # Update
$ScriptName="DNSCatA.ps1" # Update
$CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='WindowsDnsServer' and Category ='CatA' and status = 'Active'" # Update
$ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]" # Update
$InSCOM=0
$NotInSCOM=0
<# FOR TESTING
#$OpsDbServer="bad_error"
#$OpsDbName="bad_db"
#>
<# CODE_SECTION_2.
Get powershell version.
This is shown in events to assist troubleshooting if powershell doesn't play nice.
#>
$CodeSection="2"
$PSVersion=$PSVersionTable.PSVersion
[string]$PSMajor=$PSVersion.Major
[string]$PSMinor=$PSVersion.Minor
$PSVersion=$PSMajor + "." + $PSMinor
<# CODE_SECTION_3
Query databases.
#>
$CodeSection="3"
$DbQuery=$CmdbQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get cmdb list.
$RecordCount=($SqlTable.name).count
$CmdbTable=$SqlTable
$Message+="CMDB Records: $RecordCount`n"
If ($RecordCount -lt 1) {
EmptySnapshot # If query fails or no records quit.
} Else {
$DbQuery=$ScomQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get SCOM list.
$SCOMTable=$SqlTable
ForEach ($i In $CmdbTable) {
$Object=$i.Name
$match=select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet # Compare cmdb list to SCOM list. Confirmed do need to use "\b".
If ($match -eq $true) {
$InSCOM+=1
# If a match is found create discovery data and relationship between the SCOM group and the object.
$ObjectInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
$ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
$RelationshipInstance=$DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupDNSCatAContainsWindowsComputers']$")
$RelationshipInstance.Source=$SCOMGroupInstance
$RelationshipInstance.Target=$ObjectInstance
$DiscoveryData.AddInstance($RelationshipInstance)   
} Else {
$NotInSCOM+=1
$CountWarning+=1
$MissingObjects+="$Object`n"
}
}
If ($NotInSCOM -gt 0) {
$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM (list below) `n$MissingObjects"
} Else {$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM`n$MissingObjects"
}
SubmitDiscovery
}
}
Catch
{
TerminatingError
}
}
GroupDiscovery -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--DNSCatB-->
			<Discovery ID="Cmdb.Discovery.DNSCatB" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.DNSCatB"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>16200</IntervalSeconds>
					<SyncTime/>
					<ScriptName>DNSCatB.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
#---------------------------------------------------------------------------------------------------
Function LogAndQuit {

$End=Get-Date
If ($CountError -gt 0) {
$EventLevel=1 # Log error event.
} ElseIf ($CountWarning -gt 0) {
$EventLevel=2 # Log warning event.
} Else {
$EventLevel=0 # Log info event.
}
$EventId=17621
$Mins=(New-TimeSpan -Start $start -End $end).minutes
$Secs=(New-TimeSpan -Start $start -End $end).seconds
# Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
$ObjMomApi.LogScriptEvent("The script $ScriptName executed in $Mins`m:$Secs`s", $EventId, $EventLevel, "Warnings: $CountWarning, Errors: $CountError`nRunning as: $Account`nWorkflow Name: $WorkflowName`nManagement Pack: $MpName (2023.3.20.0)`nPowerShell Version: $PSVersion`n$Message") # $Error dumps errors into the event.
}
#---------------------------------------------------------------------------------------------------
Function TerminatingError
{
$CountError+=1
$Message+="[CODE_SECTION_$CodeSection] A terminating error occurred. Error output: (" + $_.Exception.Message + ")."
EmptySnapshot
}
#---------------------------------------------------------------------------------------------------
Function SQLQuery {
param($OpsDbServer,$OpsDbName,$DbQuery)
$Connection=New-Object System.Data.SQLClient.SQLConnection
$Connection.ConnectionString="Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
$Connection.Open()
$Command=New-Object System.Data.SQLClient.SQLCommand
$Command.Connection=$Connection
$Command.CommandText=$DbQuery
$Reader=$Command.ExecuteReader()
$SqlTable=New-Object System.Data.DataTable
$SqlTable.Load($Reader)
$Connection.Close()
Return $SqlTable
}
#---------------------------------------------------------------------------------------------------
Function EmptySnapshot {
$DiscoveryData.IsSnapshot=$false # this is empty non-snapshot data.
SubmitDiscovery
}
#---------------------------------------------------------------------------------------------------
Function SubmitDiscovery {
<# FOR TESTING
$ObjMomApi.Return($DiscoveryData)
#>
$DiscoveryData
LogAndQuit
}
#---------------------------------------------------------------------------------------------------
Function GroupDiscovery {
Try{
<# FOR TESTING
$SqlTable=""
$SCOMTable=""
$SourceId="{00000000-0000-0000-0000-000000000000}"
$ManagedEntityId="{00000000-0000-0000-0000-000000000000}"
$Message=""
$CountError=0
$CountWarning=0
$CmdbTable=0
$InSCOM=0
$NotInSCOM=0
#>
<# CODE_SECTION_1
Set variables and load things we'll need.
#>
$CodeSection="1"
$Start=Get-Date
$Account=[System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$ObjMomApi=New-Object -comObject 'MOM.ScriptAPI' # MOMScriptAPI object.
$DiscoveryData=$ObjMomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
$SCOMGroupInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.DNSCatB']$") # update
$SetupRegKey="HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
$OpsDbServer=(Get-ItemProperty $SetupRegKey).DatabaseServerName
$OpsDbName=(Get-ItemProperty $SetupRegKey).DatabaseName
<#
Not needed.
$DwDbServer=(Get-ItemProperty $SetupRegKey).DataWarehouseDBServerName
$DWDbName=(Get-ItemProperty $SetupRegKey).DataWarehouseDBName
#>
$MpName="SCOM.Cmdb" # Update
$WorkflowName="Cmdb.Discovery.DNSCatB" # Update
$ScriptName="DNSCatB.ps1" # Update
$CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='WindowsDnsServer' and Category ='CatB' and status = 'Active'" # Update
$ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]" # Update
$InSCOM=0
$NotInSCOM=0
<# FOR TESTING
#$OpsDbServer="bad_error"
#$OpsDbName="bad_db"
#>
<# CODE_SECTION_2.
Get powershell version.
This is shown in events to assist troubleshooting if powershell doesn't play nice.
#>
$CodeSection="2"
$PSVersion=$PSVersionTable.PSVersion
[string]$PSMajor=$PSVersion.Major
[string]$PSMinor=$PSVersion.Minor
$PSVersion=$PSMajor + "." + $PSMinor
<# CODE_SECTION_3
Query databases.
#>
$CodeSection="3"
$DbQuery=$CmdbQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get cmdb list.
$RecordCount=($SqlTable.name).count
$CmdbTable=$SqlTable
$Message+="CMDB Records: $RecordCount`n"
If ($RecordCount -lt 1) {
EmptySnapshot # If query fails or no records quit.
} Else {
$DbQuery=$ScomQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get SCOM list.
$SCOMTable=$SqlTable
ForEach ($i In $CmdbTable) {
$Object=$i.Name
$match=select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet # Compare cmdb list to SCOM list. Confirmed do need to use "\b".
If ($match -eq $true) {
$InSCOM+=1
# If a match is found create discovery data and relationship between the SCOM group and the object.
$ObjectInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
$ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
$RelationshipInstance=$DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupDNSCatBContainsWindowsComputers']$")
$RelationshipInstance.Source=$SCOMGroupInstance
$RelationshipInstance.Target=$ObjectInstance
$DiscoveryData.AddInstance($RelationshipInstance)   
} Else {
$NotInSCOM+=1
$CountWarning+=1
$MissingObjects+="$Object`n"
}
}
If ($NotInSCOM -gt 0) {
$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM (list below) `n$MissingObjects"
} Else {$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM`n$MissingObjects"
}
SubmitDiscovery
}
}
Catch
{
TerminatingError
}
}
GroupDiscovery -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--DHCPCatA-->
			<Discovery ID="Cmdb.Discovery.DHCPCatA" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.DHCPCatA"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>16500</IntervalSeconds>
					<SyncTime/>
					<ScriptName>DHCPCatA.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
#---------------------------------------------------------------------------------------------------
Function LogAndQuit {

$End=Get-Date
If ($CountError -gt 0) {
$EventLevel=1 # Log error event.
} ElseIf ($CountWarning -gt 0) {
$EventLevel=2 # Log warning event.
} Else {
$EventLevel=0 # Log info event.
}
$EventId=17621
$Mins=(New-TimeSpan -Start $start -End $end).minutes
$Secs=(New-TimeSpan -Start $start -End $end).seconds
# Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
$ObjMomApi.LogScriptEvent("The script $ScriptName executed in $Mins`m:$Secs`s", $EventId, $EventLevel, "Warnings: $CountWarning, Errors: $CountError`nRunning as: $Account`nWorkflow Name: $WorkflowName`nManagement Pack: $MpName (2023.3.20.0)`nPowerShell Version: $PSVersion`n$Message") # $Error dumps errors into the event.
}
#---------------------------------------------------------------------------------------------------
Function TerminatingError
{
$CountError+=1
$Message+="[CODE_SECTION_$CodeSection] A terminating error occurred. Error output: (" + $_.Exception.Message + ")."
EmptySnapshot
}
#---------------------------------------------------------------------------------------------------
Function SQLQuery {
param($OpsDbServer,$OpsDbName,$DbQuery)
$Connection=New-Object System.Data.SQLClient.SQLConnection
$Connection.ConnectionString="Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
$Connection.Open()
$Command=New-Object System.Data.SQLClient.SQLCommand
$Command.Connection=$Connection
$Command.CommandText=$DbQuery
$Reader=$Command.ExecuteReader()
$SqlTable=New-Object System.Data.DataTable
$SqlTable.Load($Reader)
$Connection.Close()
Return $SqlTable
}
#---------------------------------------------------------------------------------------------------
Function EmptySnapshot {
$DiscoveryData.IsSnapshot=$false # this is empty non-snapshot data.
SubmitDiscovery
}
#---------------------------------------------------------------------------------------------------
Function SubmitDiscovery {
<# FOR TESTING
$ObjMomApi.Return($DiscoveryData)
#>
$DiscoveryData
LogAndQuit
}
#---------------------------------------------------------------------------------------------------
Function GroupDiscovery {
Try{
<# FOR TESTING
$SqlTable=""
$SCOMTable=""
$SourceId="{00000000-0000-0000-0000-000000000000}"
$ManagedEntityId="{00000000-0000-0000-0000-000000000000}"
$Message=""
$CountError=0
$CountWarning=0
$CmdbTable=0
$InSCOM=0
$NotInSCOM=0
#>
<# CODE_SECTION_1
Set variables and load things we'll need.
#>
$CodeSection="1"
$Start=Get-Date
$Account=[System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$ObjMomApi=New-Object -comObject 'MOM.ScriptAPI' # MOMScriptAPI object.
$DiscoveryData=$ObjMomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
$SCOMGroupInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.DHCPCatA']$") # update
$SetupRegKey="HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
$OpsDbServer=(Get-ItemProperty $SetupRegKey).DatabaseServerName
$OpsDbName=(Get-ItemProperty $SetupRegKey).DatabaseName
<#
Not needed.
$DwDbServer=(Get-ItemProperty $SetupRegKey).DataWarehouseDBServerName
$DWDbName=(Get-ItemProperty $SetupRegKey).DataWarehouseDBName
#>
$MpName="SCOM.Cmdb" # Update
$WorkflowName="Cmdb.Discovery.DHCPCatA" # Update
$ScriptName="DHCPCatA.ps1" # Update
$CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='WindowsDHCPServer' and Category ='CatA' and status = 'Active'" # Update
$ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]" # Update
$InSCOM=0
$NotInSCOM=0
<# FOR TESTING
#$OpsDbServer="bad_error"
#$OpsDbName="bad_db"
#>
<# CODE_SECTION_2.
Get powershell version.
This is shown in events to assist troubleshooting if powershell doesn't play nice.
#>
$CodeSection="2"
$PSVersion=$PSVersionTable.PSVersion
[string]$PSMajor=$PSVersion.Major
[string]$PSMinor=$PSVersion.Minor
$PSVersion=$PSMajor + "." + $PSMinor
<# CODE_SECTION_3
Query databases.
#>
$CodeSection="3"
$DbQuery=$CmdbQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get cmdb list.
$RecordCount=($SqlTable.name).count
$CmdbTable=$SqlTable
$Message+="CMDB Records: $RecordCount`n"
If ($RecordCount -lt 1) {
EmptySnapshot # If query fails or no records quit.
} Else {
$DbQuery=$ScomQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get SCOM list.
$SCOMTable=$SqlTable
ForEach ($i In $CmdbTable) {
$Object=$i.Name
$match=select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet # Compare cmdb list to SCOM list. Confirmed do need to use "\b".
If ($match -eq $true) {
$InSCOM+=1
# If a match is found create discovery data and relationship between the SCOM group and the object.
$ObjectInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
$ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
$RelationshipInstance=$DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupDHCPCatAContainsWindowsComputers']$")
$RelationshipInstance.Source=$SCOMGroupInstance
$RelationshipInstance.Target=$ObjectInstance
$DiscoveryData.AddInstance($RelationshipInstance)   
} Else {
$NotInSCOM+=1
$CountWarning+=1
$MissingObjects+="$Object`n"
}
}
If ($NotInSCOM -gt 0) {
$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM (list below) `n$MissingObjects"
} Else {$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM`n$MissingObjects"
}
SubmitDiscovery
}
}
Catch
{
TerminatingError
}
}
GroupDiscovery -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--DHCPCatB-->
			<Discovery ID="Cmdb.Discovery.DHCPCatB" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.DHCPCatB"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>16800</IntervalSeconds>
					<SyncTime/>
					<ScriptName>DHCPCatB.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
#---------------------------------------------------------------------------------------------------
Function LogAndQuit {

$End=Get-Date
If ($CountError -gt 0) {
$EventLevel=1 # Log error event.
} ElseIf ($CountWarning -gt 0) {
$EventLevel=2 # Log warning event.
} Else {
$EventLevel=0 # Log info event.
}
$EventId=17621
$Mins=(New-TimeSpan -Start $start -End $end).minutes
$Secs=(New-TimeSpan -Start $start -End $end).seconds
# Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
$ObjMomApi.LogScriptEvent("The script $ScriptName executed in $Mins`m:$Secs`s", $EventId, $EventLevel, "Warnings: $CountWarning, Errors: $CountError`nRunning as: $Account`nWorkflow Name: $WorkflowName`nManagement Pack: $MpName (2023.3.20.0)`nPowerShell Version: $PSVersion`n$Message") # $Error dumps errors into the event.
}
#---------------------------------------------------------------------------------------------------
Function TerminatingError
{
$CountError+=1
$Message+="[CODE_SECTION_$CodeSection] A terminating error occurred. Error output: (" + $_.Exception.Message + ")."
EmptySnapshot
}
#---------------------------------------------------------------------------------------------------
Function SQLQuery {
param($OpsDbServer,$OpsDbName,$DbQuery)
$Connection=New-Object System.Data.SQLClient.SQLConnection
$Connection.ConnectionString="Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
$Connection.Open()
$Command=New-Object System.Data.SQLClient.SQLCommand
$Command.Connection=$Connection
$Command.CommandText=$DbQuery
$Reader=$Command.ExecuteReader()
$SqlTable=New-Object System.Data.DataTable
$SqlTable.Load($Reader)
$Connection.Close()
Return $SqlTable
}
#---------------------------------------------------------------------------------------------------
Function EmptySnapshot {
$DiscoveryData.IsSnapshot=$false # this is empty non-snapshot data.
SubmitDiscovery
}
#---------------------------------------------------------------------------------------------------
Function SubmitDiscovery {
<# FOR TESTING
$ObjMomApi.Return($DiscoveryData)
#>
$DiscoveryData
LogAndQuit
}
#---------------------------------------------------------------------------------------------------
Function GroupDiscovery {
Try{
<# FOR TESTING
$SqlTable=""
$SCOMTable=""
$SourceId="{00000000-0000-0000-0000-000000000000}"
$ManagedEntityId="{00000000-0000-0000-0000-000000000000}"
$Message=""
$CountError=0
$CountWarning=0
$CmdbTable=0
$InSCOM=0
$NotInSCOM=0
#>
<# CODE_SECTION_1
Set variables and load things we'll need.
#>
$CodeSection="1"
$Start=Get-Date
$Account=[System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$ObjMomApi=New-Object -comObject 'MOM.ScriptAPI' # MOMScriptAPI object.
$DiscoveryData=$ObjMomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
$SCOMGroupInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.DHCPCatB']$") # update
$SetupRegKey="HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
$OpsDbServer=(Get-ItemProperty $SetupRegKey).DatabaseServerName
$OpsDbName=(Get-ItemProperty $SetupRegKey).DatabaseName
<#
Not needed.
$DwDbServer=(Get-ItemProperty $SetupRegKey).DataWarehouseDBServerName
$DWDbName=(Get-ItemProperty $SetupRegKey).DataWarehouseDBName
#>
$MpName="SCOM.Cmdb" # Update
$WorkflowName="Cmdb.Discovery.DHCPCatB" # Update
$ScriptName="DHCPCatB.ps1" # Update
$CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='WindowsDHCPServer' and Category ='CatB' and status = 'Active'" # Update
$ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]" # Update
$InSCOM=0
$NotInSCOM=0
<# FOR TESTING
#$OpsDbServer="bad_error"
#$OpsDbName="bad_db"
#>
<# CODE_SECTION_2.
Get powershell version.
This is shown in events to assist troubleshooting if powershell doesn't play nice.
#>
$CodeSection="2"
$PSVersion=$PSVersionTable.PSVersion
[string]$PSMajor=$PSVersion.Major
[string]$PSMinor=$PSVersion.Minor
$PSVersion=$PSMajor + "." + $PSMinor
<# CODE_SECTION_3
Query databases.
#>
$CodeSection="3"
$DbQuery=$CmdbQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get cmdb list.
$RecordCount=($SqlTable.name).count
$CmdbTable=$SqlTable
$Message+="CMDB Records: $RecordCount`n"
If ($RecordCount -lt 1) {
EmptySnapshot # If query fails or no records quit.
} Else {
$DbQuery=$ScomQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get SCOM list.
$SCOMTable=$SqlTable
ForEach ($i In $CmdbTable) {
$Object=$i.Name
$match=select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet # Compare cmdb list to SCOM list. Confirmed do need to use "\b".
If ($match -eq $true) {
$InSCOM+=1
# If a match is found create discovery data and relationship between the SCOM group and the object.
$ObjectInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
$ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
$RelationshipInstance=$DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupDHCPCatBContainsWindowsComputers']$")
$RelationshipInstance.Source=$SCOMGroupInstance
$RelationshipInstance.Target=$ObjectInstance
$DiscoveryData.AddInstance($RelationshipInstance)   
} Else {
$NotInSCOM+=1
$CountWarning+=1
$MissingObjects+="$Object`n"
}
}
If ($NotInSCOM -gt 0) {
$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM (list below) `n$MissingObjects"
} Else {$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM`n$MissingObjects"
}
SubmitDiscovery
}
}
Catch
{
TerminatingError
}
}
GroupDiscovery -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--IISCatA-->
			<Discovery ID="Cmdb.Discovery.IISCatA" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.IISCatA"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>17100</IntervalSeconds>
					<SyncTime/>
					<ScriptName>IISCatA.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
#---------------------------------------------------------------------------------------------------
Function LogAndQuit {

$End=Get-Date
If ($CountError -gt 0) {
$EventLevel=1 # Log error event.
} ElseIf ($CountWarning -gt 0) {
$EventLevel=2 # Log warning event.
} Else {
$EventLevel=0 # Log info event.
}
$EventId=17621
$Mins=(New-TimeSpan -Start $start -End $end).minutes
$Secs=(New-TimeSpan -Start $start -End $end).seconds
# Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
$ObjMomApi.LogScriptEvent("The script $ScriptName executed in $Mins`m:$Secs`s", $EventId, $EventLevel, "Warnings: $CountWarning, Errors: $CountError`nRunning as: $Account`nWorkflow Name: $WorkflowName`nManagement Pack: $MpName (2023.3.20.0)`nPowerShell Version: $PSVersion`n$Message") # $Error dumps errors into the event.
}
#---------------------------------------------------------------------------------------------------
Function TerminatingError
{
$CountError+=1
$Message+="[CODE_SECTION_$CodeSection] A terminating error occurred. Error output: (" + $_.Exception.Message + ")."
EmptySnapshot
}
#---------------------------------------------------------------------------------------------------
Function SQLQuery {
param($OpsDbServer,$OpsDbName,$DbQuery)
$Connection=New-Object System.Data.SQLClient.SQLConnection
$Connection.ConnectionString="Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
$Connection.Open()
$Command=New-Object System.Data.SQLClient.SQLCommand
$Command.Connection=$Connection
$Command.CommandText=$DbQuery
$Reader=$Command.ExecuteReader()
$SqlTable=New-Object System.Data.DataTable
$SqlTable.Load($Reader)
$Connection.Close()
Return $SqlTable
}
#---------------------------------------------------------------------------------------------------
Function EmptySnapshot {
$DiscoveryData.IsSnapshot=$false # this is empty non-snapshot data.
SubmitDiscovery
}
#---------------------------------------------------------------------------------------------------
Function SubmitDiscovery {
<# FOR TESTING
$ObjMomApi.Return($DiscoveryData)
#>
$DiscoveryData
LogAndQuit
}
#---------------------------------------------------------------------------------------------------
Function GroupDiscovery {
Try{
<# FOR TESTING
$SqlTable=""
$SCOMTable=""
$SourceId="{00000000-0000-0000-0000-000000000000}"
$ManagedEntityId="{00000000-0000-0000-0000-000000000000}"
$Message=""
$CountError=0
$CountWarning=0
$CmdbTable=0
$InSCOM=0
$NotInSCOM=0
#>
<# CODE_SECTION_1
Set variables and load things we'll need.
#>
$CodeSection="1"
$Start=Get-Date
$Account=[System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$ObjMomApi=New-Object -comObject 'MOM.ScriptAPI' # MOMScriptAPI object.
$DiscoveryData=$ObjMomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
$SCOMGroupInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.IISCatA']$") # update
$SetupRegKey="HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
$OpsDbServer=(Get-ItemProperty $SetupRegKey).DatabaseServerName
$OpsDbName=(Get-ItemProperty $SetupRegKey).DatabaseName
<#
Not needed.
$DwDbServer=(Get-ItemProperty $SetupRegKey).DataWarehouseDBServerName
$DWDbName=(Get-ItemProperty $SetupRegKey).DataWarehouseDBName
#>
$MpName="SCOM.Cmdb" # Update
$WorkflowName="Cmdb.Discovery.IISCatA" # Update
$ScriptName="IISCatA.ps1" # Update
$CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='IISWebServer' and Category ='CatA' and status = 'Active'" # Update
$ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]" # Update
$InSCOM=0
$NotInSCOM=0
<# FOR TESTING
#$OpsDbServer="bad_error"
#$OpsDbName="bad_db"
#>
<# CODE_SECTION_2.
Get powershell version.
This is shown in events to assist troubleshooting if powershell doesn't play nice.
#>
$CodeSection="2"
$PSVersion=$PSVersionTable.PSVersion
[string]$PSMajor=$PSVersion.Major
[string]$PSMinor=$PSVersion.Minor
$PSVersion=$PSMajor + "." + $PSMinor
<# CODE_SECTION_3
Query databases.
#>
$CodeSection="3"
$DbQuery=$CmdbQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get cmdb list.
$RecordCount=($SqlTable.name).count
$CmdbTable=$SqlTable
$Message+="CMDB Records: $RecordCount`n"
If ($RecordCount -lt 1) {
EmptySnapshot # If query fails or no records quit.
} Else {
$DbQuery=$ScomQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get SCOM list.
$SCOMTable=$SqlTable
ForEach ($i In $CmdbTable) {
$Object=$i.Name
$match=select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet # Compare cmdb list to SCOM list. Confirmed do need to use "\b".
If ($match -eq $true) {
$InSCOM+=1
# If a match is found create discovery data and relationship between the SCOM group and the object.
$ObjectInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
$ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
$RelationshipInstance=$DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupIISCatAContainsWindowsComputers']$")
$RelationshipInstance.Source=$SCOMGroupInstance
$RelationshipInstance.Target=$ObjectInstance
$DiscoveryData.AddInstance($RelationshipInstance)   
} Else {
$NotInSCOM+=1
$CountWarning+=1
$MissingObjects+="$Object`n"
}
}
If ($NotInSCOM -gt 0) {
$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM (list below) `n$MissingObjects"
} Else {$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM`n$MissingObjects"
}
SubmitDiscovery
}
}
Catch
{
TerminatingError
}
}
GroupDiscovery -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--SQLCatA-->
			<Discovery ID="Cmdb.Discovery.SQLCatA" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.SQLCatA"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>17400</IntervalSeconds>
					<SyncTime/>
					<ScriptName>SQLCatA.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
#---------------------------------------------------------------------------------------------------
Function LogAndQuit {

$End=Get-Date
If ($CountError -gt 0) {
$EventLevel=1 # Log error event.
} ElseIf ($CountWarning -gt 0) {
$EventLevel=2 # Log warning event.
} Else {
$EventLevel=0 # Log info event.
}
$EventId=17621
$Mins=(New-TimeSpan -Start $start -End $end).minutes
$Secs=(New-TimeSpan -Start $start -End $end).seconds
# Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
$ObjMomApi.LogScriptEvent("The script $ScriptName executed in $Mins`m:$Secs`s", $EventId, $EventLevel, "Warnings: $CountWarning, Errors: $CountError`nRunning as: $Account`nWorkflow Name: $WorkflowName`nManagement Pack: $MpName (2023.3.20.0)`nPowerShell Version: $PSVersion`n$Message") # $Error dumps errors into the event.
}
#---------------------------------------------------------------------------------------------------
Function TerminatingError
{
$CountError+=1
$Message+="[CODE_SECTION_$CodeSection] A terminating error occurred. Error output: (" + $_.Exception.Message + ")."
EmptySnapshot
}
#---------------------------------------------------------------------------------------------------
Function SQLQuery {
param($OpsDbServer,$OpsDbName,$DbQuery)
$Connection=New-Object System.Data.SQLClient.SQLConnection
$Connection.ConnectionString="Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
$Connection.Open()
$Command=New-Object System.Data.SQLClient.SQLCommand
$Command.Connection=$Connection
$Command.CommandText=$DbQuery
$Reader=$Command.ExecuteReader()
$SqlTable=New-Object System.Data.DataTable
$SqlTable.Load($Reader)
$Connection.Close()
Return $SqlTable
}
#---------------------------------------------------------------------------------------------------
Function EmptySnapshot {
$DiscoveryData.IsSnapshot=$false # this is empty non-snapshot data.
SubmitDiscovery
}
#---------------------------------------------------------------------------------------------------
Function SubmitDiscovery {
<# FOR TESTING
$ObjMomApi.Return($DiscoveryData)
#>
$DiscoveryData
LogAndQuit
}
#---------------------------------------------------------------------------------------------------
Function GroupDiscovery {
Try{
<# FOR TESTING
$SqlTable=""
$SCOMTable=""
$SourceId="{00000000-0000-0000-0000-000000000000}"
$ManagedEntityId="{00000000-0000-0000-0000-000000000000}"
$Message=""
$CountError=0
$CountWarning=0
$CmdbTable=0
$InSCOM=0
$NotInSCOM=0
#>
<# CODE_SECTION_1
Set variables and load things we'll need.
#>
$CodeSection="1"
$Start=Get-Date
$Account=[System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$ObjMomApi=New-Object -comObject 'MOM.ScriptAPI' # MOMScriptAPI object.
$DiscoveryData=$ObjMomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
$SCOMGroupInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.SQLCatA']$") # update
$SetupRegKey="HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
$OpsDbServer=(Get-ItemProperty $SetupRegKey).DatabaseServerName
$OpsDbName=(Get-ItemProperty $SetupRegKey).DatabaseName
<#
Not needed.
$DwDbServer=(Get-ItemProperty $SetupRegKey).DataWarehouseDBServerName
$DWDbName=(Get-ItemProperty $SetupRegKey).DataWarehouseDBName
#>
$MpName="SCOM.Cmdb" # Update
$WorkflowName="Cmdb.Discovery.SQLCatA" # Update
$ScriptName="SQLCatA.ps1" # Update
$CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='SqlServer' and Category ='CatA' and status = 'Active'" # Update
$ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]" # Update
$InSCOM=0
$NotInSCOM=0
<# FOR TESTING
#$OpsDbServer="bad_error"
#$OpsDbName="bad_db"
#>
<# CODE_SECTION_2.
Get powershell version.
This is shown in events to assist troubleshooting if powershell doesn't play nice.
#>
$CodeSection="2"
$PSVersion=$PSVersionTable.PSVersion
[string]$PSMajor=$PSVersion.Major
[string]$PSMinor=$PSVersion.Minor
$PSVersion=$PSMajor + "." + $PSMinor
<# CODE_SECTION_3
Query databases.
#>
$CodeSection="3"
$DbQuery=$CmdbQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get cmdb list.
$RecordCount=($SqlTable.name).count
$CmdbTable=$SqlTable
$Message+="CMDB Records: $RecordCount`n"
If ($RecordCount -lt 1) {
EmptySnapshot # If query fails or no records quit.
} Else {
$DbQuery=$ScomQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get SCOM list.
$SCOMTable=$SqlTable
ForEach ($i In $CmdbTable) {
$Object=$i.Name
$match=select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet # Compare cmdb list to SCOM list. Confirmed do need to use "\b".
If ($match -eq $true) {
$InSCOM+=1
# If a match is found create discovery data and relationship between the SCOM group and the object.
$ObjectInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
$ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
$RelationshipInstance=$DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupSQLCatAContainsWindowsComputers']$")
$RelationshipInstance.Source=$SCOMGroupInstance
$RelationshipInstance.Target=$ObjectInstance
$DiscoveryData.AddInstance($RelationshipInstance)   
} Else {
$NotInSCOM+=1
$CountWarning+=1
$MissingObjects+="$Object`n"
}
}
If ($NotInSCOM -gt 0) {
$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM (list below) `n$MissingObjects"
} Else {$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM`n$MissingObjects"
}
SubmitDiscovery
}
}
Catch
{
TerminatingError
}
}
GroupDiscovery -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--SQLCatB-->
			<Discovery ID="Cmdb.Discovery.SQLCatB" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.SQLCatB"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>17700</IntervalSeconds>
					<SyncTime/>
					<ScriptName>SQLCatB.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
#---------------------------------------------------------------------------------------------------
Function LogAndQuit {

$End=Get-Date
If ($CountError -gt 0) {
$EventLevel=1 # Log error event.
} ElseIf ($CountWarning -gt 0) {
$EventLevel=2 # Log warning event.
} Else {
$EventLevel=0 # Log info event.
}
$EventId=17621
$Mins=(New-TimeSpan -Start $start -End $end).minutes
$Secs=(New-TimeSpan -Start $start -End $end).seconds
# Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
$ObjMomApi.LogScriptEvent("The script $ScriptName executed in $Mins`m:$Secs`s", $EventId, $EventLevel, "Warnings: $CountWarning, Errors: $CountError`nRunning as: $Account`nWorkflow Name: $WorkflowName`nManagement Pack: $MpName (2023.3.20.0)`nPowerShell Version: $PSVersion`n$Message") # $Error dumps errors into the event.
}
#---------------------------------------------------------------------------------------------------
Function TerminatingError
{
$CountError+=1
$Message+="[CODE_SECTION_$CodeSection] A terminating error occurred. Error output: (" + $_.Exception.Message + ")."
EmptySnapshot
}
#---------------------------------------------------------------------------------------------------
Function SQLQuery {
param($OpsDbServer,$OpsDbName,$DbQuery)
$Connection=New-Object System.Data.SQLClient.SQLConnection
$Connection.ConnectionString="Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
$Connection.Open()
$Command=New-Object System.Data.SQLClient.SQLCommand
$Command.Connection=$Connection
$Command.CommandText=$DbQuery
$Reader=$Command.ExecuteReader()
$SqlTable=New-Object System.Data.DataTable
$SqlTable.Load($Reader)
$Connection.Close()
Return $SqlTable
}
#---------------------------------------------------------------------------------------------------
Function EmptySnapshot {
$DiscoveryData.IsSnapshot=$false # this is empty non-snapshot data.
SubmitDiscovery
}
#---------------------------------------------------------------------------------------------------
Function SubmitDiscovery {
<# FOR TESTING
$ObjMomApi.Return($DiscoveryData)
#>
$DiscoveryData
LogAndQuit
}
#---------------------------------------------------------------------------------------------------
Function GroupDiscovery {
Try{
<# FOR TESTING
$SqlTable=""
$SCOMTable=""
$SourceId="{00000000-0000-0000-0000-000000000000}"
$ManagedEntityId="{00000000-0000-0000-0000-000000000000}"
$Message=""
$CountError=0
$CountWarning=0
$CmdbTable=0
$InSCOM=0
$NotInSCOM=0
#>
<# CODE_SECTION_1
Set variables and load things we'll need.
#>
$CodeSection="1"
$Start=Get-Date
$Account=[System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$ObjMomApi=New-Object -comObject 'MOM.ScriptAPI' # MOMScriptAPI object.
$DiscoveryData=$ObjMomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
$SCOMGroupInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.SQLCatB']$") # update
$SetupRegKey="HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
$OpsDbServer=(Get-ItemProperty $SetupRegKey).DatabaseServerName
$OpsDbName=(Get-ItemProperty $SetupRegKey).DatabaseName
<#
Not needed.
$DwDbServer=(Get-ItemProperty $SetupRegKey).DataWarehouseDBServerName
$DWDbName=(Get-ItemProperty $SetupRegKey).DataWarehouseDBName
#>
$MpName="SCOM.Cmdb" # Update
$WorkflowName="Cmdb.Discovery.SQLCatB" # Update
$ScriptName="SQLCatB.ps1" # Update
$CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='SqlServer' and Category ='CatB' and status = 'Active'" # Update
$ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]" # Update
$InSCOM=0
$NotInSCOM=0
<# FOR TESTING
#$OpsDbServer="bad_error"
#$OpsDbName="bad_db"
#>
<# CODE_SECTION_2.
Get powershell version.
This is shown in events to assist troubleshooting if powershell doesn't play nice.
#>
$CodeSection="2"
$PSVersion=$PSVersionTable.PSVersion
[string]$PSMajor=$PSVersion.Major
[string]$PSMinor=$PSVersion.Minor
$PSVersion=$PSMajor + "." + $PSMinor
<# CODE_SECTION_3
Query databases.
#>
$CodeSection="3"
$DbQuery=$CmdbQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get cmdb list.
$RecordCount=($SqlTable.name).count
$CmdbTable=$SqlTable
$Message+="CMDB Records: $RecordCount`n"
If ($RecordCount -lt 1) {
EmptySnapshot # If query fails or no records quit.
} Else {
$DbQuery=$ScomQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get SCOM list.
$SCOMTable=$SqlTable
ForEach ($i In $CmdbTable) {
$Object=$i.Name
$match=select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet # Compare cmdb list to SCOM list. Confirmed do need to use "\b".
If ($match -eq $true) {
$InSCOM+=1
# If a match is found create discovery data and relationship between the SCOM group and the object.
$ObjectInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
$ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
$RelationshipInstance=$DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupSQLCatBContainsWindowsComputers']$")
$RelationshipInstance.Source=$SCOMGroupInstance
$RelationshipInstance.Target=$ObjectInstance
$DiscoveryData.AddInstance($RelationshipInstance)   
} Else {
$NotInSCOM+=1
$CountWarning+=1
$MissingObjects+="$Object`n"
}
}
If ($NotInSCOM -gt 0) {
$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM (list below) `n$MissingObjects"
} Else {$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM`n$MissingObjects"
}
SubmitDiscovery
}
}
Catch
{
TerminatingError
}
}
GroupDiscovery -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--WindowsClusterCatA-->
			<Discovery ID="Cmdb.Discovery.WindowsClusterCatA" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.WindowsClusterCatA"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>18000</IntervalSeconds>
					<SyncTime/>
					<ScriptName>WindowsClusterCatA.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
#---------------------------------------------------------------------------------------------------
Function LogAndQuit {

$End=Get-Date
If ($CountError -gt 0) {
$EventLevel=1 # Log error event.
} ElseIf ($CountWarning -gt 0) {
$EventLevel=2 # Log warning event.
} Else {
$EventLevel=0 # Log info event.
}
$EventId=17621
$Mins=(New-TimeSpan -Start $start -End $end).minutes
$Secs=(New-TimeSpan -Start $start -End $end).seconds
# Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
$ObjMomApi.LogScriptEvent("The script $ScriptName executed in $Mins`m:$Secs`s", $EventId, $EventLevel, "Warnings: $CountWarning, Errors: $CountError`nRunning as: $Account`nWorkflow Name: $WorkflowName`nManagement Pack: $MpName (2023.3.20.0)`nPowerShell Version: $PSVersion`n$Message") # $Error dumps errors into the event.
}
#---------------------------------------------------------------------------------------------------
Function TerminatingError
{
$CountError+=1
$Message+="[CODE_SECTION_$CodeSection] A terminating error occurred. Error output: (" + $_.Exception.Message + ")."
EmptySnapshot
}
#---------------------------------------------------------------------------------------------------
Function SQLQuery {
param($OpsDbServer,$OpsDbName,$DbQuery)
$Connection=New-Object System.Data.SQLClient.SQLConnection
$Connection.ConnectionString="Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
$Connection.Open()
$Command=New-Object System.Data.SQLClient.SQLCommand
$Command.Connection=$Connection
$Command.CommandText=$DbQuery
$Reader=$Command.ExecuteReader()
$SqlTable=New-Object System.Data.DataTable
$SqlTable.Load($Reader)
$Connection.Close()
Return $SqlTable
}
#---------------------------------------------------------------------------------------------------
Function EmptySnapshot {
$DiscoveryData.IsSnapshot=$false # this is empty non-snapshot data.
SubmitDiscovery
}
#---------------------------------------------------------------------------------------------------
Function SubmitDiscovery {
<# FOR TESTING
$ObjMomApi.Return($DiscoveryData)
#>
$DiscoveryData
LogAndQuit
}
#---------------------------------------------------------------------------------------------------
Function GroupDiscovery {
Try{
<# FOR TESTING
$SqlTable=""
$SCOMTable=""
$SourceId="{00000000-0000-0000-0000-000000000000}"
$ManagedEntityId="{00000000-0000-0000-0000-000000000000}"
$Message=""
$CountError=0
$CountWarning=0
$CmdbTable=0
$InSCOM=0
$NotInSCOM=0
#>
<# CODE_SECTION_1
Set variables and load things we'll need.
#>
$CodeSection="1"
$Start=Get-Date
$Account=[System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$ObjMomApi=New-Object -comObject 'MOM.ScriptAPI' # MOMScriptAPI object.
$DiscoveryData=$ObjMomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
$SCOMGroupInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.WindowsClusterCatA']$") # update
$SetupRegKey="HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
$OpsDbServer=(Get-ItemProperty $SetupRegKey).DatabaseServerName
$OpsDbName=(Get-ItemProperty $SetupRegKey).DatabaseName
<#
Not needed.
$DwDbServer=(Get-ItemProperty $SetupRegKey).DataWarehouseDBServerName
$DWDbName=(Get-ItemProperty $SetupRegKey).DataWarehouseDBName
#>
$MpName="SCOM.Cmdb" # Update
$WorkflowName="Cmdb.Discovery.WindowsClusterCatA" # Update
$ScriptName="WindowsClusterCatA.ps1" # Update
$CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='WindowsCluster' and Category ='CatA' and status = 'Active'" # Update
$ScomQuery="SELECT DisplayName AS Name from [$OpsDbName].[dbo].[MT_Microsoft`$Windows`$Cluster]" # Update
$InSCOM=0
$NotInSCOM=0
<# FOR TESTING
#$OpsDbServer="bad_error"
#$OpsDbName="bad_db"
#>
<# CODE_SECTION_2.
Get powershell version.
This is shown in events to assist troubleshooting if powershell doesn't play nice.
#>
$CodeSection="2"
$PSVersion=$PSVersionTable.PSVersion
[string]$PSMajor=$PSVersion.Major
[string]$PSMinor=$PSVersion.Minor
$PSVersion=$PSMajor + "." + $PSMinor
<# CODE_SECTION_3
Query databases.
#>
$CodeSection="3"
$DbQuery=$CmdbQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get cmdb list.
$RecordCount=($SqlTable.name).count
$CmdbTable=$SqlTable
$Message+="CMDB Records: $RecordCount`n"
If ($RecordCount -lt 1) {
EmptySnapshot # If query fails or no records quit.
} Else {
$DbQuery=$ScomQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get SCOM list.
$SCOMTable=$SqlTable
ForEach ($i In $CmdbTable) {
$Object=$i.Name
$match=select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet # Compare cmdb list to SCOM list. Confirmed do need to use "\b".
If ($match -eq $true) {
$InSCOM+=1
# If a match is found create discovery data and relationship between the SCOM group and the object.
$ObjectInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='ClusterLib!Microsoft.Windows.Cluster']$")
$ObjectInstance.AddProperty("$MPElement[Name='ClusterLib!Microsoft.Windows.Cluster']/Name$", $Object)
$RelationshipInstance=$DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupWindowsClusterCatAContainsWindowsClusters']$")
$RelationshipInstance.Source=$SCOMGroupInstance
$RelationshipInstance.Target=$ObjectInstance
$DiscoveryData.AddInstance($RelationshipInstance)   
} Else {
$NotInSCOM+=1
$CountWarning+=1
$MissingObjects+="$Object`n"
}
}
If ($NotInSCOM -gt 0) {
$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM (list below) `n$MissingObjects"
} Else {$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM`n$MissingObjects"
}
SubmitDiscovery
}
}
Catch
{
TerminatingError
}
}
GroupDiscovery -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--WindowsClusterCatB-->
			<Discovery ID="Cmdb.Discovery.WindowsClusterCatB" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.WindowsClusterCatB"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>18300</IntervalSeconds>
					<SyncTime/>
					<ScriptName>WindowsClusterCatB.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
#---------------------------------------------------------------------------------------------------
Function LogAndQuit {

$End=Get-Date
If ($CountError -gt 0) {
$EventLevel=1 # Log error event.
} ElseIf ($CountWarning -gt 0) {
$EventLevel=2 # Log warning event.
} Else {
$EventLevel=0 # Log info event.
}
$EventId=17621
$Mins=(New-TimeSpan -Start $start -End $end).minutes
$Secs=(New-TimeSpan -Start $start -End $end).seconds
# Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
$ObjMomApi.LogScriptEvent("The script $ScriptName executed in $Mins`m:$Secs`s", $EventId, $EventLevel, "Warnings: $CountWarning, Errors: $CountError`nRunning as: $Account`nWorkflow Name: $WorkflowName`nManagement Pack: $MpName (2023.3.20.0)`nPowerShell Version: $PSVersion`n$Message") # $Error dumps errors into the event.
}
#---------------------------------------------------------------------------------------------------
Function TerminatingError
{
$CountError+=1
$Message+="[CODE_SECTION_$CodeSection] A terminating error occurred. Error output: (" + $_.Exception.Message + ")."
EmptySnapshot
}
#---------------------------------------------------------------------------------------------------
Function SQLQuery {
param($OpsDbServer,$OpsDbName,$DbQuery)
$Connection=New-Object System.Data.SQLClient.SQLConnection
$Connection.ConnectionString="Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
$Connection.Open()
$Command=New-Object System.Data.SQLClient.SQLCommand
$Command.Connection=$Connection
$Command.CommandText=$DbQuery
$Reader=$Command.ExecuteReader()
$SqlTable=New-Object System.Data.DataTable
$SqlTable.Load($Reader)
$Connection.Close()
Return $SqlTable
}
#---------------------------------------------------------------------------------------------------
Function EmptySnapshot {
$DiscoveryData.IsSnapshot=$false # this is empty non-snapshot data.
SubmitDiscovery
}
#---------------------------------------------------------------------------------------------------
Function SubmitDiscovery {
<# FOR TESTING
$ObjMomApi.Return($DiscoveryData)
#>
$DiscoveryData
LogAndQuit
}
#---------------------------------------------------------------------------------------------------
Function GroupDiscovery {
Try{
<# FOR TESTING
$SqlTable=""
$SCOMTable=""
$SourceId="{00000000-0000-0000-0000-000000000000}"
$ManagedEntityId="{00000000-0000-0000-0000-000000000000}"
$Message=""
$CountError=0
$CountWarning=0
$CmdbTable=0
$InSCOM=0
$NotInSCOM=0
#>
<# CODE_SECTION_1
Set variables and load things we'll need.
#>
$CodeSection="1"
$Start=Get-Date
$Account=[System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$ObjMomApi=New-Object -comObject 'MOM.ScriptAPI' # MOMScriptAPI object.
$DiscoveryData=$ObjMomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
$SCOMGroupInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.WindowsClusterCatB']$") # update
$SetupRegKey="HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
$OpsDbServer=(Get-ItemProperty $SetupRegKey).DatabaseServerName
$OpsDbName=(Get-ItemProperty $SetupRegKey).DatabaseName
<#
Not needed.
$DwDbServer=(Get-ItemProperty $SetupRegKey).DataWarehouseDBServerName
$DWDbName=(Get-ItemProperty $SetupRegKey).DataWarehouseDBName
#>
$MpName="SCOM.Cmdb" # Update
$WorkflowName="Cmdb.Discovery.WindowsClusterCatB" # Update
$ScriptName="WindowsClusterCatB.ps1" # Update
$CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='WindowsCluster' and Category ='CatB' and status = 'Active'" # Update
$ScomQuery="SELECT DisplayName AS Name from [$OpsDbName].[dbo].[MT_Microsoft`$Windows`$Cluster]" # Update
$InSCOM=0
$NotInSCOM=0
<# FOR TESTING
#$OpsDbServer="bad_error"
#$OpsDbName="bad_db"
#>
<# CODE_SECTION_2.
Get powershell version.
This is shown in events to assist troubleshooting if powershell doesn't play nice.
#>
$CodeSection="2"
$PSVersion=$PSVersionTable.PSVersion
[string]$PSMajor=$PSVersion.Major
[string]$PSMinor=$PSVersion.Minor
$PSVersion=$PSMajor + "." + $PSMinor
<# CODE_SECTION_3
Query databases.
#>
$CodeSection="3"
$DbQuery=$CmdbQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get cmdb list.
$RecordCount=($SqlTable.name).count
$CmdbTable=$SqlTable
$Message+="CMDB Records: $RecordCount`n"
If ($RecordCount -lt 1) {
EmptySnapshot # If query fails or no records quit.
} Else {
$DbQuery=$ScomQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get SCOM list.
$SCOMTable=$SqlTable
ForEach ($i In $CmdbTable) {
$Object=$i.Name
$match=select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet # Compare cmdb list to SCOM list. Confirmed do need to use "\b".
If ($match -eq $true) {
$InSCOM+=1
# If a match is found create discovery data and relationship between the SCOM group and the object.
$ObjectInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='ClusterLib!Microsoft.Windows.Cluster']$")
$ObjectInstance.AddProperty("$MPElement[Name='ClusterLib!Microsoft.Windows.Cluster']/Name$", $Object)
$RelationshipInstance=$DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupWindowsClusterCatBContainsWindowsClusters']$")
$RelationshipInstance.Source=$SCOMGroupInstance
$RelationshipInstance.Target=$ObjectInstance
$DiscoveryData.AddInstance($RelationshipInstance)   
} Else {
$NotInSCOM+=1
$CountWarning+=1
$MissingObjects+="$Object`n"
}
}
If ($NotInSCOM -gt 0) {
$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM (list below) `n$MissingObjects"
} Else {$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM`n$MissingObjects"
}
SubmitDiscovery
}
}
Catch
{
TerminatingError
}
}
GroupDiscovery -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--WindowsClusterCatC-->
			<Discovery ID="Cmdb.Discovery.WindowsClusterCatC" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.WindowsClusterCatC"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>18600</IntervalSeconds>
					<SyncTime/>
					<ScriptName>WindowsClusterCatC.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
#---------------------------------------------------------------------------------------------------
Function LogAndQuit {

$End=Get-Date
If ($CountError -gt 0) {
$EventLevel=1 # Log error event.
} ElseIf ($CountWarning -gt 0) {
$EventLevel=2 # Log warning event.
} Else {
$EventLevel=0 # Log info event.
}
$EventId=17621
$Mins=(New-TimeSpan -Start $start -End $end).minutes
$Secs=(New-TimeSpan -Start $start -End $end).seconds
# Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
$ObjMomApi.LogScriptEvent("The script $ScriptName executed in $Mins`m:$Secs`s", $EventId, $EventLevel, "Warnings: $CountWarning, Errors: $CountError`nRunning as: $Account`nWorkflow Name: $WorkflowName`nManagement Pack: $MpName (2023.3.20.0)`nPowerShell Version: $PSVersion`n$Message") # $Error dumps errors into the event.
}
#---------------------------------------------------------------------------------------------------
Function TerminatingError
{
$CountError+=1
$Message+="[CODE_SECTION_$CodeSection] A terminating error occurred. Error output: (" + $_.Exception.Message + ")."
EmptySnapshot
}
#---------------------------------------------------------------------------------------------------
Function SQLQuery {
param($OpsDbServer,$OpsDbName,$DbQuery)
$Connection=New-Object System.Data.SQLClient.SQLConnection
$Connection.ConnectionString="Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
$Connection.Open()
$Command=New-Object System.Data.SQLClient.SQLCommand
$Command.Connection=$Connection
$Command.CommandText=$DbQuery
$Reader=$Command.ExecuteReader()
$SqlTable=New-Object System.Data.DataTable
$SqlTable.Load($Reader)
$Connection.Close()
Return $SqlTable
}
#---------------------------------------------------------------------------------------------------
Function EmptySnapshot {
$DiscoveryData.IsSnapshot=$false # this is empty non-snapshot data.
SubmitDiscovery
}
#---------------------------------------------------------------------------------------------------
Function SubmitDiscovery {
<# FOR TESTING
$ObjMomApi.Return($DiscoveryData)
#>
$DiscoveryData
LogAndQuit
}
#---------------------------------------------------------------------------------------------------
Function GroupDiscovery {
Try{
<# FOR TESTING
$SqlTable=""
$SCOMTable=""
$SourceId="{00000000-0000-0000-0000-000000000000}"
$ManagedEntityId="{00000000-0000-0000-0000-000000000000}"
$Message=""
$CountError=0
$CountWarning=0
$CmdbTable=0
$InSCOM=0
$NotInSCOM=0
#>
<# CODE_SECTION_1
Set variables and load things we'll need.
#>
$CodeSection="1"
$Start=Get-Date
$Account=[System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$ObjMomApi=New-Object -comObject 'MOM.ScriptAPI' # MOMScriptAPI object.
$DiscoveryData=$ObjMomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
$SCOMGroupInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.WindowsClusterCatC']$") # update
$SetupRegKey="HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
$OpsDbServer=(Get-ItemProperty $SetupRegKey).DatabaseServerName
$OpsDbName=(Get-ItemProperty $SetupRegKey).DatabaseName
<#
Not needed.
$DwDbServer=(Get-ItemProperty $SetupRegKey).DataWarehouseDBServerName
$DWDbName=(Get-ItemProperty $SetupRegKey).DataWarehouseDBName
#>
$MpName="SCOM.Cmdb" # Update
$WorkflowName="Cmdb.Discovery.WindowsClusterCatC" # Update
$ScriptName="WindowsClusterCatC.ps1" # Update
$CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='WindowsCluster' and Category ='CatC' and status = 'Active'" # Update
$ScomQuery="SELECT DisplayName AS Name from [$OpsDbName].[dbo].[MT_Microsoft`$Windows`$Cluster]" # Update
$InSCOM=0
$NotInSCOM=0
<# FOR TESTING
#$OpsDbServer="bad_error"
#$OpsDbName="bad_db"
#>
<# CODE_SECTION_2.
Get powershell version.
This is shown in events to assist troubleshooting if powershell doesn't play nice.
#>
$CodeSection="2"
$PSVersion=$PSVersionTable.PSVersion
[string]$PSMajor=$PSVersion.Major
[string]$PSMinor=$PSVersion.Minor
$PSVersion=$PSMajor + "." + $PSMinor
<# CODE_SECTION_3
Query databases.
#>
$CodeSection="3"
$DbQuery=$CmdbQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get cmdb list.
$RecordCount=($SqlTable.name).count
$CmdbTable=$SqlTable
$Message+="CMDB Records: $RecordCount`n"
If ($RecordCount -lt 1) {
EmptySnapshot # If query fails or no records quit.
} Else {
$DbQuery=$ScomQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get SCOM list.
$SCOMTable=$SqlTable
ForEach ($i In $CmdbTable) {
$Object=$i.Name
$match=select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet # Compare cmdb list to SCOM list. Confirmed do need to use "\b".
If ($match -eq $true) {
$InSCOM+=1
# If a match is found create discovery data and relationship between the SCOM group and the object.
$ObjectInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='ClusterLib!Microsoft.Windows.Cluster']$")
$ObjectInstance.AddProperty("$MPElement[Name='ClusterLib!Microsoft.Windows.Cluster']/Name$", $Object)
$RelationshipInstance=$DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupWindowsClusterCatCContainsWindowsClusters']$")
$RelationshipInstance.Source=$SCOMGroupInstance
$RelationshipInstance.Target=$ObjectInstance
$DiscoveryData.AddInstance($RelationshipInstance)   
} Else {
$NotInSCOM+=1
$CountWarning+=1
$MissingObjects+="$Object`n"
}
}
If ($NotInSCOM -gt 0) {
$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM (list below) `n$MissingObjects"
} Else {$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM`n$MissingObjects"
}
SubmitDiscovery
}
}
Catch
{
TerminatingError
}
}
GroupDiscovery -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--ADFSCatA-->
			<Discovery ID="Cmdb.Discovery.ADFSCatA" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.ADFSCatA"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>18900</IntervalSeconds>
					<SyncTime/>
					<ScriptName>ADFSCatA.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
#---------------------------------------------------------------------------------------------------
Function LogAndQuit {

$End=Get-Date
If ($CountError -gt 0) {
$EventLevel=1 # Log error event.
} ElseIf ($CountWarning -gt 0) {
$EventLevel=2 # Log warning event.
} Else {
$EventLevel=0 # Log info event.
}
$EventId=17621
$Mins=(New-TimeSpan -Start $start -End $end).minutes
$Secs=(New-TimeSpan -Start $start -End $end).seconds
# Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
$ObjMomApi.LogScriptEvent("The script $ScriptName executed in $Mins`m:$Secs`s", $EventId, $EventLevel, "Warnings: $CountWarning, Errors: $CountError`nRunning as: $Account`nWorkflow Name: $WorkflowName`nManagement Pack: $MpName (2023.3.20.0)`nPowerShell Version: $PSVersion`n$Message") # $Error dumps errors into the event.
}
#---------------------------------------------------------------------------------------------------
Function TerminatingError
{
$CountError+=1
$Message+="[CODE_SECTION_$CodeSection] A terminating error occurred. Error output: (" + $_.Exception.Message + ")."
EmptySnapshot
}
#---------------------------------------------------------------------------------------------------
Function SQLQuery {
param($OpsDbServer,$OpsDbName,$DbQuery)
$Connection=New-Object System.Data.SQLClient.SQLConnection
$Connection.ConnectionString="Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
$Connection.Open()
$Command=New-Object System.Data.SQLClient.SQLCommand
$Command.Connection=$Connection
$Command.CommandText=$DbQuery
$Reader=$Command.ExecuteReader()
$SqlTable=New-Object System.Data.DataTable
$SqlTable.Load($Reader)
$Connection.Close()
Return $SqlTable
}
#---------------------------------------------------------------------------------------------------
Function EmptySnapshot {
$DiscoveryData.IsSnapshot=$false # this is empty non-snapshot data.
SubmitDiscovery
}
#---------------------------------------------------------------------------------------------------
Function SubmitDiscovery {
<# FOR TESTING
$ObjMomApi.Return($DiscoveryData)
#>
$DiscoveryData
LogAndQuit
}
#---------------------------------------------------------------------------------------------------
Function GroupDiscovery {
Try{
<# FOR TESTING
$SqlTable=""
$SCOMTable=""
$SourceId="{00000000-0000-0000-0000-000000000000}"
$ManagedEntityId="{00000000-0000-0000-0000-000000000000}"
$Message=""
$CountError=0
$CountWarning=0
$CmdbTable=0
$InSCOM=0
$NotInSCOM=0
#>
<# CODE_SECTION_1
Set variables and load things we'll need.
#>
$CodeSection="1"
$Start=Get-Date
$Account=[System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$ObjMomApi=New-Object -comObject 'MOM.ScriptAPI' # MOMScriptAPI object.
$DiscoveryData=$ObjMomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
$SCOMGroupInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.ADFSCatA']$") # update
$SetupRegKey="HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
$OpsDbServer=(Get-ItemProperty $SetupRegKey).DatabaseServerName
$OpsDbName=(Get-ItemProperty $SetupRegKey).DatabaseName
<#
Not needed.
$DwDbServer=(Get-ItemProperty $SetupRegKey).DataWarehouseDBServerName
$DWDbName=(Get-ItemProperty $SetupRegKey).DataWarehouseDBName
#>
$MpName="SCOM.Cmdb" # Update
$WorkflowName="Cmdb.Discovery.ADFSCatA" # Update
$ScriptName="ADFSCatA.ps1" # Update
$CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='FederationServer' and Category ='CatA' and status = 'Active'" # Update
$ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]" # Update
$InSCOM=0
$NotInSCOM=0
<# FOR TESTING
#$OpsDbServer="bad_error"
#$OpsDbName="bad_db"
#>
<# CODE_SECTION_2.
Get powershell version.
This is shown in events to assist troubleshooting if powershell doesn't play nice.
#>
$CodeSection="2"
$PSVersion=$PSVersionTable.PSVersion
[string]$PSMajor=$PSVersion.Major
[string]$PSMinor=$PSVersion.Minor
$PSVersion=$PSMajor + "." + $PSMinor
<# CODE_SECTION_3
Query databases.
#>
$CodeSection="3"
$DbQuery=$CmdbQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get cmdb list.
$RecordCount=($SqlTable.name).count
$CmdbTable=$SqlTable
$Message+="CMDB Records: $RecordCount`n"
If ($RecordCount -lt 1) {
EmptySnapshot # If query fails or no records quit.
} Else {
$DbQuery=$ScomQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get SCOM list.
$SCOMTable=$SqlTable
ForEach ($i In $CmdbTable) {
$Object=$i.Name
$match=select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet # Compare cmdb list to SCOM list. Confirmed do need to use "\b".
If ($match -eq $true) {
$InSCOM+=1
# If a match is found create discovery data and relationship between the SCOM group and the object.
$ObjectInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
$ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
$RelationshipInstance=$DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupADFSCatAContainsWindowsComputers']$")
$RelationshipInstance.Source=$SCOMGroupInstance
$RelationshipInstance.Target=$ObjectInstance
$DiscoveryData.AddInstance($RelationshipInstance)   
} Else {
$NotInSCOM+=1
$CountWarning+=1
$MissingObjects+="$Object`n"
}
}
If ($NotInSCOM -gt 0) {
$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM (list below) `n$MissingObjects"
} Else {$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM`n$MissingObjects"
}
SubmitDiscovery
}
}
Catch
{
TerminatingError
}
}
GroupDiscovery -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--ADFSCatB-->
			<Discovery ID="Cmdb.Discovery.ADFSCatB" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.ADFSCatB"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>19200</IntervalSeconds>
					<SyncTime/>
					<ScriptName>ADFSCatB.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
#---------------------------------------------------------------------------------------------------
Function LogAndQuit {

$End=Get-Date
If ($CountError -gt 0) {
$EventLevel=1 # Log error event.
} ElseIf ($CountWarning -gt 0) {
$EventLevel=2 # Log warning event.
} Else {
$EventLevel=0 # Log info event.
}
$EventId=17621
$Mins=(New-TimeSpan -Start $start -End $end).minutes
$Secs=(New-TimeSpan -Start $start -End $end).seconds
# Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
$ObjMomApi.LogScriptEvent("The script $ScriptName executed in $Mins`m:$Secs`s", $EventId, $EventLevel, "Warnings: $CountWarning, Errors: $CountError`nRunning as: $Account`nWorkflow Name: $WorkflowName`nManagement Pack: $MpName (2023.3.20.0)`nPowerShell Version: $PSVersion`n$Message") # $Error dumps errors into the event.
}
#---------------------------------------------------------------------------------------------------
Function TerminatingError
{
$CountError+=1
$Message+="[CODE_SECTION_$CodeSection] A terminating error occurred. Error output: (" + $_.Exception.Message + ")."
EmptySnapshot
}
#---------------------------------------------------------------------------------------------------
Function SQLQuery {
param($OpsDbServer,$OpsDbName,$DbQuery)
$Connection=New-Object System.Data.SQLClient.SQLConnection
$Connection.ConnectionString="Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
$Connection.Open()
$Command=New-Object System.Data.SQLClient.SQLCommand
$Command.Connection=$Connection
$Command.CommandText=$DbQuery
$Reader=$Command.ExecuteReader()
$SqlTable=New-Object System.Data.DataTable
$SqlTable.Load($Reader)
$Connection.Close()
Return $SqlTable
}
#---------------------------------------------------------------------------------------------------
Function EmptySnapshot {
$DiscoveryData.IsSnapshot=$false # this is empty non-snapshot data.
SubmitDiscovery
}
#---------------------------------------------------------------------------------------------------
Function SubmitDiscovery {
<# FOR TESTING
$ObjMomApi.Return($DiscoveryData)
#>
$DiscoveryData
LogAndQuit
}
#---------------------------------------------------------------------------------------------------
Function GroupDiscovery {
Try{
<# FOR TESTING
$SqlTable=""
$SCOMTable=""
$SourceId="{00000000-0000-0000-0000-000000000000}"
$ManagedEntityId="{00000000-0000-0000-0000-000000000000}"
$Message=""
$CountError=0
$CountWarning=0
$CmdbTable=0
$InSCOM=0
$NotInSCOM=0
#>
<# CODE_SECTION_1
Set variables and load things we'll need.
#>
$CodeSection="1"
$Start=Get-Date
$Account=[System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$ObjMomApi=New-Object -comObject 'MOM.ScriptAPI' # MOMScriptAPI object.
$DiscoveryData=$ObjMomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
$SCOMGroupInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.ADFSCatB']$") # update
$SetupRegKey="HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
$OpsDbServer=(Get-ItemProperty $SetupRegKey).DatabaseServerName
$OpsDbName=(Get-ItemProperty $SetupRegKey).DatabaseName
<#
Not needed.
$DwDbServer=(Get-ItemProperty $SetupRegKey).DataWarehouseDBServerName
$DWDbName=(Get-ItemProperty $SetupRegKey).DataWarehouseDBName
#>
$MpName="SCOM.Cmdb" # Update
$WorkflowName="Cmdb.Discovery.ADFSCatB" # Update
$ScriptName="ADFSCatB.ps1" # Update
$CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='FederationServer' and Category ='CatB' and status = 'Active'" # Update
$ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]" # Update
$InSCOM=0
$NotInSCOM=0
<# FOR TESTING
#$OpsDbServer="bad_error"
#$OpsDbName="bad_db"
#>
<# CODE_SECTION_2.
Get powershell version.
This is shown in events to assist troubleshooting if powershell doesn't play nice.
#>
$CodeSection="2"
$PSVersion=$PSVersionTable.PSVersion
[string]$PSMajor=$PSVersion.Major
[string]$PSMinor=$PSVersion.Minor
$PSVersion=$PSMajor + "." + $PSMinor
<# CODE_SECTION_3
Query databases.
#>
$CodeSection="3"
$DbQuery=$CmdbQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get cmdb list.
$RecordCount=($SqlTable.name).count
$CmdbTable=$SqlTable
$Message+="CMDB Records: $RecordCount`n"
If ($RecordCount -lt 1) {
EmptySnapshot # If query fails or no records quit.
} Else {
$DbQuery=$ScomQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get SCOM list.
$SCOMTable=$SqlTable
ForEach ($i In $CmdbTable) {
$Object=$i.Name
$match=select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet # Compare cmdb list to SCOM list. Confirmed do need to use "\b".
If ($match -eq $true) {
$InSCOM+=1
# If a match is found create discovery data and relationship between the SCOM group and the object.
$ObjectInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
$ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
$RelationshipInstance=$DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupADFSCatBContainsWindowsComputers']$")
$RelationshipInstance.Source=$SCOMGroupInstance
$RelationshipInstance.Target=$ObjectInstance
$DiscoveryData.AddInstance($RelationshipInstance)   
} Else {
$NotInSCOM+=1
$CountWarning+=1
$MissingObjects+="$Object`n"
}
}
If ($NotInSCOM -gt 0) {
$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM (list below) `n$MissingObjects"
} Else {$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM`n$MissingObjects"
}
SubmitDiscovery
}
}
Catch
{
TerminatingError
}
}
GroupDiscovery -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--IISCatB-->
			<Discovery ID="Cmdb.Discovery.IISCatB" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.IISCatB"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>19500</IntervalSeconds>
					<SyncTime/>
					<ScriptName>IISCatB.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
#---------------------------------------------------------------------------------------------------
Function LogAndQuit {

$End=Get-Date
If ($CountError -gt 0) {
$EventLevel=1 # Log error event.
} ElseIf ($CountWarning -gt 0) {
$EventLevel=2 # Log warning event.
} Else {
$EventLevel=0 # Log info event.
}
$EventId=17621
$Mins=(New-TimeSpan -Start $start -End $end).minutes
$Secs=(New-TimeSpan -Start $start -End $end).seconds
# Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
$ObjMomApi.LogScriptEvent("The script $ScriptName executed in $Mins`m:$Secs`s", $EventId, $EventLevel, "Warnings: $CountWarning, Errors: $CountError`nRunning as: $Account`nWorkflow Name: $WorkflowName`nManagement Pack: $MpName (2023.3.20.0)`nPowerShell Version: $PSVersion`n$Message") # $Error dumps errors into the event.
}
#---------------------------------------------------------------------------------------------------
Function TerminatingError
{
$CountError+=1
$Message+="[CODE_SECTION_$CodeSection] A terminating error occurred. Error output: (" + $_.Exception.Message + ")."
EmptySnapshot
}
#---------------------------------------------------------------------------------------------------
Function SQLQuery {
param($OpsDbServer,$OpsDbName,$DbQuery)
$Connection=New-Object System.Data.SQLClient.SQLConnection
$Connection.ConnectionString="Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
$Connection.Open()
$Command=New-Object System.Data.SQLClient.SQLCommand
$Command.Connection=$Connection
$Command.CommandText=$DbQuery
$Reader=$Command.ExecuteReader()
$SqlTable=New-Object System.Data.DataTable
$SqlTable.Load($Reader)
$Connection.Close()
Return $SqlTable
}
#---------------------------------------------------------------------------------------------------
Function EmptySnapshot {
$DiscoveryData.IsSnapshot=$false # this is empty non-snapshot data.
SubmitDiscovery
}
#---------------------------------------------------------------------------------------------------
Function SubmitDiscovery {
<# FOR TESTING
$ObjMomApi.Return($DiscoveryData)
#>
$DiscoveryData
LogAndQuit
}
#---------------------------------------------------------------------------------------------------
Function GroupDiscovery {
Try{
<# FOR TESTING
$SqlTable=""
$SCOMTable=""
$SourceId="{00000000-0000-0000-0000-000000000000}"
$ManagedEntityId="{00000000-0000-0000-0000-000000000000}"
$Message=""
$CountError=0
$CountWarning=0
$CmdbTable=0
$InSCOM=0
$NotInSCOM=0
#>
<# CODE_SECTION_1
Set variables and load things we'll need.
#>
$CodeSection="1"
$Start=Get-Date
$Account=[System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$ObjMomApi=New-Object -comObject 'MOM.ScriptAPI' # MOMScriptAPI object.
$DiscoveryData=$ObjMomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
$SCOMGroupInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.IISCatB']$") # update
$SetupRegKey="HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
$OpsDbServer=(Get-ItemProperty $SetupRegKey).DatabaseServerName
$OpsDbName=(Get-ItemProperty $SetupRegKey).DatabaseName
<#
Not needed.
$DwDbServer=(Get-ItemProperty $SetupRegKey).DataWarehouseDBServerName
$DWDbName=(Get-ItemProperty $SetupRegKey).DataWarehouseDBName
#>
$MpName="SCOM.Cmdb" # Update
$WorkflowName="Cmdb.Discovery.IISCatB" # Update
$ScriptName="IISCatB.ps1" # Update
$CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='IISWebServer' and Category ='CatB' and status = 'Active'" # Update
$ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]" # Update
$InSCOM=0
$NotInSCOM=0
<# FOR TESTING
#$OpsDbServer="bad_error"
#$OpsDbName="bad_db"
#>
<# CODE_SECTION_2.
Get powershell version.
This is shown in events to assist troubleshooting if powershell doesn't play nice.
#>
$CodeSection="2"
$PSVersion=$PSVersionTable.PSVersion
[string]$PSMajor=$PSVersion.Major
[string]$PSMinor=$PSVersion.Minor
$PSVersion=$PSMajor + "." + $PSMinor
<# CODE_SECTION_3
Query databases.
#>
$CodeSection="3"
$DbQuery=$CmdbQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get cmdb list.
$RecordCount=($SqlTable.name).count
$CmdbTable=$SqlTable
$Message+="CMDB Records: $RecordCount`n"
If ($RecordCount -lt 1) {
EmptySnapshot # If query fails or no records quit.
} Else {
$DbQuery=$ScomQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get SCOM list.
$SCOMTable=$SqlTable
ForEach ($i In $CmdbTable) {
$Object=$i.Name
$match=select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet # Compare cmdb list to SCOM list. Confirmed do need to use "\b".
If ($match -eq $true) {
$InSCOM+=1
# If a match is found create discovery data and relationship between the SCOM group and the object.
$ObjectInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
$ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
$RelationshipInstance=$DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupIISCatBContainsWindowsComputers']$")
$RelationshipInstance.Source=$SCOMGroupInstance
$RelationshipInstance.Target=$ObjectInstance
$DiscoveryData.AddInstance($RelationshipInstance)   
} Else {
$NotInSCOM+=1
$CountWarning+=1
$MissingObjects+="$Object`n"
}
}
If ($NotInSCOM -gt 0) {
$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM (list below) `n$MissingObjects"
} Else {$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM`n$MissingObjects"
}
SubmitDiscovery
}
}
Catch
{
TerminatingError
}
}
GroupDiscovery -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--McAfeeDisableMonitoring-->
			<Discovery ID="Cmdb.Discovery.McAfeeDisableMonitoring" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.McAfeeDisableMonitoring"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>19800</IntervalSeconds>
					<SyncTime/>
					<ScriptName>McAfeeDisableMonitoring.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
#---------------------------------------------------------------------------------------------------
Function LogAndQuit {

$End=Get-Date
If ($CountError -gt 0) {
$EventLevel=1 # Log error event.
} ElseIf ($CountWarning -gt 0) {
$EventLevel=2 # Log warning event.
} Else {
$EventLevel=0 # Log info event.
}
$EventId=17621
$Mins=(New-TimeSpan -Start $start -End $end).minutes
$Secs=(New-TimeSpan -Start $start -End $end).seconds
# Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
$ObjMomApi.LogScriptEvent("The script $ScriptName executed in $Mins`m:$Secs`s", $EventId, $EventLevel, "Warnings: $CountWarning, Errors: $CountError`nRunning as: $Account`nWorkflow Name: $WorkflowName`nManagement Pack: $MpName (2023.3.20.0)`nPowerShell Version: $PSVersion`n$Message") # $Error dumps errors into the event.
}
#---------------------------------------------------------------------------------------------------
Function TerminatingError
{
$CountError+=1
$Message+="[CODE_SECTION_$CodeSection] A terminating error occurred. Error output: (" + $_.Exception.Message + ")."
EmptySnapshot
}
#---------------------------------------------------------------------------------------------------
Function SQLQuery {
param($OpsDbServer,$OpsDbName,$DbQuery)
$Connection=New-Object System.Data.SQLClient.SQLConnection
$Connection.ConnectionString="Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
$Connection.Open()
$Command=New-Object System.Data.SQLClient.SQLCommand
$Command.Connection=$Connection
$Command.CommandText=$DbQuery
$Reader=$Command.ExecuteReader()
$SqlTable=New-Object System.Data.DataTable
$SqlTable.Load($Reader)
$Connection.Close()
Return $SqlTable
}
#---------------------------------------------------------------------------------------------------
Function EmptySnapshot {
$DiscoveryData.IsSnapshot=$false # this is empty non-snapshot data.
SubmitDiscovery
}
#---------------------------------------------------------------------------------------------------
Function SubmitDiscovery {
<# FOR TESTING
$ObjMomApi.Return($DiscoveryData)
#>
$DiscoveryData
LogAndQuit
}
#---------------------------------------------------------------------------------------------------
Function GroupDiscovery {
Try{
<# FOR TESTING
$SqlTable=""
$SCOMTable=""
$SourceId="{00000000-0000-0000-0000-000000000000}"
$ManagedEntityId="{00000000-0000-0000-0000-000000000000}"
$Message=""
$CountError=0
$CountWarning=0
$CmdbTable=0
$InSCOM=0
$NotInSCOM=0
#>
<# CODE_SECTION_1
Set variables and load things we'll need.
#>
$CodeSection="1"
$Start=Get-Date
$Account=[System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$ObjMomApi=New-Object -comObject 'MOM.ScriptAPI' # MOMScriptAPI object.
$DiscoveryData=$ObjMomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
$SCOMGroupInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.McAfeeDisableMonitoring']$") # update
$SetupRegKey="HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
$OpsDbServer=(Get-ItemProperty $SetupRegKey).DatabaseServerName
$OpsDbName=(Get-ItemProperty $SetupRegKey).DatabaseName
<#
Not needed.
$DwDbServer=(Get-ItemProperty $SetupRegKey).DataWarehouseDBServerName
$DWDbName=(Get-ItemProperty $SetupRegKey).DataWarehouseDBName
#>
$MpName="SCOM.Cmdb" # Update
$WorkflowName="Cmdb.Discovery.McAfeeDisableMonitoring" # Update
$ScriptName="McAfeeDisableMonitoring.ps1" # Update
$CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='McAfee' and Category ='CatA' and status = 'Disabled'" # Update
$ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]" # Update
$InSCOM=0
$NotInSCOM=0
<# FOR TESTING
#$OpsDbServer="bad_error"
#$OpsDbName="bad_db"
#>
<# CODE_SECTION_2.
Get powershell version.
This is shown in events to assist troubleshooting if powershell doesn't play nice.
#>
$CodeSection="2"
$PSVersion=$PSVersionTable.PSVersion
[string]$PSMajor=$PSVersion.Major
[string]$PSMinor=$PSVersion.Minor
$PSVersion=$PSMajor + "." + $PSMinor
<# CODE_SECTION_3
Query databases.
#>
$CodeSection="3"
$DbQuery=$CmdbQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get cmdb list.
$RecordCount=($SqlTable.name).count
$CmdbTable=$SqlTable
$Message+="CMDB Records: $RecordCount`n"
<#
Removed this in 2023.3.20.0.
If ($RecordCount -lt 1) {
EmptySnapshot # If query fails or no records quit.
} Else {
#>
$DbQuery=$ScomQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get SCOM list.
$SCOMTable=$SqlTable
ForEach ($i In $CmdbTable) {
$Object=$i.Name
$match=select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet # Compare cmdb list to SCOM list. Confirmed do need to use "\b".
If ($match -eq $true) {
$InSCOM+=1
# If a match is found create discovery data and relationship between the SCOM group and the object.
$ObjectInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
$ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
$RelationshipInstance=$DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupMcAfeeDisableMonitoringContainsWindowsComputers']$")
$RelationshipInstance.Source=$SCOMGroupInstance
$RelationshipInstance.Target=$ObjectInstance
$DiscoveryData.AddInstance($RelationshipInstance)   
} Else {
$NotInSCOM+=1
$CountWarning+=1
$MissingObjects+="$Object`n"
}
}
If ($NotInSCOM -gt 0) {
$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM (list below) `n$MissingObjects"
} Else {$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM`n$MissingObjects"
}
SubmitDiscovery
#} # end else
}
Catch
{
TerminatingError
}
}
GroupDiscovery -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			
			<!--IISCatC-->
			<Discovery ID="Cmdb.Discovery.IISCatC" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.IISCatC"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>20100</IntervalSeconds>
					<SyncTime/>
					<ScriptName>IISCatC.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
#---------------------------------------------------------------------------------------------------
Function LogAndQuit {

$End=Get-Date
If ($CountError -gt 0) {
$EventLevel=1 # Log error event.
} ElseIf ($CountWarning -gt 0) {
$EventLevel=2 # Log warning event.
} Else {
$EventLevel=0 # Log info event.
}
$EventId=17621
$Mins=(New-TimeSpan -Start $start -End $end).minutes
$Secs=(New-TimeSpan -Start $start -End $end).seconds
# Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
$ObjMomApi.LogScriptEvent("The script $ScriptName executed in $Mins`m:$Secs`s", $EventId, $EventLevel, "Warnings: $CountWarning, Errors: $CountError`nRunning as: $Account`nWorkflow Name: $WorkflowName`nManagement Pack: $MpName (2023.3.20.0)`nPowerShell Version: $PSVersion`n$Message") # $Error dumps errors into the event.
}
#---------------------------------------------------------------------------------------------------
Function TerminatingError
{
$CountError+=1
$Message+="[CODE_SECTION_$CodeSection] A terminating error occurred. Error output: (" + $_.Exception.Message + ")."
EmptySnapshot
}
#---------------------------------------------------------------------------------------------------
Function SQLQuery {
param($OpsDbServer,$OpsDbName,$DbQuery)
$Connection=New-Object System.Data.SQLClient.SQLConnection
$Connection.ConnectionString="Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
$Connection.Open()
$Command=New-Object System.Data.SQLClient.SQLCommand
$Command.Connection=$Connection
$Command.CommandText=$DbQuery
$Reader=$Command.ExecuteReader()
$SqlTable=New-Object System.Data.DataTable
$SqlTable.Load($Reader)
$Connection.Close()
Return $SqlTable
}
#---------------------------------------------------------------------------------------------------
Function EmptySnapshot {
$DiscoveryData.IsSnapshot=$false # this is empty non-snapshot data.
SubmitDiscovery
}
#---------------------------------------------------------------------------------------------------
Function SubmitDiscovery {
<# FOR TESTING
$ObjMomApi.Return($DiscoveryData)
#>
$DiscoveryData
LogAndQuit
}
#---------------------------------------------------------------------------------------------------
Function GroupDiscovery {
Try{
<# FOR TESTING
$SqlTable=""
$SCOMTable=""
$SourceId="{00000000-0000-0000-0000-000000000000}"
$ManagedEntityId="{00000000-0000-0000-0000-000000000000}"
$Message=""
$CountError=0
$CountWarning=0
$CmdbTable=0
$InSCOM=0
$NotInSCOM=0
#>
<# CODE_SECTION_1
Set variables and load things we'll need.
#>
$CodeSection="1"
$Start=Get-Date
$Account=[System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$ObjMomApi=New-Object -comObject 'MOM.ScriptAPI' # MOMScriptAPI object.
$DiscoveryData=$ObjMomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
$SCOMGroupInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.IISCatC']$") # update
$SetupRegKey="HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
$OpsDbServer=(Get-ItemProperty $SetupRegKey).DatabaseServerName
$OpsDbName=(Get-ItemProperty $SetupRegKey).DatabaseName
<#
Not needed.
$DwDbServer=(Get-ItemProperty $SetupRegKey).DataWarehouseDBServerName
$DWDbName=(Get-ItemProperty $SetupRegKey).DataWarehouseDBName
#>
$MpName="SCOM.Cmdb" # Update
$WorkflowName="Cmdb.Discovery.IISCatC" # Update
$ScriptName="IISCatC.ps1" # Update
$CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='IISWebServer' and Category ='CatC' and status = 'Active'" # Update
$ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]" # Update
$InSCOM=0
$NotInSCOM=0
<# FOR TESTING
#$OpsDbServer="bad_error"
#$OpsDbName="bad_db"
#>
<# CODE_SECTION_2.
Get powershell version.
This is shown in events to assist troubleshooting if powershell doesn't play nice.
#>
$CodeSection="2"
$PSVersion=$PSVersionTable.PSVersion
[string]$PSMajor=$PSVersion.Major
[string]$PSMinor=$PSVersion.Minor
$PSVersion=$PSMajor + "." + $PSMinor
<# CODE_SECTION_3
Query databases.
#>
$CodeSection="3"
$DbQuery=$CmdbQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get cmdb list.
$RecordCount=($SqlTable.name).count
$CmdbTable=$SqlTable
$Message+="CMDB Records: $RecordCount`n"
If ($RecordCount -lt 1) {
EmptySnapshot # If query fails or no records quit.
} Else {
$DbQuery=$ScomQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get SCOM list.
$SCOMTable=$SqlTable
ForEach ($i In $CmdbTable) {
$Object=$i.Name
$match=select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet # Compare cmdb list to SCOM list. Confirmed do need to use "\b".
If ($match -eq $true) {
$InSCOM+=1
# If a match is found create discovery data and relationship between the SCOM group and the object.
$ObjectInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
$ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
$RelationshipInstance=$DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupIISCatCContainsWindowsComputers']$")
$RelationshipInstance.Source=$SCOMGroupInstance
$RelationshipInstance.Target=$ObjectInstance
$DiscoveryData.AddInstance($RelationshipInstance)   
} Else {
$NotInSCOM+=1
$CountWarning+=1
$MissingObjects+="$Object`n"
}
}
If ($NotInSCOM -gt 0) {
$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM (list below) `n$MissingObjects"
} Else {$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM`n$MissingObjects"
}
SubmitDiscovery
}
}
Catch
{
TerminatingError
}
}
GroupDiscovery -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>

			<!--WindowsCertificateDisableMonitoring-->
			<Discovery ID="Cmdb.Discovery.WindowsCertificateDisableMonitoring" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.WindowsCertificateDisableMonitoring"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>20400</IntervalSeconds>
					<SyncTime/>
					<ScriptName>WindowsCertificateDisableMonitoring.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
#---------------------------------------------------------------------------------------------------
Function LogAndQuit {

$End=Get-Date
If ($CountError -gt 0) {
$EventLevel=1 # Log error event.
} ElseIf ($CountWarning -gt 0) {
$EventLevel=2 # Log warning event.
} Else {
$EventLevel=0 # Log info event.
}
$EventId=17621
$Mins=(New-TimeSpan -Start $start -End $end).minutes
$Secs=(New-TimeSpan -Start $start -End $end).seconds
# Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
$ObjMomApi.LogScriptEvent("The script $ScriptName executed in $Mins`m:$Secs`s", $EventId, $EventLevel, "Warnings: $CountWarning, Errors: $CountError`nRunning as: $Account`nWorkflow Name: $WorkflowName`nManagement Pack: $MpName (2023.3.20.0)`nPowerShell Version: $PSVersion`n$Message") # $Error dumps errors into the event.
}
#---------------------------------------------------------------------------------------------------
Function TerminatingError
{
$CountError+=1
$Message+="[CODE_SECTION_$CodeSection] A terminating error occurred. Error output: (" + $_.Exception.Message + ")."
EmptySnapshot
}
#---------------------------------------------------------------------------------------------------
Function SQLQuery {
param($OpsDbServer,$OpsDbName,$DbQuery)
$Connection=New-Object System.Data.SQLClient.SQLConnection
$Connection.ConnectionString="Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
$Connection.Open()
$Command=New-Object System.Data.SQLClient.SQLCommand
$Command.Connection=$Connection
$Command.CommandText=$DbQuery
$Reader=$Command.ExecuteReader()
$SqlTable=New-Object System.Data.DataTable
$SqlTable.Load($Reader)
$Connection.Close()
Return $SqlTable
}
#---------------------------------------------------------------------------------------------------
Function EmptySnapshot {
$DiscoveryData.IsSnapshot=$false # this is empty non-snapshot data.
SubmitDiscovery
}
#---------------------------------------------------------------------------------------------------
Function SubmitDiscovery {
<# FOR TESTING
$ObjMomApi.Return($DiscoveryData)
#>
$DiscoveryData
LogAndQuit
}
#---------------------------------------------------------------------------------------------------
Function GroupDiscovery {
Try{
<# FOR TESTING
$SqlTable=""
$SCOMTable=""
$SourceId="{00000000-0000-0000-0000-000000000000}"
$ManagedEntityId="{00000000-0000-0000-0000-000000000000}"
$Message=""
$CountError=0
$CountWarning=0
$CmdbTable=0
$InSCOM=0
$NotInSCOM=0
#>
<# CODE_SECTION_1
Set variables and load things we'll need.
#>
$CodeSection="1"
$Start=Get-Date
$Account=[System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$ObjMomApi=New-Object -comObject 'MOM.ScriptAPI' # MOMScriptAPI object.
$DiscoveryData=$ObjMomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
$SCOMGroupInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.WindowsCertificateDisableMonitoring']$") # update
$SetupRegKey="HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
$OpsDbServer=(Get-ItemProperty $SetupRegKey).DatabaseServerName
$OpsDbName=(Get-ItemProperty $SetupRegKey).DatabaseName
<#
Not needed.
$DwDbServer=(Get-ItemProperty $SetupRegKey).DataWarehouseDBServerName
$DWDbName=(Get-ItemProperty $SetupRegKey).DataWarehouseDBName
#>
$MpName="SCOM.Cmdb" # Update
$WorkflowName="Cmdb.Discovery.WindowsCertificateDisableMonitoring" # Update
$ScriptName="WindowsCertificateDisableMonitoring.ps1" # Update
$CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='WindowsCertificate' and Status='Disabled'" # Update
$ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]" # Update
$InSCOM=0
$NotInSCOM=0
<# FOR TESTING
#$OpsDbServer="bad_error"
#$OpsDbName="bad_db"
#>
<# CODE_SECTION_2.
Get powershell version.
This is shown in events to assist troubleshooting if powershell doesn't play nice.
#>
$CodeSection="2"
$PSVersion=$PSVersionTable.PSVersion
[string]$PSMajor=$PSVersion.Major
[string]$PSMinor=$PSVersion.Minor
$PSVersion=$PSMajor + "." + $PSMinor
<# CODE_SECTION_3
Query databases.
#>
$CodeSection="3"
$DbQuery=$CmdbQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get cmdb list.
$RecordCount=($SqlTable.name).count
$CmdbTable=$SqlTable
$Message+="CMDB Records: $RecordCount`n"
If ($RecordCount -lt 1) {
EmptySnapshot # If query fails or no records quit.
} Else {
$DbQuery=$ScomQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get SCOM list.
$SCOMTable=$SqlTable
ForEach ($i In $CmdbTable) {
$Object=$i.Name
$match=select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet # Compare cmdb list to SCOM list. Confirmed do need to use "\b".
If ($match -eq $true) {
$InSCOM+=1
# If a match is found create discovery data and relationship between the SCOM group and the object.
$ObjectInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
$ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
$RelationshipInstance=$DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupWindowsCertificateDisableMonitoringContainsWindowsComputers']$")
$RelationshipInstance.Source=$SCOMGroupInstance
$RelationshipInstance.Target=$ObjectInstance
$DiscoveryData.AddInstance($RelationshipInstance)   
} Else {
$NotInSCOM+=1
$CountWarning+=1
$MissingObjects+="$Object`n"
}
}
If ($NotInSCOM -gt 0) {
$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM (list below) `n$MissingObjects"
} Else {$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM`n$MissingObjects"
}
SubmitDiscovery
}
}
Catch
{
TerminatingError
}
}
GroupDiscovery -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>

		</Discoveries>
		<Rules>
			<Rule ID="Cmdb.Rule.ScriptError" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
				<Category>Alert</Category>
				<DataSources>
					<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
						<ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
						<LogName>Operations Manager</LogName>
						<Expression>
							<And>
								<Expression>
									<SimpleExpression>
										<ValueExpression>
											<XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
										</ValueExpression>
										<Operator>Equal</Operator>
										<ValueExpression>
											<Value Type="UnsignedInteger">17621</Value>
										</ValueExpression>
									</SimpleExpression>
								</Expression>
								<Expression>
									<SimpleExpression>
										<ValueExpression>
											<XPathQuery Type="Integer">EventLevel</XPathQuery>
										</ValueExpression>
										<Operator>Equal</Operator>
										<ValueExpression>
											<Value Type="Integer">1</Value>
										</ValueExpression>
									</SimpleExpression>
								</Expression>
							</And>
						</Expression>
					</DataSource>
				</DataSources>
				<WriteActions>
					<WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
						<Priority>1</Priority>
						<Severity>2</Severity>
						<AlertOwner/>
						<AlertMessageId>$MPElement[Name="Cmdb.Rule.ScriptError.AlertMessage"]$</AlertMessageId>
						<AlertParameters>
							<AlertParameter1>$Data/EventDescription$</AlertParameter1>
						</AlertParameters>
						<Suppression/>
						<Custom1/>
						<Custom2/>
						<Custom3/>
						<Custom4/>
						<Custom5/>
						<Custom6/>
						<Custom7/>
						<Custom8/>
						<Custom9/>
						<Custom10/>
					</WriteAction>
				</WriteActions>
			</Rule>
			<Rule ID="Cmdb.Rule.ScriptWarning" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
				<Category>Alert</Category>
				<DataSources>
					<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
						<ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
						<LogName>Operations Manager</LogName>
						<Expression>
							<And>
								<Expression>
									<SimpleExpression>
										<ValueExpression>
											<XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
										</ValueExpression>
										<Operator>Equal</Operator>
										<ValueExpression>
											<Value Type="UnsignedInteger">17621</Value>
										</ValueExpression>
									</SimpleExpression>
								</Expression>
								<Expression>
									<SimpleExpression>
										<ValueExpression>
											<XPathQuery Type="Integer">EventLevel</XPathQuery>
										</ValueExpression>
										<Operator>Equal</Operator>
										<ValueExpression>
											<Value Type="Integer">2</Value>
										</ValueExpression>
									</SimpleExpression>
								</Expression>
							</And>
						</Expression>
					</DataSource>
				</DataSources>
				<WriteActions>
					<WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
						<Priority>1</Priority>
						<Severity>1</Severity>
						<AlertOwner/>
						<AlertMessageId>$MPElement[Name="Cmdb.Rule.ScriptWarning.AlertMessage"]$</AlertMessageId>
						<AlertParameters>
							<AlertParameter1>$Data/EventDescription$</AlertParameter1>
						</AlertParameters>
						<Suppression/>
						<Custom1/>
						<Custom2/>
						<Custom3/>
						<Custom4/>
						<Custom5/>
						<Custom6/>
						<Custom7/>
						<Custom8/>
						<Custom9/>
						<Custom10/>
					</WriteAction>
				</WriteActions>
			</Rule>
		</Rules>
	</Monitoring>
	<Presentation>
		<StringResources>
			<StringResource ID="Cmdb.Rule.ScriptError.AlertMessage"/>
			<StringResource ID="Cmdb.Rule.ScriptWarning.AlertMessage"/>
		</StringResources>
	</Presentation>
	<LanguagePacks>
		<LanguagePack ID="ENU" IsDefault="false">
			<DisplayStrings>
				<DisplayString ElementID="SCOM.Cmdb">
					<Name>SCOM Cmdb</Name>
					<Description>Populates groups using SQL queries.</Description>
				</DisplayString>
				<!--WindowsServer-->
				<DisplayString ElementID="Cmdb.Group.WindowsServerCatA">
					<Name>CMDB Windows Server CatA</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.WindowsServerCatA">
					<Name>Populate Cmdb.Group.WindowsServerCatA</Name>
					<Description>This discovery rule populates the group Cmdb.Group.WindowsServerCatA.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Group.WindowsServerCatB">
					<Name>CMDB Windows Server CatB</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.WindowsServerCatB">
					<Name>Populate Cmdb.Group.WindowsServerCatB</Name>
					<Description>This discovery rule populates the group Cmdb.Group.WindowsServerCatB.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Group.WindowsServerCatC">
					<Name>CMDB Windows Server CatC</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.WindowsServerCatC">
					<Name>Populate Cmdb.Group.WindowsServerCatC</Name>
					<Description>This discovery rule populates the group Cmdb.Group.WindowsServerCatC.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Group.HealthServiceWatcherCatA">
					<Name>CMDB Health Service Watcher CatA</Name>
					<Description>Contains Health Service Watcher objects of Cmdb.Group.WindowsServerCatA group members. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.HealthServiceWatcherCatA">
					<Name>Populate Cmdb.Group.HealthServiceWatcherCatA</Name>
					<Description>This discovery rule populates the group Cmdb.Group.HealthServiceWatcherCatA</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Group.HealthServiceWatcherCatB">
					<Name>CMDB Health Service Watcher CatB</Name>
					<Description>Contains Health Service Watcher objects of Cmdb.Group.WindowsServerCatB group members. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.HealthServiceWatcherCatB">
					<Name>Populate Cmdb.Group.HealthServiceWatcherCatB</Name>
					<Description>This discovery rule populates the group Cmdb.Group.HealthServiceWatcherCatB</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Group.HealthServiceWatcherCatC">
					<Name>CMDB Health Service Watcher CatC</Name>
					<Description>Contains Health Service Watcher objects of Cmdb.Group.WindowsServerCatC group members. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.HealthServiceWatcherCatC">
					<Name>Populate Cmdb.Group.HealthServiceWatcherCatC</Name>
					<Description>This discovery rule populates the group Cmdb.Group.HealthServiceWatcherCatC</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Rule.ScriptError">
					<Name>Cmdb Rule Script Error</Name>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Rule.ScriptError.AlertMessage">
					<Name>Cmdb script error</Name>
					<Description>{0}</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Rule.ScriptWarning">
					<Name>Cmdb Rule Script Warning</Name>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Rule.ScriptWarning.AlertMessage">
					<Name>Cmdb script warning</Name>
					<Description>{0}</Description>
				</DisplayString>
				<!--ADDS-->
				<DisplayString ElementID="Cmdb.Group.ADDSCatA">
					<Name>CMDB ADDS CatA</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.ADDSCatA">
					<Name>Populate Cmdb.Group.ADDSCatA</Name>
					<Description>This discovery rule populates the group Cmdb.Group.ADDSCatA.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Group.ADDSCatB">
					<Name>CMDB ADDS CatB</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.ADDSCatB">
					<Name>Populate Cmdb.Group.ADDSCatB</Name>
					<Description>This discovery rule populates the group Cmdb.Group.ADDSCatB.</Description>
				</DisplayString>
				<!--DNS-->
				<DisplayString ElementID="Cmdb.Group.DNSCatA">
					<Name>CMDB DNS CatA</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.DNSCatA">
					<Name>Populate Cmdb.Group.DNSCatA</Name>
					<Description>This discovery rule populates the group Cmdb.Group.DNSCatA.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Group.DNSCatB">
					<Name>CMDB DNS CatB</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.DNSCatB">
					<Name>Populate Cmdb.Group.DNSCatB</Name>
					<Description>This discovery rule populates the group Cmdb.Group.DNSCatB.</Description>
				</DisplayString>
				<!--DHCP-->
				<DisplayString ElementID="Cmdb.Group.DHCPCatA">
					<Name>CMDB DHCP CatA</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.DHCPCatA">
					<Name>Populate Cmdb.Group.DHCPCatA</Name>
					<Description>This discovery rule populates the group Cmdb.Group.DHCPCatA.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Group.DHCPCatB">
					<Name>CMDB DHCP CatB</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.DHCPCatB">
					<Name>Populate Cmdb.Group.DHCPCatB</Name>
					<Description>This discovery rule populates the group Cmdb.Group.DHCPCatB.</Description>
				</DisplayString>
				<!--IIS-->
				<DisplayString ElementID="Cmdb.Group.IISCatA">
					<Name>CMDB IIS CatA</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.IISCatA">
					<Name>Populate Cmdb.Group.IISCatA</Name>
					<Description>This discovery rule populates the group Cmdb.Group.IISCatA.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Group.IISCatB">
					<Name>CMDB IIS CatB</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.IISCatB">
					<Name>Populate Cmdb.Group.IISCatB</Name>
					<Description>This discovery rule populates the group Cmdb.Group.IISCatB.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Group.IISCatC">
					<Name>CMDB IIS CatC</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.IISCatC">
					<Name>Populate Cmdb.Group.IISCatC</Name>
					<Description>This discovery rule populates the group Cmdb.Group.IISCatC.</Description>
				</DisplayString>
				<!--SQL-->
				<DisplayString ElementID="Cmdb.Group.SQLCatA">
					<Name>CMDB SQL CatA</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.SQLCatA">
					<Name>Populate Cmdb.Group.SQLCatA</Name>
					<Description>This discovery rule populates the group Cmdb.Group.SQLCatA.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Group.SQLCatB">
					<Name>CMDB SQL CatB</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.SQLCatB">
					<Name>Populate Cmdb.Group.SQLCatB</Name>
					<Description>This discovery rule populates the group Cmdb.Group.SQLCatB.</Description>
				</DisplayString>
				<!--WindowsCluster-->
				<DisplayString ElementID="Cmdb.Group.WindowsClusterCatA">
					<Name>CMDB Windows Cluster CatA</Name>
					<Description>Contains Windows Cluster objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.WindowsClusterCatA">
					<Name>Populate Cmdb.Group.WindowsClusterCatA</Name>
					<Description>This discovery rule populates the group Cmdb.Group.WindowsClusterCatA.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Group.WindowsClusterCatB">
					<Name>CMDB Windows Cluster CatB</Name>
					<Description>Contains Windows Cluster objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.WindowsClusterCatB">
					<Name>Populate Cmdb.Group.WindowsClusterCatB</Name>
					<Description>This discovery rule populates the group Cmdb.Group.WindowsClusterCatB.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Group.WindowsClusterCatC">
					<Name>CMDB Windows Cluster CatC</Name>
					<Description>Contains Windows Cluster objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.WindowsClusterCatC">
					<Name>Populate Cmdb.Group.WindowsClusterCatC</Name>
					<Description>This discovery rule populates the group Cmdb.Group.WindowsClusterCatC.</Description>
				</DisplayString>
				<!--ADFS-->
				<DisplayString ElementID="Cmdb.Group.ADFSCatA">
					<Name>CMDB ADFS CatA</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.ADFSCatA">
					<Name>Populate Cmdb.Group.ADFSCatA</Name>
					<Description>This discovery rule populates the group Cmdb.Group.ADFSCatA.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Group.ADFSCatB">
					<Name>CMDB ADFS CatB</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.ADFSCatB">
					<Name>Populate Cmdb.Group.ADFSCatB</Name>
					<Description>This discovery rule populates the group Cmdb.Group.ADFSCatB.</Description>
				</DisplayString>
				<!--McAfee-->
				<DisplayString ElementID="Cmdb.Group.McAfeeDisableMonitoring">
					<Name>CMDB McAfee Disable Monitoring</Name>
					<Description>Contains McAfee Agent objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.McAfeeDisableMonitoring">
					<Name>Populate Cmdb.Group.McAfeeDisableMonitoring</Name>
					<Description>This discovery rule populates the group Cmdb.Group.McAfeeDisableMonitoring.</Description>
				</DisplayString>
				<!--WindowsCertificate-->
				<DisplayString ElementID="Cmdb.Group.WindowsCertificateDisableMonitoring">
					<Name>CMDB Windows Certificate Disable Monitoring</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.WindowsCertificateDisableMonitoring">
					<Name>Populate Cmdb.Group.WindowsCertificateDisableMonitoring</Name>
					<Description>This discovery rule populates the group Cmdb.Group.WindowsCertificateDisableMonitoring.</Description>
				</DisplayString>
			</DisplayStrings>
		</LanguagePack>
	</LanguagePacks>
</ManagementPack>
