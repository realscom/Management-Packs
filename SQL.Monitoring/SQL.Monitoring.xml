<ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
	<Manifest>
		<Identity>
			<ID>SQL.Monitoring</ID>
			<Version>2022.9.29.0</Version>
		</Identity>
		<Name>SQL.Monitoring</Name>
		<References>
			<Reference Alias="Windows">
				<ID>Microsoft.Windows.Library</ID>
				<Version>7.5.8501.0</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
			<Reference Alias="MSIGL">
				<ID>Microsoft.SystemCenter.InstanceGroup.Library</ID>
				<Version>7.5.8501.0</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
			<Reference Alias="System">
				<ID>System.Library</ID>
				<Version>7.5.8501.0</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
			<Reference Alias="SystemCenter">
				<ID>Microsoft.SystemCenter.Library</ID>
				<Version>7.0.8437.17</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
			<Reference Alias="Health">
				<ID>System.Health.Library</ID>
				<Version>7.0.8437.0</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
			<Reference Alias="SqlDisc">
				<ID>Microsoft.SQLServer.Windows.Discovery</ID>
				<Version>7.0.36.0</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
			<Reference Alias="SqlLib">
				<ID>Microsoft.SQLServer.Core.Library</ID>
				<Version>7.0.36.0</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
			<Reference Alias="SqlMon">
				<ID>Microsoft.SQLServer.Windows.Monitoring</ID>
				<Version>7.0.36.0</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
		</References>
	</Manifest>
	<TypeDefinitions>
		<EntityTypes>
			<ClassTypes>
				<!--SQLAgPrimaryDb-->
				<ClassType ID="SQL.Group.AgPrimaryDb" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
			</ClassTypes>
			<RelationshipTypes>
				<!--SQLAgPrimaryDb-->
				<RelationshipType ID="TestG.Relationship.SCOMGroupSQLAgPrimaryDbContainsDatabases" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="SQL.Group.AgPrimaryDb"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="SqlDisc!Microsoft.SQLServer.Windows.AvailabilityDatabaseHealth"/>
				</RelationshipType>
			</RelationshipTypes>
		</EntityTypes>
	</TypeDefinitions>
	<Monitoring>
		<Discoveries>
			<!--SQLAgPrimaryDb-->
			<Discovery ID="SQL.Discovery.AgPrimaryDb" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="SQL.Group.AgPrimaryDb"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>14400</IntervalSeconds> <!--4 hours--> 
					<SyncTime/>
					<ScriptName>SQLAgPrimaryDb.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
#---------------------------------------------------------------------------------------------------
Function LogAndQuit {

$End=Get-Date
If ($CountError -gt 0) {
$EventLevel=1 # Log error event.
} ElseIf ($CountWarning -gt 0) {
$EventLevel=2 # Log warning event.
} Else {
$EventLevel=0 # Log info event.
}
$EventId=17621
$Mins=(New-TimeSpan -Start $start -End $end).minutes
$Secs=(New-TimeSpan -Start $start -End $end).seconds
# Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
$ObjMomApi.LogScriptEvent("The script $ScriptName executed in $Mins`m:$Secs`s", $EventId, $EventLevel, "Warnings: $CountWarning, Errors: $CountError`nRunning as: $Account`nWorkflow Name: $WorkflowName`nManagement Pack: $MpName (2022.9.29.0)`nPowerShell Version: $PSVersion`n$Message") # $Error dumps errors into the event.
}
#---------------------------------------------------------------------------------------------------
Function TerminatingError
{
$CountError+=1
$Message+="[CODE_SECTION_$CodeSection] A terminating error occurred. Error output: (" + $_.Exception.Message + ")."
EmptySnapshot
}
#---------------------------------------------------------------------------------------------------
Function SQLQuery {
param($OpsDbServer,$OpsDbName,$DbQuery)
$Connection=New-Object System.Data.SQLClient.SQLConnection
$Connection.ConnectionString="Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
$Connection.Open()
$Command=New-Object System.Data.SQLClient.SQLCommand
$Command.Connection=$Connection
$Command.CommandText=$DbQuery
$Reader=$Command.ExecuteReader()
$SqlTable=New-Object System.Data.DataTable
$SqlTable.Load($Reader)
$Connection.Close()
Return $SqlTable
}
#---------------------------------------------------------------------------------------------------
Function EmptySnapshot {
$DiscoveryData.IsSnapshot=$false # this is empty non-snapshot data.
SubmitDiscovery
}
#---------------------------------------------------------------------------------------------------
Function SubmitDiscovery {
<# FOR TESTING
$ObjMomApi.Return($DiscoveryData)
#>
$DiscoveryData
LogAndQuit
}
#---------------------------------------------------------------------------------------------------
Function GroupDiscovery {
Try{
<# FOR TESTING
$SqlTable=""
$SCOMTable=""
$SourceId="{00000000-0000-0000-0000-000000000000}"
$ManagedEntityId="{00000000-0000-0000-0000-000000000000}"
$Message=""
$CountError=0
$CountWarning=0
$TestGTable=0
$InSCOM=0
$NotInSCOM=0
#>
<# CODE_SECTION_1
Set variables and load things we'll need.
#>
$CodeSection="1"
$Start=Get-Date
$Account=[System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$ObjMomApi=New-Object -comObject 'MOM.ScriptAPI' # MOMScriptAPI object.
$DiscoveryData=$ObjMomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
$SCOMGroupInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='SQL.Group.AgPrimaryDb']$") # update
$SetupRegKey="HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
$OpsDbServer=(Get-ItemProperty $SetupRegKey).DatabaseServerName
$OpsDbName=(Get-ItemProperty $SetupRegKey).DatabaseName
<#
Not needed.
$DwDbServer=(Get-ItemProperty $SetupRegKey).DataWarehouseDBServerName
$DWDbName=(Get-ItemProperty $SetupRegKey).DataWarehouseDBName
#>
$MpName="SQL.Monitoring" # Update
$WorkflowName="SQL.Discovery.AgPrimaryDb" # Update
$ScriptName="SQLAgPrimaryDb.ps1" # Update
$ScomQuery="SELECT distinct ad.MachineName_EA844CA4_B2CD_69E3_D8A9_C2E4489C53C7 as Server
, ad.InstanceName_2CC762EA_9008_8DED_CEEA_C0A731372EA8 as Instance
, ad.DisplayName as DisplayName
, ad.AvailabilityReplicaId_6271191B_CCD9_7A8B_ECA3_17F409F1C332
, ad.AvailabilityDatabaseName_4400632F_8F79_864A_A1FD_5ACF68FB111A as DbName
FROM [$OpsDbName].[dbo].[MTV_Microsoft`$SQLServer`$Windows`$AvailabilityReplica] ar
inner join [$OpsDbName].[dbo].[MTV_MicrosoftSQLServerWindowsDatabaseReplica] ad
on ar.MachineName_EA844CA4_B2CD_69E3_D8A9_C2E4489C53C7 = ad.MachineName_EA844CA4_B2CD_69E3_D8A9_C2E4489C53C7
AND ar.AvailabilityGroupName_2B65F5C7_DE13_BC25_C1EB_AA53047BB141=ad.AvailabilityGroupName_BE1A08AB_595A_3684_51F5_BDA703BC96C9
where ar.Role_52418D34_8CEA_2508_880C_DE9B8EE7DAB2 = 'Primary'"
<# FOR TESTING
#$OpsDbServer="bad_error"
#$OpsDbName="bad_db"
#>
<# CODE_SECTION_2.
Get powershell version.
This is shown in events to assist troubleshooting if powershell doesn't play nice.
#>
$CodeSection="2"
$PSVersion=$PSVersionTable.PSVersion
[string]$PSMajor=$PSVersion.Major
[string]$PSMinor=$PSVersion.Minor
$PSVersion=$PSMajor + "." + $PSMinor
<# CODE_SECTION_3
Query databases.
#>
$CodeSection="3"
$DbQuery=$ScomQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get SCOM list.
$RecordCount=($SqlTable.name).count
If ($RecordCount -lt 1) {
EmptySnapshot # If query fails or no records quit.
} Else {
$SCOMTable=$SqlTable
ForEach ($i In $SCOMTable) { # start for
$Server=$i.Server
$Instance=$i.Instance
$DisplayName=$i.DisplayName
[string]$Ida=$i.AvailabilityReplicaId_6271191B_CCD9_7A8B_ECA3_17F409F1C332
$DbName=$i.DbName
$InSCOM+=1
# If a match is found create discovery data and relationship between the SCOM group and the object.
$ObjectInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='SqlDisc!Microsoft.SQLServer.Windows.AvailabilityDatabaseHealth']$")
$ObjectInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $DisplayName)
$ObjectInstance.AddProperty("$MPElement[Name='SqlLib!Microsoft.SQLServer.Core.DBEngine']/MachineName$", $Server)
$ObjectInstance.AddProperty("$MPElement[Name='SqlLib!Microsoft.SQLServer.Core.DBEngine']/InstanceName$", $Instance)
$ObjectInstance.AddProperty("$MPElement[Name='SqlLib!Microsoft.SQLServer.Core.AvailabilityGroupHealth']/UniqueId$", $Ida)
$ObjectInstance.AddProperty("$MPElement[Name='SqlLib!Microsoft.SQLServer.Core.AvailabilityDatabaseHealth']/DatabaseName$", $DbName)
$RelationshipInstance=$DiscoveryData.CreateRelationshipInstance("$MPElement[Name='TestG.Relationship.SCOMGroupSQLAgPrimaryDbContainsDatabases']$")
$RelationshipInstance.Source=$SCOMGroupInstance
$RelationshipInstance.Target=$ObjectInstance
$DiscoveryData.AddInstance($RelationshipInstance) 
} # end for
$Message+="In SCOM: $InSCOM`n"
SubmitDiscovery
}
}
Catch
{
TerminatingError
}
}
GroupDiscovery -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
		</Discoveries>
</Monitoring>
	<LanguagePacks>
		<LanguagePack ID="ENU" IsDefault="false">
			<DisplayStrings>
				<DisplayString ElementID="SQL.Monitoring">
					<Name>SQL Monitoring</Name>
					<Description>Custom monitoring for SQL.</Description>
				</DisplayString>
				<!--SQLAgPrimaryDb-->
				<DisplayString ElementID="SQL.Group.AgPrimaryDb">
					<Name>SQL Availability Group Primary Databases</Name>
					<Description>Contains Microsoft.SQLServer.Windows.AvailabilityDatabaseHealth objects populated from a SQL database query. This group is in the SQL.Monitoring management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="SQL.Discovery.AgPrimaryDb">
					<Name>Populate SQL.Group.AgPrimaryDb</Name>
					<Description>This discovery rule populates the group SQL.Group.AgPrimaryDb.</Description>
				</DisplayString>
			</DisplayStrings>
		</LanguagePack>
	</LanguagePacks>
</ManagementPack>
