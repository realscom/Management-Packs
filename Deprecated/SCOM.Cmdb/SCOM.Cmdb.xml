<ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
	<Manifest>
		<Identity>
			<ID>SCOM.Cmdb</ID>
			<Version>2023.10.13.3</Version>
		</Identity>
		<Name>SCOM.Cmdb</Name>
		<References>
			<Reference Alias="Windows">
				<ID>Microsoft.Windows.Library</ID>
				<Version>7.5.8501.0</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
			<Reference Alias="MSIGL">
				<ID>Microsoft.SystemCenter.InstanceGroup.Library</ID>
				<Version>7.5.8501.0</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
			<Reference Alias="System">
				<ID>System.Library</ID>
				<Version>7.5.8501.0</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
			<Reference Alias="SystemCenter">
				<ID>Microsoft.SystemCenter.Library</ID>
				<Version>7.0.8437.17</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
			<Reference Alias="Health">
				<ID>System.Health.Library</ID>
				<Version>7.0.8437.0</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
			<Reference Alias="ClusterLib">
				<ID>Microsoft.Windows.Cluster.Library</ID>
				<Version>7.0.8437.17</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
		</References>
	</Manifest>
	<TypeDefinitions>
		<EntityTypes>
			<ClassTypes>
				<!--WindowsServer-->
				<ClassType ID="Cmdb.Group.WindowsServerCatA" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<ClassType ID="Cmdb.Group.WindowsServerCatB" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<ClassType ID="Cmdb.Group.WindowsServerCatC" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<!--HealthServiceWatcher-->
				<ClassType ID="Cmdb.Group.HealthServiceWatcherCatA" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<ClassType ID="Cmdb.Group.HealthServiceWatcherCatB" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<ClassType ID="Cmdb.Group.HealthServiceWatcherCatC" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<!--ADDS-->
				<ClassType ID="Cmdb.Group.ADDSCatA" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<ClassType ID="Cmdb.Group.ADDSCatB" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<!--DNS-->
				<ClassType ID="Cmdb.Group.DNSCatA" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<ClassType ID="Cmdb.Group.DNSCatB" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<!--DHCP-->
				<ClassType ID="Cmdb.Group.DHCPCatA" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<ClassType ID="Cmdb.Group.DHCPCatB" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<!--IIS-->
				<ClassType ID="Cmdb.Group.IISCatA" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<ClassType ID="Cmdb.Group.IISCatB" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<ClassType ID="Cmdb.Group.IISCatC" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<!--SQL-->
				<ClassType ID="Cmdb.Group.SQLCatA" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<ClassType ID="Cmdb.Group.SQLCatB" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<!--WindowsCluster-->
				<ClassType ID="Cmdb.Group.WindowsClusterCatA" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<ClassType ID="Cmdb.Group.WindowsClusterCatB" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<ClassType ID="Cmdb.Group.WindowsClusterCatC" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<!--ADFS-->
				<ClassType ID="Cmdb.Group.ADFSCatA" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<ClassType ID="Cmdb.Group.ADFSCatB" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<!--McAfee-->
				<ClassType ID="Cmdb.Group.McAfeeDisableMonitoring" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
				<!--WindowsCertificate-->
				<ClassType ID="Cmdb.Group.WindowsCertificateDisableMonitoring" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false"/>
			</ClassTypes>
			<RelationshipTypes>
				<!--WindowsServer-->
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupWindowsServerCatAContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.WindowsServerCatA"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupWindowsServerCatBContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.WindowsServerCatB"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupWindowsServerCatCContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.WindowsServerCatC"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<!--ADDS-->
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupADDSCatAContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.ADDSCatA"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupADDSCatBContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.ADDSCatB"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<!--DNS-->
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupDNSCatAContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.DNSCatA"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupDNSCatBContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.DNSCatB"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<!--DHCP-->
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupDHCPCatAContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.DHCPCatA"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupDHCPCatBContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.DHCPCatB"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<!--IIS-->
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupIISCatAContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.IISCatA"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupIISCatBContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.IISCatB"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupIISCatCContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.IISCatC"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<!--SQL-->
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupSQLCatAContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.SQLCatA"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupSQLCatBContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.SQLCatB"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<!--WindowsCluster-->
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupWindowsClusterCatAContainsWindowsClusters" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.WindowsClusterCatA"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="ClusterLib!Microsoft.Windows.Cluster"/>
				</RelationshipType>
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupWindowsClusterCatBContainsWindowsClusters" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.WindowsClusterCatB"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="ClusterLib!Microsoft.Windows.Cluster"/>
				</RelationshipType>
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupWindowsClusterCatCContainsWindowsClusters" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.WindowsClusterCatC"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="ClusterLib!Microsoft.Windows.Cluster"/>
				</RelationshipType>
				<!--ADFS-->
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupADFSCatAContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.ADFSCatA"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupADFSCatBContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.ADFSCatB"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<!--McAfee-->
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupMcAfeeDisableMonitoringContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.McAfeeDisableMonitoring"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
				<!--WindowsCertificate-->
				<RelationshipType ID="Cmdb.Relationship.SCOMGroupWindowsCertificateDisableMonitoringContainsWindowsComputers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
					<Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Cmdb.Group.WindowsCertificateDisableMonitoring"/>
					<Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer"/>
				</RelationshipType>
			</RelationshipTypes>
		</EntityTypes>
	</TypeDefinitions>
	<Monitoring>
		<Discoveries>
			<!--WindowsServerCatA-->
			<Discovery ID="Cmdb.Discovery.WindowsServerCatA" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.WindowsServerCatA"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>14400</IntervalSeconds>
					<SyncTime/>
					<ScriptName>WindowsServerCatA.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
Function Write-Log {
    Param($ScriptState)
    if ($ScriptState -eq "Information") {
        $EventId = 17609
        $EventLevel = 0 # 0=Info
    }
    else {
        $EventId = 17610
        $EventLevel = 2 # 2=Warning
    }
    $End = Get-Date
    $TimeCount = (New-TimeSpan -Start $StartTime -End $End)
    $Minutes = $TimeCount.Minutes
    $Seconds = $TimeCount.Seconds
    $Milliseconds = $TimeCount.Milliseconds
    $MomApi.LogScriptEvent("$ScriptName executed and ran for $Minutes`m $Seconds`s $Milliseconds`ms", $EventId, $EventLevel, "`nRunning As: $Account`nWorkflow Name: $MpWorkflow`nManagement Pack: $Mp ($MpVersion)`nPowerShell Version: $PSVersion`n$Message")
    Break
}
Function Get-SQLTable {
    param($OpsDbServer, $OpsDbName, $DbQuery)
    $Connection = New-Object System.Data.SQLClient.SQLConnection
    $Connection.ConnectionString = "Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
    $Connection.Open()
    $Command = New-Object System.Data.SQLClient.SQLCommand
    $Command.Connection = $Connection
    $Command.CommandText = $DbQuery
    $Reader = $Command.ExecuteReader()
    $SQLTable = New-Object System.Data.DataTable
    $SQLTable.Load($Reader)
    $Connection.Close()
    Return $SQLTable
}
Function Set-GroupMembers {
    # This logs terminating and non-terminating events.
    $ErrorActionPreference = "Stop"
    Try {
        $ScriptState = "Information"
        <# FOR TESTING
        $SQLTable = ""
        $SourceId = "{00000000-0000-0000-0000-000000000000}"
        $ManagedEntityId = "{00000000-0000-0000-0000-000000000000}"
        #>
        $DiscoveryData = $MomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
        # Get PowerShell version.
        $PSVersion = $PSVersionTable.PSVersion
        [string]$PSMajor = $PSVersion.Major
        [string]$PSMinor = $PSVersion.Minor
        $PSVersion = $PSMajor + "." + $PSMinor
        # Common variables.
        $SetupRegKey = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
        $OpsDbServer = (Get-ItemProperty $SetupRegKey).DatabaseServerName
        $OpsDbName = (Get-ItemProperty $SetupRegKey).DatabaseName
        $SCOMGroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.WindowsServerCatA']$")
        $CMDBQuery = "SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='WindowsServer' and Category ='CatA' and status = 'Active'"
        $SCOMQuery = "SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]"
        <# FOR TESTING
        #$OpsDbServer="bad_error"
        #$OpsDbName="bad_db"
        #>
        # Get CMDB list.
        $CmdbTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $CMDBQuery
        # Get SCOM list.
        $SCOMTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $SCOMQuery
        ForEach ($ConfigItem In $CmdbTable) {
            $Object = $ConfigItem.Name
            # Compare CMDB list to SCOM list, if match found add to discovery.
            $Match = select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet
            If ($Match -eq $true) {
                $ObjectInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
                $ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
                $RelationshipInstance = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupWindowsServerCatAContainsWindowsComputers']$")
                $RelationshipInstance.Source = $SCOMGroupInstance
                $RelationshipInstance.Target = $ObjectInstance
                $DiscoveryData.AddInstance($RelationshipInstance)   
            }
        }
        # Submit discovery data back to Operations Manager and complete the script.
        $DiscoveryData
        <# FOR TESTING
        $MomApi.Return($DiscoveryData)
        #>
        Write-Log -ScriptState $ScriptState
    }
    Catch {
        $ScriptState = "Warning"
        $Message += $_.Exception.Message
        Write-Log -ScriptState $ScriptState 
    }
}
# All scripts should have this preamble.
[datetime]$StartTime = Get-Date
$MomApi = New-Object -comObject 'MOM.ScriptAPI'
$ScriptName = "WindowsServerCatA.ps1"
$Account = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$Mp = "Microsoft.SCOM.CMDB.Monitoring"
$MpVersion = "2023.10.13.3"
$MpWorkflow = "Microsoft.SCOM.Discovery.WindowsServerCatA"
# Run script.
Set-GroupMembers -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--WindowsServerCatB-->
			<Discovery ID="Cmdb.Discovery.WindowsServerCatB" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.WindowsServerCatB"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>14700</IntervalSeconds>
					<SyncTime/>
					<ScriptName>WindowsServerCatB.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
Function Write-Log {
    Param($ScriptState)
    if ($ScriptState -eq "Information") {
        $EventId = 17609
        $EventLevel = 0 # 0=Info
    }
    else {
        $EventId = 17610
        $EventLevel = 2 # 2=Warning
    }
    $End = Get-Date
    $TimeCount = (New-TimeSpan -Start $StartTime -End $End)
    $Minutes = $TimeCount.Minutes
    $Seconds = $TimeCount.Seconds
    $Milliseconds = $TimeCount.Milliseconds
    $MomApi.LogScriptEvent("$ScriptName executed and ran for $Minutes`m $Seconds`s $Milliseconds`ms", $EventId, $EventLevel, "`nRunning As: $Account`nWorkflow Name: $MpWorkflow`nManagement Pack: $Mp ($MpVersion)`nPowerShell Version: $PSVersion`n$Message")
    Break
}
Function Get-SQLTable {
    param($OpsDbServer, $OpsDbName, $DbQuery)
    $Connection = New-Object System.Data.SQLClient.SQLConnection
    $Connection.ConnectionString = "Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
    $Connection.Open()
    $Command = New-Object System.Data.SQLClient.SQLCommand
    $Command.Connection = $Connection
    $Command.CommandText = $DbQuery
    $Reader = $Command.ExecuteReader()
    $SQLTable = New-Object System.Data.DataTable
    $SQLTable.Load($Reader)
    $Connection.Close()
    Return $SQLTable
}
Function Set-GroupMembers {
    # This logs terminating and non-terminating events.
    $ErrorActionPreference = "Stop"
    Try {
        $ScriptState = "Information"
        <# FOR TESTING
        $SQLTable = ""
        $SourceId = "{00000000-0000-0000-0000-000000000000}"
        $ManagedEntityId = "{00000000-0000-0000-0000-000000000000}"
        #>
        $DiscoveryData = $MomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
        # Get PowerShell version.
        $PSVersion = $PSVersionTable.PSVersion
        [string]$PSMajor = $PSVersion.Major
        [string]$PSMinor = $PSVersion.Minor
        $PSVersion = $PSMajor + "." + $PSMinor
        # Common variables.
        $SetupRegKey = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
        $OpsDbServer = (Get-ItemProperty $SetupRegKey).DatabaseServerName
        $OpsDbName = (Get-ItemProperty $SetupRegKey).DatabaseName
        $SCOMGroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.WindowsServerCatB']$")
        $CMDBQuery = "SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='WindowsServer' and Category ='CatB' and status = 'Active'"
        $SCOMQuery = "SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]"
        <# FOR TESTING
        #$OpsDbServer="bad_error"
        #$OpsDbName="bad_db"
        #>
        # Get CMDB list.
        $CmdbTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $CMDBQuery
        # Get SCOM list.
        $SCOMTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $SCOMQuery
        ForEach ($ConfigItem In $CmdbTable) {
            $Object = $ConfigItem.Name
            # Compare CMDB list to SCOM list, if match found add to discovery.
            $Match = select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet
            If ($Match -eq $true) {
                $ObjectInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
                $ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
                $RelationshipInstance = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupWindowsServerCatBContainsWindowsComputers']$")
                $RelationshipInstance.Source = $SCOMGroupInstance
                $RelationshipInstance.Target = $ObjectInstance
                $DiscoveryData.AddInstance($RelationshipInstance)   
            }
        }
        # Submit discovery data back to Operations Manager and complete the script.
        $DiscoveryData
        <# FOR TESTING
        $MomApi.Return($DiscoveryData)
        #>
        Write-Log -ScriptState $ScriptState
    }
    Catch {
        $ScriptState = "Warning"
        $Message += $_.Exception.Message
        Write-Log -ScriptState $ScriptState 
    }
}
# All scripts should have this preamble.
[datetime]$StartTime = Get-Date
$MomApi = New-Object -comObject 'MOM.ScriptAPI'
$ScriptName = "WindowsServerCatB.ps1"
$Account = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$Mp = "Microsoft.SCOM.CMDB.Monitoring"
$MpVersion = "2023.10.13.3"
$MpWorkflow = "Microsoft.SCOM.Discovery.WindowsServerCatB"
# Run script.
Set-GroupMembers -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--WindowsServerCatC-->
			<Discovery ID="Cmdb.Discovery.WindowsServerCatC" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.WindowsServerCatC"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>15000</IntervalSeconds>
					<SyncTime/>
					<ScriptName>WindowsServerCatC.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
Function Write-Log {
    Param($ScriptState)
    if ($ScriptState -eq "Information") {
        $EventId = 17609
        $EventLevel = 0 # 0=Info
    }
    else {
        $EventId = 17610
        $EventLevel = 2 # 2=Warning
    }
    $End = Get-Date
    $TimeCount = (New-TimeSpan -Start $StartTime -End $End)
    $Minutes = $TimeCount.Minutes
    $Seconds = $TimeCount.Seconds
    $Milliseconds = $TimeCount.Milliseconds
    $MomApi.LogScriptEvent("$ScriptName executed and ran for $Minutes`m $Seconds`s $Milliseconds`ms", $EventId, $EventLevel, "`nRunning As: $Account`nWorkflow Name: $MpWorkflow`nManagement Pack: $Mp ($MpVersion)`nPowerShell Version: $PSVersion`n$Message")
    Break
}
Function Get-SQLTable {
    param($OpsDbServer, $OpsDbName, $DbQuery)
    $Connection = New-Object System.Data.SQLClient.SQLConnection
    $Connection.ConnectionString = "Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
    $Connection.Open()
    $Command = New-Object System.Data.SQLClient.SQLCommand
    $Command.Connection = $Connection
    $Command.CommandText = $DbQuery
    $Reader = $Command.ExecuteReader()
    $SQLTable = New-Object System.Data.DataTable
    $SQLTable.Load($Reader)
    $Connection.Close()
    Return $SQLTable
}
Function Set-GroupMembers {
    # This logs terminating and non-terminating events.
    $ErrorActionPreference = "Stop"
    Try {
        $ScriptState = "Information"
        <# FOR TESTING
        $SQLTable = ""
        $SourceId = "{00000000-0000-0000-0000-000000000000}"
        $ManagedEntityId = "{00000000-0000-0000-0000-000000000000}"
        #>
        $DiscoveryData = $MomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
        # Get PowerShell version.
        $PSVersion = $PSVersionTable.PSVersion
        [string]$PSMajor = $PSVersion.Major
        [string]$PSMinor = $PSVersion.Minor
        $PSVersion = $PSMajor + "." + $PSMinor
        # Common variables.
        $SetupRegKey = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
        $OpsDbServer = (Get-ItemProperty $SetupRegKey).DatabaseServerName
        $OpsDbName = (Get-ItemProperty $SetupRegKey).DatabaseName
        $SCOMGroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.WindowsServerCatC']$")
        $CMDBQuery = "SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='WindowsServer' and Category ='CatC' and status = 'Active'"
        $SCOMQuery = "SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]"
        <# FOR TESTING
        #$OpsDbServer="bad_error"
        #$OpsDbName="bad_db"
        #>
        # Get CMDB list.
        $CmdbTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $CMDBQuery
        # Get SCOM list.
        $SCOMTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $SCOMQuery
        ForEach ($ConfigItem In $CmdbTable) {
            $Object = $ConfigItem.Name
            # Compare CMDB list to SCOM list, if match found add to discovery.
            $Match = select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet
            If ($Match -eq $true) {
                $ObjectInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
                $ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
                $RelationshipInstance = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupWindowsServerCatCContainsWindowsComputers']$")
                $RelationshipInstance.Source = $SCOMGroupInstance
                $RelationshipInstance.Target = $ObjectInstance
                $DiscoveryData.AddInstance($RelationshipInstance)   
            }
        }
        # Submit discovery data back to Operations Manager and complete the script.
        $DiscoveryData
        <# FOR TESTING
        $MomApi.Return($DiscoveryData)
        #>
        Write-Log -ScriptState $ScriptState
    }
    Catch {
        $ScriptState = "Warning"
        $Message += $_.Exception.Message
        Write-Log -ScriptState $ScriptState 
    }
}
# All scripts should have this preamble.
[datetime]$StartTime = Get-Date
$MomApi = New-Object -comObject 'MOM.ScriptAPI'
$ScriptName = "WindowsServerCatC.ps1"
$Account = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$Mp = "Microsoft.SCOM.CMDB.Monitoring"
$MpVersion = "2023.10.13.3"
$MpWorkflow = "Microsoft.SCOM.Discovery.WindowsServerCatC"
# Run script.
Set-GroupMembers -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--HealthServiceWatcherCatA-->
			<Discovery ID="Cmdb.Discovery.HealthServiceWatcherCatA" Enabled="true" Target="Cmdb.Group.HealthServiceWatcherCatA" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryRelationship TypeID="MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="SystemCenter!Microsoft.SystemCenter.GroupPopulator">
					<RuleId>$MPElement$</RuleId>
					<GroupInstanceId>$MPElement[Name="Cmdb.Group.HealthServiceWatcherCatA"]$</GroupInstanceId>
					<MembershipRules>
						<MembershipRule>
							<MonitoringClass>$MPElement[Name="SystemCenter!Microsoft.SystemCenter.HealthServiceWatcher"]$</MonitoringClass>
							<RelationshipClass>$MPElement[Name='MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities']$</RelationshipClass>
							<Expression>
								<Contains>
									<MonitoringClass>$MPElement[Name="SystemCenter!Microsoft.SystemCenter.HealthService"]$</MonitoringClass>
									<Expression>
										<Contained>
											<MonitoringClass>$MPElement[Name="Cmdb.Group.WindowsServerCatA"]$</MonitoringClass>
										</Contained>
									</Expression>
								</Contains>
							</Expression>
						</MembershipRule>
					</MembershipRules>
				</DataSource>
			</Discovery>
			<!--HealthServiceWatcherCatB-->
			<Discovery ID="Cmdb.Discovery.HealthServiceWatcherCatB" Enabled="true" Target="Cmdb.Group.HealthServiceWatcherCatB" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryRelationship TypeID="MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="SystemCenter!Microsoft.SystemCenter.GroupPopulator">
					<RuleId>$MPElement$</RuleId>
					<GroupInstanceId>$MPElement[Name="Cmdb.Group.HealthServiceWatcherCatB"]$</GroupInstanceId>
					<MembershipRules>
						<MembershipRule>
							<MonitoringClass>$MPElement[Name="SystemCenter!Microsoft.SystemCenter.HealthServiceWatcher"]$</MonitoringClass>
							<RelationshipClass>$MPElement[Name='MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities']$</RelationshipClass>
							<Expression>
								<Contains>
									<MonitoringClass>$MPElement[Name="SystemCenter!Microsoft.SystemCenter.HealthService"]$</MonitoringClass>
									<Expression>
										<Contained>
											<MonitoringClass>$MPElement[Name="Cmdb.Group.WindowsServerCatB"]$</MonitoringClass>
										</Contained>
									</Expression>
								</Contains>
							</Expression>
						</MembershipRule>
					</MembershipRules>
				</DataSource>
			</Discovery>
			<!--HealthServiceWatcherCatC-->
			<Discovery ID="Cmdb.Discovery.HealthServiceWatcherCatC" Enabled="true" Target="Cmdb.Group.HealthServiceWatcherCatC" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryRelationship TypeID="MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="SystemCenter!Microsoft.SystemCenter.GroupPopulator">
					<RuleId>$MPElement$</RuleId>
					<GroupInstanceId>$MPElement[Name="Cmdb.Group.HealthServiceWatcherCatC"]$</GroupInstanceId>
					<MembershipRules>
						<MembershipRule>
							<MonitoringClass>$MPElement[Name="SystemCenter!Microsoft.SystemCenter.HealthServiceWatcher"]$</MonitoringClass>
							<RelationshipClass>$MPElement[Name='MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities']$</RelationshipClass>
							<Expression>
								<Contains>
									<MonitoringClass>$MPElement[Name="SystemCenter!Microsoft.SystemCenter.HealthService"]$</MonitoringClass>
									<Expression>
										<Contained>
											<MonitoringClass>$MPElement[Name="Cmdb.Group.WindowsServerCatC"]$</MonitoringClass>
										</Contained>
									</Expression>
								</Contains>
							</Expression>
						</MembershipRule>
					</MembershipRules>
				</DataSource>
			</Discovery>
			<!--ADDSCatA-->
			<Discovery ID="Cmdb.Discovery.ADDSCatA" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.ADDSCatA"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>15300</IntervalSeconds>
					<SyncTime/>
					<ScriptName>ADDSCatA.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
Function Write-Log {
	Param($ScriptState)
	if ($ScriptState -eq "Information") {
		$EventId = 17609
		$EventLevel = 0 # 0=Info
	}
	else {
		$EventId = 17610
		$EventLevel = 2 # 2=Warning
	}
	$End = Get-Date
	$TimeCount = (New-TimeSpan -Start $StartTime -End $End)
	$Minutes = $TimeCount.Minutes
	$Seconds = $TimeCount.Seconds
	$Milliseconds = $TimeCount.Milliseconds
	$MomApi.LogScriptEvent("$ScriptName executed and ran for $Minutes`m $Seconds`s $Milliseconds`ms", $EventId, $EventLevel, "`nRunning As: $Account`nWorkflow Name: $MpWorkflow`nManagement Pack: $Mp ($MpVersion)`nPowerShell Version: $PSVersion`n$Message")
	Break
}
Function Get-SQLTable {
	param($OpsDbServer, $OpsDbName, $DbQuery)
	$Connection = New-Object System.Data.SQLClient.SQLConnection
	$Connection.ConnectionString = "Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
	$Connection.Open()
	$Command = New-Object System.Data.SQLClient.SQLCommand
	$Command.Connection = $Connection
	$Command.CommandText = $DbQuery
	$Reader = $Command.ExecuteReader()
	$SQLTable = New-Object System.Data.DataTable
	$SQLTable.Load($Reader)
	$Connection.Close()
	Return $SQLTable
}
Function Set-GroupMembers {
	# This logs terminating and non-terminating events.
	$ErrorActionPreference = "Stop"
	Try {
		$ScriptState = "Information"
		<# FOR TESTING
		$SQLTable = ""
		$SourceId = "{00000000-0000-0000-0000-000000000000}"
		$ManagedEntityId = "{00000000-0000-0000-0000-000000000000}"
		#>
		$DiscoveryData = $MomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
		# Get PowerShell version.
		$PSVersion = $PSVersionTable.PSVersion
		[string]$PSMajor = $PSVersion.Major
		[string]$PSMinor = $PSVersion.Minor
		$PSVersion = $PSMajor + "." + $PSMinor
		# Common variables.
		$SetupRegKey = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
		$OpsDbServer = (Get-ItemProperty $SetupRegKey).DatabaseServerName
		$OpsDbName = (Get-ItemProperty $SetupRegKey).DatabaseName
		$SCOMGroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.ADDSCatA']$")
		$CmdbQuery = "SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='DomainController' and Category ='CatA' and status = 'Active'"
		$ScomQuery = "SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]"
		<# FOR TESTING
		#$OpsDbServer="bad_error"
		#$OpsDbName="bad_db"
		#>
		# Get CMDB list.
		$CmdbTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $CMDBQuery
		# Get SCOM list.
		$SCOMTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $SCOMQuery
		ForEach ($ConfigItem In $CmdbTable) {
			$Object = $ConfigItem.Name
			# Compare CMDB list to SCOM list, if match found add to discovery.
			$Match = select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet
			If ($Match -eq $true) {
				$ObjectInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
				$ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
				$RelationshipInstance = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupADDSCatAContainsWindowsComputers']$")
				$RelationshipInstance.Source = $SCOMGroupInstance
				$RelationshipInstance.Target = $ObjectInstance
				$DiscoveryData.AddInstance($RelationshipInstance)   
			}
		}
		# Submit discovery data back to Operations Manager and complete the script.
		$DiscoveryData
		<# FOR TESTING
		$MomApi.Return($DiscoveryData)
		#>
		Write-Log -ScriptState $ScriptState
	}
	Catch {
		$ScriptState = "Warning"
		$Message += $_.Exception.Message
		Write-Log -ScriptState $ScriptState 
	}
}
# All scripts should have this preamble.
[datetime]$StartTime = Get-Date
$MomApi = New-Object -comObject 'MOM.ScriptAPI'
$ScriptName = "ADDSCatA.ps1"
$Account = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$Mp = "Microsoft.SCOM.CMDB.Monitoring"
$MpVersion = "2023.10.13.3"
$MpWorkflow = "Microsoft.SCOM.Discovery.ADDSCatA"
# Run script.
Set-GroupMembers -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--ADDSCatB-->
			<Discovery ID="Cmdb.Discovery.ADDSCatB" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.ADDSCatB"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>15600</IntervalSeconds>
					<SyncTime/>
					<ScriptName>ADDSCatB.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
Function Write-Log {
    Param($ScriptState)
    if ($ScriptState -eq "Information") {
        $EventId = 17609
        $EventLevel = 0 # 0=Info
    }
    else {
        $EventId = 17610
        $EventLevel = 2 # 2=Warning
    }
    $End = Get-Date
    $TimeCount = (New-TimeSpan -Start $StartTime -End $End)
    $Minutes = $TimeCount.Minutes
    $Seconds = $TimeCount.Seconds
    $Milliseconds = $TimeCount.Milliseconds
    $MomApi.LogScriptEvent("$ScriptName executed and ran for $Minutes`m $Seconds`s $Milliseconds`ms", $EventId, $EventLevel, "`nRunning As: $Account`nWorkflow Name: $MpWorkflow`nManagement Pack: $Mp ($MpVersion)`nPowerShell Version: $PSVersion`n$Message")
    Break
}
Function Get-SQLTable {
    param($OpsDbServer, $OpsDbName, $DbQuery)
    $Connection = New-Object System.Data.SQLClient.SQLConnection
    $Connection.ConnectionString = "Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
    $Connection.Open()
    $Command = New-Object System.Data.SQLClient.SQLCommand
    $Command.Connection = $Connection
    $Command.CommandText = $DbQuery
    $Reader = $Command.ExecuteReader()
    $SQLTable = New-Object System.Data.DataTable
    $SQLTable.Load($Reader)
    $Connection.Close()
    Return $SQLTable
}
Function Set-GroupMembers {
    # This logs terminating and non-terminating events.
    $ErrorActionPreference = "Stop"
    Try {
        $ScriptState = "Information"
        <# FOR TESTING
        $SQLTable = ""
        $SourceId = "{00000000-0000-0000-0000-000000000000}"
        $ManagedEntityId = "{00000000-0000-0000-0000-000000000000}"
        #>
        $DiscoveryData = $MomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
        # Get PowerShell version.
        $PSVersion = $PSVersionTable.PSVersion
        [string]$PSMajor = $PSVersion.Major
        [string]$PSMinor = $PSVersion.Minor
        $PSVersion = $PSMajor + "." + $PSMinor
        # Common variables.
        $SetupRegKey = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
        $OpsDbServer = (Get-ItemProperty $SetupRegKey).DatabaseServerName
        $OpsDbName = (Get-ItemProperty $SetupRegKey).DatabaseName
        $SCOMGroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.ADDSCatB']$")
        $CmdbQuery = "SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='DomainController' and Category ='CatB' and status = 'Active'"
        $ScomQuery = "SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]"
        <# FOR TESTING
        #$OpsDbServer="bad_error"
        #$OpsDbName="bad_db"
        #>
        # Get CMDB list.
        $CmdbTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $CMDBQuery
        # Get SCOM list.
        $SCOMTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $SCOMQuery
        ForEach ($ConfigItem In $CmdbTable) {
            $Object = $ConfigItem.Name
            # Compare CMDB list to SCOM list, if match found add to discovery.
            $Match = select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet
            If ($Match -eq $true) {
                $ObjectInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
                $ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
                $RelationshipInstance = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupADDSCatBContainsWindowsComputers']$")
                $RelationshipInstance.Source = $SCOMGroupInstance
                $RelationshipInstance.Target = $ObjectInstance
                $DiscoveryData.AddInstance($RelationshipInstance)   
            }
        }
        # Submit discovery data back to Operations Manager and complete the script.
        $DiscoveryData
        <# FOR TESTING
        $MomApi.Return($DiscoveryData)
        #>
        Write-Log -ScriptState $ScriptState
    }
    Catch {
        $ScriptState = "Warning"
        $Message += $_.Exception.Message
        Write-Log -ScriptState $ScriptState 
    }
}
# All scripts should have this preamble.
[datetime]$StartTime = Get-Date
$MomApi = New-Object -comObject 'MOM.ScriptAPI'
$ScriptName = "ADDSCatB.ps1"
$Account = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$Mp = "Microsoft.SCOM.CMDB.Monitoring"
$MpVersion = "2023.10.13.3"
$MpWorkflow = "Microsoft.SCOM.Discovery.ADDSCatB"
# Run script.
Set-GroupMembers -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--DNSCatA-->
			<Discovery ID="Cmdb.Discovery.DNSCatA" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.DNSCatA"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>15900</IntervalSeconds>
					<SyncTime/>
					<ScriptName>DNSCatA.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
Function Write-Log {
    Param($ScriptState)
    if ($ScriptState -eq "Information") {
        $EventId = 17609
        $EventLevel = 0 # 0=Info
    }
    else {
        $EventId = 17610
        $EventLevel = 2 # 2=Warning
    }
    $End = Get-Date
    $TimeCount = (New-TimeSpan -Start $StartTime -End $End)
    $Minutes = $TimeCount.Minutes
    $Seconds = $TimeCount.Seconds
    $Milliseconds = $TimeCount.Milliseconds
    $MomApi.LogScriptEvent("$ScriptName executed and ran for $Minutes`m $Seconds`s $Milliseconds`ms", $EventId, $EventLevel, "`nRunning As: $Account`nWorkflow Name: $MpWorkflow`nManagement Pack: $Mp ($MpVersion)`nPowerShell Version: $PSVersion`n$Message")
    Break
}
Function Get-SQLTable {
    param($OpsDbServer, $OpsDbName, $DbQuery)
    $Connection = New-Object System.Data.SQLClient.SQLConnection
    $Connection.ConnectionString = "Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
    $Connection.Open()
    $Command = New-Object System.Data.SQLClient.SQLCommand
    $Command.Connection = $Connection
    $Command.CommandText = $DbQuery
    $Reader = $Command.ExecuteReader()
    $SQLTable = New-Object System.Data.DataTable
    $SQLTable.Load($Reader)
    $Connection.Close()
    Return $SQLTable
}
Function Set-GroupMembers {
    # This logs terminating and non-terminating events.
    $ErrorActionPreference = "Stop"
    Try {
        $ScriptState = "Information"
        <# FOR TESTING
        $SQLTable = ""
        $SourceId = "{00000000-0000-0000-0000-000000000000}"
        $ManagedEntityId = "{00000000-0000-0000-0000-000000000000}"
        #>
        $DiscoveryData = $MomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
        # Get PowerShell version.
        $PSVersion = $PSVersionTable.PSVersion
        [string]$PSMajor = $PSVersion.Major
        [string]$PSMinor = $PSVersion.Minor
        $PSVersion = $PSMajor + "." + $PSMinor
        # Common variables.
        $SetupRegKey = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
        $OpsDbServer = (Get-ItemProperty $SetupRegKey).DatabaseServerName
        $OpsDbName = (Get-ItemProperty $SetupRegKey).DatabaseName
        $SCOMGroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.DNSCatA']$")
        $CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='WindowsDnsServer' and Category ='CatA' and status = 'Active'"
        $ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]"
        <# FOR TESTING
        #$OpsDbServer="bad_error"
        #$OpsDbName="bad_db"
        #>
        # Get CMDB list.
        $CmdbTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $CMDBQuery
        # Get SCOM list.
        $SCOMTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $SCOMQuery
        ForEach ($ConfigItem In $CmdbTable) {
            $Object = $ConfigItem.Name
            # Compare CMDB list to SCOM list, if match found add to discovery.
            $Match = select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet
            If ($Match -eq $true) {
                $ObjectInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
                $ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
                $RelationshipInstance = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupDNSCatAContainsWindowsComputers']$")
                $RelationshipInstance.Source = $SCOMGroupInstance
                $RelationshipInstance.Target = $ObjectInstance
                $DiscoveryData.AddInstance($RelationshipInstance)   
            }
        }
        # Submit discovery data back to Operations Manager and complete the script.
        $DiscoveryData
        <# FOR TESTING
        $MomApi.Return($DiscoveryData)
        #>
        Write-Log -ScriptState $ScriptState
    }
    Catch {
        $ScriptState = "Warning"
        $Message += $_.Exception.Message
        Write-Log -ScriptState $ScriptState 
    }
}
# All scripts should have this preamble.
[datetime]$StartTime = Get-Date
$MomApi = New-Object -comObject 'MOM.ScriptAPI'
$ScriptName = "DNSCatA.ps1"
$Account = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$Mp = "Microsoft.SCOM.CMDB.Monitoring"
$MpVersion = "2023.10.13.3"
$MpWorkflow = "Microsoft.SCOM.Discovery.DNSCatA"
# Run script.
Set-GroupMembers -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--DNSCatB-->
			<Discovery ID="Cmdb.Discovery.DNSCatB" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.DNSCatB"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>16200</IntervalSeconds>
					<SyncTime/>
					<ScriptName>DNSCatB.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
Function Write-Log {
    Param($ScriptState)
    if ($ScriptState -eq "Information") {
        $EventId = 17609
        $EventLevel = 0 # 0=Info
    }
    else {
        $EventId = 17610
        $EventLevel = 2 # 2=Warning
    }
    $End = Get-Date
    $TimeCount = (New-TimeSpan -Start $StartTime -End $End)
    $Minutes = $TimeCount.Minutes
    $Seconds = $TimeCount.Seconds
    $Milliseconds = $TimeCount.Milliseconds
    $MomApi.LogScriptEvent("$ScriptName executed and ran for $Minutes`m $Seconds`s $Milliseconds`ms", $EventId, $EventLevel, "`nRunning As: $Account`nWorkflow Name: $MpWorkflow`nManagement Pack: $Mp ($MpVersion)`nPowerShell Version: $PSVersion`n$Message")
    Break
}
Function Get-SQLTable {
    param($OpsDbServer, $OpsDbName, $DbQuery)
    $Connection = New-Object System.Data.SQLClient.SQLConnection
    $Connection.ConnectionString = "Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
    $Connection.Open()
    $Command = New-Object System.Data.SQLClient.SQLCommand
    $Command.Connection = $Connection
    $Command.CommandText = $DbQuery
    $Reader = $Command.ExecuteReader()
    $SQLTable = New-Object System.Data.DataTable
    $SQLTable.Load($Reader)
    $Connection.Close()
    Return $SQLTable
}
Function Set-GroupMembers {
    # This logs terminating and non-terminating events.
    $ErrorActionPreference = "Stop"
    Try {
        $ScriptState = "Information"
        <# FOR TESTING
        $SQLTable = ""
        $SourceId = "{00000000-0000-0000-0000-000000000000}"
        $ManagedEntityId = "{00000000-0000-0000-0000-000000000000}"
        #>
        $DiscoveryData = $MomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
        # Get PowerShell version.
        $PSVersion = $PSVersionTable.PSVersion
        [string]$PSMajor = $PSVersion.Major
        [string]$PSMinor = $PSVersion.Minor
        $PSVersion = $PSMajor + "." + $PSMinor
        # Common variables.
        $SetupRegKey = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
        $OpsDbServer = (Get-ItemProperty $SetupRegKey).DatabaseServerName
        $OpsDbName = (Get-ItemProperty $SetupRegKey).DatabaseName
        $SCOMGroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.DNSCatB']$")
        $CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='WindowsDnsServer' and Category ='CatB' and status = 'Active'"
        $ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]"
        <# FOR TESTING
        #$OpsDbServer="bad_error"
        #$OpsDbName="bad_db"
        #>
        # Get CMDB list.
        $CmdbTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $CMDBQuery
        # Get SCOM list.
        $SCOMTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $SCOMQuery
        ForEach ($ConfigItem In $CmdbTable) {
            $Object = $ConfigItem.Name
            # Compare CMDB list to SCOM list, if match found add to discovery.
            $Match = select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet
            If ($Match -eq $true) {
                $ObjectInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
                $ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
                $RelationshipInstance = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupDNSCatBContainsWindowsComputers']$")
                $RelationshipInstance.Source = $SCOMGroupInstance
                $RelationshipInstance.Target = $ObjectInstance
                $DiscoveryData.AddInstance($RelationshipInstance)   
            }
        }
        # Submit discovery data back to Operations Manager and complete the script.
        $DiscoveryData
        <# FOR TESTING
        $MomApi.Return($DiscoveryData)
        #>
        Write-Log -ScriptState $ScriptState
    }
    Catch {
        $ScriptState = "Warning"
        $Message += $_.Exception.Message
        Write-Log -ScriptState $ScriptState 
    }
}
# All scripts should have this preamble.
[datetime]$StartTime = Get-Date
$MomApi = New-Object -comObject 'MOM.ScriptAPI'
$ScriptName = "DNSCatB.ps1"
$Account = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$Mp = "Microsoft.SCOM.CMDB.Monitoring"
$MpVersion = "2023.10.13.3"
$MpWorkflow = "Microsoft.SCOM.Discovery.DNSCatB"
# Run script.
Set-GroupMembers -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--DHCPCatA-->
			<Discovery ID="Cmdb.Discovery.DHCPCatA" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.DHCPCatA"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>16500</IntervalSeconds>
					<SyncTime/>
					<ScriptName>DHCPCatA.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
Function Write-Log {
    Param($ScriptState)
    if ($ScriptState -eq "Information") {
        $EventId = 17609
        $EventLevel = 0 # 0=Info
    }
    else {
        $EventId = 17610
        $EventLevel = 2 # 2=Warning
    }
    $End = Get-Date
    $TimeCount = (New-TimeSpan -Start $StartTime -End $End)
    $Minutes = $TimeCount.Minutes
    $Seconds = $TimeCount.Seconds
    $Milliseconds = $TimeCount.Milliseconds
    $MomApi.LogScriptEvent("$ScriptName executed and ran for $Minutes`m $Seconds`s $Milliseconds`ms", $EventId, $EventLevel, "`nRunning As: $Account`nWorkflow Name: $MpWorkflow`nManagement Pack: $Mp ($MpVersion)`nPowerShell Version: $PSVersion`n$Message")
    Break
}
Function Get-SQLTable {
    param($OpsDbServer, $OpsDbName, $DbQuery)
    $Connection = New-Object System.Data.SQLClient.SQLConnection
    $Connection.ConnectionString = "Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
    $Connection.Open()
    $Command = New-Object System.Data.SQLClient.SQLCommand
    $Command.Connection = $Connection
    $Command.CommandText = $DbQuery
    $Reader = $Command.ExecuteReader()
    $SQLTable = New-Object System.Data.DataTable
    $SQLTable.Load($Reader)
    $Connection.Close()
    Return $SQLTable
}
Function Set-GroupMembers {
    # This logs terminating and non-terminating events.
    $ErrorActionPreference = "Stop"
    Try {
        $ScriptState = "Information"
        <# FOR TESTING
        $SQLTable = ""
        $SourceId = "{00000000-0000-0000-0000-000000000000}"
        $ManagedEntityId = "{00000000-0000-0000-0000-000000000000}"
        #>
        $DiscoveryData = $MomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
        # Get PowerShell version.
        $PSVersion = $PSVersionTable.PSVersion
        [string]$PSMajor = $PSVersion.Major
        [string]$PSMinor = $PSVersion.Minor
        $PSVersion = $PSMajor + "." + $PSMinor
        # Common variables.
        $SetupRegKey = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
        $OpsDbServer = (Get-ItemProperty $SetupRegKey).DatabaseServerName
        $OpsDbName = (Get-ItemProperty $SetupRegKey).DatabaseName
        $SCOMGroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.DHCPCatA']$")
        $CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='WindowsDHCPServer' and Category ='CatA' and status = 'Active'"
        $ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]"
        <# FOR TESTING
        #$OpsDbServer="bad_error"
        #$OpsDbName="bad_db"
        #>
        # Get CMDB list.
        $CmdbTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $CMDBQuery
        # Get SCOM list.
        $SCOMTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $SCOMQuery
        ForEach ($ConfigItem In $CmdbTable) {
            $Object = $ConfigItem.Name
            # Compare CMDB list to SCOM list, if match found add to discovery.
            $Match = select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet
            If ($Match -eq $true) {
                $ObjectInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
                $ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
                $RelationshipInstance = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupDHCPCatAContainsWindowsComputers']$")
                $RelationshipInstance.Source = $SCOMGroupInstance
                $RelationshipInstance.Target = $ObjectInstance
                $DiscoveryData.AddInstance($RelationshipInstance)   
            }
        }
        # Submit discovery data back to Operations Manager and complete the script.
        $DiscoveryData
        <# FOR TESTING
        $MomApi.Return($DiscoveryData)
        #>
        Write-Log -ScriptState $ScriptState
    }
    Catch {
        $ScriptState = "Warning"
        $Message += $_.Exception.Message
        Write-Log -ScriptState $ScriptState 
    }
}
# All scripts should have this preamble.
[datetime]$StartTime = Get-Date
$MomApi = New-Object -comObject 'MOM.ScriptAPI'
$ScriptName = "DHCPCatA.ps1"
$Account = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$Mp = "Microsoft.SCOM.CMDB.Monitoring"
$MpVersion = "2023.10.13.3"
$MpWorkflow = "Microsoft.SCOM.Discovery.DHCPCatA"
# Run script.
Set-GroupMembers -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--DHCPCatB-->
			<Discovery ID="Cmdb.Discovery.DHCPCatB" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.DHCPCatB"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>16800</IntervalSeconds>
					<SyncTime/>
					<ScriptName>DHCPCatB.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
Function Write-Log {
    Param($ScriptState)
    if ($ScriptState -eq "Information") {
        $EventId = 17609
        $EventLevel = 0 # 0=Info
    }
    else {
        $EventId = 17610
        $EventLevel = 2 # 2=Warning
    }
    $End = Get-Date
    $TimeCount = (New-TimeSpan -Start $StartTime -End $End)
    $Minutes = $TimeCount.Minutes
    $Seconds = $TimeCount.Seconds
    $Milliseconds = $TimeCount.Milliseconds
    $MomApi.LogScriptEvent("$ScriptName executed and ran for $Minutes`m $Seconds`s $Milliseconds`ms", $EventId, $EventLevel, "`nRunning As: $Account`nWorkflow Name: $MpWorkflow`nManagement Pack: $Mp ($MpVersion)`nPowerShell Version: $PSVersion`n$Message")
    Break
}
Function Get-SQLTable {
    param($OpsDbServer, $OpsDbName, $DbQuery)
    $Connection = New-Object System.Data.SQLClient.SQLConnection
    $Connection.ConnectionString = "Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
    $Connection.Open()
    $Command = New-Object System.Data.SQLClient.SQLCommand
    $Command.Connection = $Connection
    $Command.CommandText = $DbQuery
    $Reader = $Command.ExecuteReader()
    $SQLTable = New-Object System.Data.DataTable
    $SQLTable.Load($Reader)
    $Connection.Close()
    Return $SQLTable
}
Function Set-GroupMembers {
    # This logs terminating and non-terminating events.
    $ErrorActionPreference = "Stop"
    Try {
        $ScriptState = "Information"
        <# FOR TESTING
        $SQLTable = ""
        $SourceId = "{00000000-0000-0000-0000-000000000000}"
        $ManagedEntityId = "{00000000-0000-0000-0000-000000000000}"
        #>
        $DiscoveryData = $MomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
        # Get PowerShell version.
        $PSVersion = $PSVersionTable.PSVersion
        [string]$PSMajor = $PSVersion.Major
        [string]$PSMinor = $PSVersion.Minor
        $PSVersion = $PSMajor + "." + $PSMinor
        # Common variables.
        $SetupRegKey = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
        $OpsDbServer = (Get-ItemProperty $SetupRegKey).DatabaseServerName
        $OpsDbName = (Get-ItemProperty $SetupRegKey).DatabaseName
        $SCOMGroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.DHCPCatB']$")
        $CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='WindowsDHCPServer' and Category ='CatB' and status = 'Active'"
        $ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]"
        <# FOR TESTING
        #$OpsDbServer="bad_error"
        #$OpsDbName="bad_db"
        #>
        # Get CMDB list.
        $CmdbTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $CMDBQuery
        # Get SCOM list.
        $SCOMTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $SCOMQuery
        ForEach ($ConfigItem In $CmdbTable) {
            $Object = $ConfigItem.Name
            # Compare CMDB list to SCOM list, if match found add to discovery.
            $Match = select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet
            If ($Match -eq $true) {
                $ObjectInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
                $ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
                $RelationshipInstance = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupDHCPCatBContainsWindowsComputers']$")
                $RelationshipInstance.Source = $SCOMGroupInstance
                $RelationshipInstance.Target = $ObjectInstance
                $DiscoveryData.AddInstance($RelationshipInstance)   
            }
        }
        # Submit discovery data back to Operations Manager and complete the script.
        $DiscoveryData
        <# FOR TESTING
        $MomApi.Return($DiscoveryData)
        #>
        Write-Log -ScriptState $ScriptState
    }
    Catch {
        $ScriptState = "Warning"
        $Message += $_.Exception.Message
        Write-Log -ScriptState $ScriptState 
    }
}
# All scripts should have this preamble.
[datetime]$StartTime = Get-Date
$MomApi = New-Object -comObject 'MOM.ScriptAPI'
$ScriptName = "DHCPCatB.ps1"
$Account = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$Mp = "Microsoft.SCOM.CMDB.Monitoring"
$MpVersion = "2023.10.13.3"
$MpWorkflow = "Microsoft.SCOM.Discovery.DHCPCatB"
# Run script.
Set-GroupMembers -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--IISCatA-->
			<Discovery ID="Cmdb.Discovery.IISCatA" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.IISCatA"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>17100</IntervalSeconds>
					<SyncTime/>
					<ScriptName>IISCatA.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
Function Write-Log {
    Param($ScriptState)
    if ($ScriptState -eq "Information") {
        $EventId = 17609
        $EventLevel = 0 # 0=Info
    }
    else {
        $EventId = 17610
        $EventLevel = 2 # 2=Warning
    }
    $End = Get-Date
    $TimeCount = (New-TimeSpan -Start $StartTime -End $End)
    $Minutes = $TimeCount.Minutes
    $Seconds = $TimeCount.Seconds
    $Milliseconds = $TimeCount.Milliseconds
    $MomApi.LogScriptEvent("$ScriptName executed and ran for $Minutes`m $Seconds`s $Milliseconds`ms", $EventId, $EventLevel, "`nRunning As: $Account`nWorkflow Name: $MpWorkflow`nManagement Pack: $Mp ($MpVersion)`nPowerShell Version: $PSVersion`n$Message")
    Break
}
Function Get-SQLTable {
    param($OpsDbServer, $OpsDbName, $DbQuery)
    $Connection = New-Object System.Data.SQLClient.SQLConnection
    $Connection.ConnectionString = "Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
    $Connection.Open()
    $Command = New-Object System.Data.SQLClient.SQLCommand
    $Command.Connection = $Connection
    $Command.CommandText = $DbQuery
    $Reader = $Command.ExecuteReader()
    $SQLTable = New-Object System.Data.DataTable
    $SQLTable.Load($Reader)
    $Connection.Close()
    Return $SQLTable
}
Function Set-GroupMembers {
    # This logs terminating and non-terminating events.
    $ErrorActionPreference = "Stop"
    Try {
        $ScriptState = "Information"
        <# FOR TESTING
        $SQLTable = ""
        $SourceId = "{00000000-0000-0000-0000-000000000000}"
        $ManagedEntityId = "{00000000-0000-0000-0000-000000000000}"
        #>
        $DiscoveryData = $MomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
        # Get PowerShell version.
        $PSVersion = $PSVersionTable.PSVersion
        [string]$PSMajor = $PSVersion.Major
        [string]$PSMinor = $PSVersion.Minor
        $PSVersion = $PSMajor + "." + $PSMinor
        # Common variables.
        $SetupRegKey = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
        $OpsDbServer = (Get-ItemProperty $SetupRegKey).DatabaseServerName
        $OpsDbName = (Get-ItemProperty $SetupRegKey).DatabaseName
        $SCOMGroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.IISCatA']$")
        $CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='IISWebServer' and Category ='CatA' and status = 'Active'"
        $ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]"
        <# FOR TESTING
        #$OpsDbServer="bad_error"
        #$OpsDbName="bad_db"
        #>
        # Get CMDB list.
        $CmdbTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $CMDBQuery
        # Get SCOM list.
        $SCOMTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $SCOMQuery
        ForEach ($ConfigItem In $CmdbTable) {
            $Object = $ConfigItem.Name
            # Compare CMDB list to SCOM list, if match found add to discovery.
            $Match = select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet
            If ($Match -eq $true) {
                $ObjectInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
                $ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
                $RelationshipInstance = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupIISCatAContainsWindowsComputers']$")
                $RelationshipInstance.Source = $SCOMGroupInstance
                $RelationshipInstance.Target = $ObjectInstance
                $DiscoveryData.AddInstance($RelationshipInstance)   
            }
        }
        # Submit discovery data back to Operations Manager and complete the script.
        $DiscoveryData
        <# FOR TESTING
        $MomApi.Return($DiscoveryData)
        #>
        Write-Log -ScriptState $ScriptState
    }
    Catch {
        $ScriptState = "Warning"
        $Message += $_.Exception.Message
        Write-Log -ScriptState $ScriptState 
    }
}
# All scripts should have this preamble.
[datetime]$StartTime = Get-Date
$MomApi = New-Object -comObject 'MOM.ScriptAPI'
$ScriptName = "IISCatA.ps1"
$Account = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$Mp = "Microsoft.SCOM.CMDB.Monitoring"
$MpVersion = "2023.10.13.3"
$MpWorkflow = "Microsoft.SCOM.Discovery.IISCatA"
# Run script.
Set-GroupMembers -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--IISCatB-->
			<Discovery ID="Cmdb.Discovery.IISCatB" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.IISCatB"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>19500</IntervalSeconds>
					<SyncTime/>
					<ScriptName>IISCatB.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
Function Write-Log {
    Param($ScriptState)
    if ($ScriptState -eq "Information") {
        $EventId = 17609
        $EventLevel = 0 # 0=Info
    }
    else {
        $EventId = 17610
        $EventLevel = 2 # 2=Warning
    }
    $End = Get-Date
    $TimeCount = (New-TimeSpan -Start $StartTime -End $End)
    $Minutes = $TimeCount.Minutes
    $Seconds = $TimeCount.Seconds
    $Milliseconds = $TimeCount.Milliseconds
    $MomApi.LogScriptEvent("$ScriptName executed and ran for $Minutes`m $Seconds`s $Milliseconds`ms", $EventId, $EventLevel, "`nRunning As: $Account`nWorkflow Name: $MpWorkflow`nManagement Pack: $Mp ($MpVersion)`nPowerShell Version: $PSVersion`n$Message")
    Break
}
Function Get-SQLTable {
    param($OpsDbServer, $OpsDbName, $DbQuery)
    $Connection = New-Object System.Data.SQLClient.SQLConnection
    $Connection.ConnectionString = "Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
    $Connection.Open()
    $Command = New-Object System.Data.SQLClient.SQLCommand
    $Command.Connection = $Connection
    $Command.CommandText = $DbQuery
    $Reader = $Command.ExecuteReader()
    $SQLTable = New-Object System.Data.DataTable
    $SQLTable.Load($Reader)
    $Connection.Close()
    Return $SQLTable
}
Function Set-GroupMembers {
    # This logs terminating and non-terminating events.
    $ErrorActionPreference = "Stop"
    Try {
        $ScriptState = "Information"
        <# FOR TESTING
        $SQLTable = ""
        $SourceId = "{00000000-0000-0000-0000-000000000000}"
        $ManagedEntityId = "{00000000-0000-0000-0000-000000000000}"
        #>
        $DiscoveryData = $MomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
        # Get PowerShell version.
        $PSVersion = $PSVersionTable.PSVersion
        [string]$PSMajor = $PSVersion.Major
        [string]$PSMinor = $PSVersion.Minor
        $PSVersion = $PSMajor + "." + $PSMinor
        # Common variables.
        $SetupRegKey = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
        $OpsDbServer = (Get-ItemProperty $SetupRegKey).DatabaseServerName
        $OpsDbName = (Get-ItemProperty $SetupRegKey).DatabaseName
        $SCOMGroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.IISCatB']$")
        $CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='IISWebServer' and Category ='CatB' and status = 'Active'"
        $ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]"
        <# FOR TESTING
        #$OpsDbServer="bad_error"
        #$OpsDbName="bad_db"
        #>
        # Get CMDB list.
        $CmdbTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $CMDBQuery
        # Get SCOM list.
        $SCOMTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $SCOMQuery
        ForEach ($ConfigItem In $CmdbTable) {
            $Object = $ConfigItem.Name
            # Compare CMDB list to SCOM list, if match found add to discovery.
            $Match = select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet
            If ($Match -eq $true) {
                $ObjectInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
                $ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
                $RelationshipInstance = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupIISCatBContainsWindowsComputers']$")
                $RelationshipInstance.Source = $SCOMGroupInstance
                $RelationshipInstance.Target = $ObjectInstance
                $DiscoveryData.AddInstance($RelationshipInstance)   
            }
        }
        # Submit discovery data back to Operations Manager and complete the script.
        $DiscoveryData
        <# FOR TESTING
        $MomApi.Return($DiscoveryData)
        #>
        Write-Log -ScriptState $ScriptState
    }
    Catch {
        $ScriptState = "Warning"
        $Message += $_.Exception.Message
        Write-Log -ScriptState $ScriptState 
    }
}
# All scripts should have this preamble.
[datetime]$StartTime = Get-Date
$MomApi = New-Object -comObject 'MOM.ScriptAPI'
$ScriptName = "IISCatB.ps1"
$Account = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$Mp = "Microsoft.SCOM.CMDB.Monitoring"
$MpVersion = "2023.10.13.3"
$MpWorkflow = "Microsoft.SCOM.Discovery.IISCatB"
# Run script.
Set-GroupMembers -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--IISCatC-->
			<Discovery ID="Cmdb.Discovery.IISCatC" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.IISCatC"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>20100</IntervalSeconds>
					<SyncTime/>
					<ScriptName>IISCatC.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
Function Write-Log {
    Param($ScriptState)
    if ($ScriptState -eq "Information") {
        $EventId = 17609
        $EventLevel = 0 # 0=Info
    }
    else {
        $EventId = 17610
        $EventLevel = 2 # 2=Warning
    }
    $End = Get-Date
    $TimeCount = (New-TimeSpan -Start $StartTime -End $End)
    $Minutes = $TimeCount.Minutes
    $Seconds = $TimeCount.Seconds
    $Milliseconds = $TimeCount.Milliseconds
    $MomApi.LogScriptEvent("$ScriptName executed and ran for $Minutes`m $Seconds`s $Milliseconds`ms", $EventId, $EventLevel, "`nRunning As: $Account`nWorkflow Name: $MpWorkflow`nManagement Pack: $Mp ($MpVersion)`nPowerShell Version: $PSVersion`n$Message")
    Break
}
Function Get-SQLTable {
    param($OpsDbServer, $OpsDbName, $DbQuery)
    $Connection = New-Object System.Data.SQLClient.SQLConnection
    $Connection.ConnectionString = "Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
    $Connection.Open()
    $Command = New-Object System.Data.SQLClient.SQLCommand
    $Command.Connection = $Connection
    $Command.CommandText = $DbQuery
    $Reader = $Command.ExecuteReader()
    $SQLTable = New-Object System.Data.DataTable
    $SQLTable.Load($Reader)
    $Connection.Close()
    Return $SQLTable
}
Function Set-GroupMembers {
    # This logs terminating and non-terminating events.
    $ErrorActionPreference = "Stop"
    Try {
        $ScriptState = "Information"
        <# FOR TESTING
        $SQLTable = ""
        $SourceId = "{00000000-0000-0000-0000-000000000000}"
        $ManagedEntityId = "{00000000-0000-0000-0000-000000000000}"
        #>
        $DiscoveryData = $MomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
        # Get PowerShell version.
        $PSVersion = $PSVersionTable.PSVersion
        [string]$PSMajor = $PSVersion.Major
        [string]$PSMinor = $PSVersion.Minor
        $PSVersion = $PSMajor + "." + $PSMinor
        # Common variables.
        $SetupRegKey = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
        $OpsDbServer = (Get-ItemProperty $SetupRegKey).DatabaseServerName
        $OpsDbName = (Get-ItemProperty $SetupRegKey).DatabaseName
        $SCOMGroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.IISCatC']$")
        $CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='IISWebServer' and Category ='CatC' and status = 'Active'"
        $ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]"
        <# FOR TESTING
        #$OpsDbServer="bad_error"
        #$OpsDbName="bad_db"
        #>
        # Get CMDB list.
        $CmdbTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $CMDBQuery
        # Get SCOM list.
        $SCOMTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $SCOMQuery
        ForEach ($ConfigItem In $CmdbTable) {
            $Object = $ConfigItem.Name
            # Compare CMDB list to SCOM list, if match found add to discovery.
            $Match = select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet
            If ($Match -eq $true) {
                $ObjectInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
                $ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
                $RelationshipInstance = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupIISCatCContainsWindowsComputers']$")
                $RelationshipInstance.Source = $SCOMGroupInstance
                $RelationshipInstance.Target = $ObjectInstance
                $DiscoveryData.AddInstance($RelationshipInstance)   
            }
        }
        # Submit discovery data back to Operations Manager and complete the script.
        $DiscoveryData
        <# FOR TESTING
        $MomApi.Return($DiscoveryData)
        #>
        Write-Log -ScriptState $ScriptState
    }
    Catch {
        $ScriptState = "Warning"
        $Message += $_.Exception.Message
        Write-Log -ScriptState $ScriptState 
    }
}
# All scripts should have this preamble.
[datetime]$StartTime = Get-Date
$MomApi = New-Object -comObject 'MOM.ScriptAPI'
$ScriptName = "IISCatC.ps1"
$Account = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$Mp = "Microsoft.SCOM.CMDB.Monitoring"
$MpVersion = "2023.10.13.3"
$MpWorkflow = "Microsoft.SCOM.Discovery.IISCatC"
# Run script.
Set-GroupMembers -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--SQLCatA-->
			<Discovery ID="Cmdb.Discovery.SQLCatA" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.SQLCatA"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>17400</IntervalSeconds>
					<SyncTime/>
					<ScriptName>SQLCatA.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
Function Write-Log {
    Param($ScriptState)
    if ($ScriptState -eq "Information") {
        $EventId = 17609
        $EventLevel = 0 # 0=Info
    }
    else {
        $EventId = 17610
        $EventLevel = 2 # 2=Warning
    }
    $End = Get-Date
    $TimeCount = (New-TimeSpan -Start $StartTime -End $End)
    $Minutes = $TimeCount.Minutes
    $Seconds = $TimeCount.Seconds
    $Milliseconds = $TimeCount.Milliseconds
    $MomApi.LogScriptEvent("$ScriptName executed and ran for $Minutes`m $Seconds`s $Milliseconds`ms", $EventId, $EventLevel, "`nRunning As: $Account`nWorkflow Name: $MpWorkflow`nManagement Pack: $Mp ($MpVersion)`nPowerShell Version: $PSVersion`n$Message")
    Break
}
Function Get-SQLTable {
    param($OpsDbServer, $OpsDbName, $DbQuery)
    $Connection = New-Object System.Data.SQLClient.SQLConnection
    $Connection.ConnectionString = "Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
    $Connection.Open()
    $Command = New-Object System.Data.SQLClient.SQLCommand
    $Command.Connection = $Connection
    $Command.CommandText = $DbQuery
    $Reader = $Command.ExecuteReader()
    $SQLTable = New-Object System.Data.DataTable
    $SQLTable.Load($Reader)
    $Connection.Close()
    Return $SQLTable
}
Function Set-GroupMembers {
    # This logs terminating and non-terminating events.
    $ErrorActionPreference = "Stop"
    Try {
        $ScriptState = "Information"
        <# FOR TESTING
        $SQLTable = ""
        $SourceId = "{00000000-0000-0000-0000-000000000000}"
        $ManagedEntityId = "{00000000-0000-0000-0000-000000000000}"
        #>
        $DiscoveryData = $MomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
        # Get PowerShell version.
        $PSVersion = $PSVersionTable.PSVersion
        [string]$PSMajor = $PSVersion.Major
        [string]$PSMinor = $PSVersion.Minor
        $PSVersion = $PSMajor + "." + $PSMinor
        # Common variables.
        $SetupRegKey = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
        $OpsDbServer = (Get-ItemProperty $SetupRegKey).DatabaseServerName
        $OpsDbName = (Get-ItemProperty $SetupRegKey).DatabaseName
        $SCOMGroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.SQLCatA']$")
        $CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='SqlServer' and Category ='CatA' and status = 'Active'"
        $ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]"
        <# FOR TESTING
        #$OpsDbServer="bad_error"
        #$OpsDbName="bad_db"
        #>
        # Get CMDB list.
        $CmdbTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $CMDBQuery
        # Get SCOM list.
        $SCOMTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $SCOMQuery
        ForEach ($ConfigItem In $CmdbTable) {
            $Object = $ConfigItem.Name
            # Compare CMDB list to SCOM list, if match found add to discovery.
            $Match = select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet
            If ($Match -eq $true) {
                $ObjectInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
                $ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
                $RelationshipInstance = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupSQLCatAContainsWindowsComputers']$")
                $RelationshipInstance.Source = $SCOMGroupInstance
                $RelationshipInstance.Target = $ObjectInstance
                $DiscoveryData.AddInstance($RelationshipInstance)   
            }
        }
        # Submit discovery data back to Operations Manager and complete the script.
        $DiscoveryData
        <# FOR TESTING
        $MomApi.Return($DiscoveryData)
        #>
        Write-Log -ScriptState $ScriptState
    }
    Catch {
        $ScriptState = "Warning"
        $Message += $_.Exception.Message
        Write-Log -ScriptState $ScriptState 
    }
}
# All scripts should have this preamble.
[datetime]$StartTime = Get-Date
$MomApi = New-Object -comObject 'MOM.ScriptAPI'
$ScriptName = "SQLCatA.ps1"
$Account = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$Mp = "Microsoft.SCOM.CMDB.Monitoring"
$MpVersion = "2023.10.13.3"
$MpWorkflow = "Microsoft.SCOM.Discovery.SQLCatA"
# Run script.
Set-GroupMembers -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--SQLCatB-->
			<Discovery ID="Cmdb.Discovery.SQLCatB" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.SQLCatB"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>17700</IntervalSeconds>
					<SyncTime/>
					<ScriptName>SQLCatB.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
Function Write-Log {
    Param($ScriptState)
    if ($ScriptState -eq "Information") {
        $EventId = 17609
        $EventLevel = 0 # 0=Info
    }
    else {
        $EventId = 17610
        $EventLevel = 2 # 2=Warning
    }
    $End = Get-Date
    $TimeCount = (New-TimeSpan -Start $StartTime -End $End)
    $Minutes = $TimeCount.Minutes
    $Seconds = $TimeCount.Seconds
    $Milliseconds = $TimeCount.Milliseconds
    $MomApi.LogScriptEvent("$ScriptName executed and ran for $Minutes`m $Seconds`s $Milliseconds`ms", $EventId, $EventLevel, "`nRunning As: $Account`nWorkflow Name: $MpWorkflow`nManagement Pack: $Mp ($MpVersion)`nPowerShell Version: $PSVersion`n$Message")
    Break
}
Function Get-SQLTable {
    param($OpsDbServer, $OpsDbName, $DbQuery)
    $Connection = New-Object System.Data.SQLClient.SQLConnection
    $Connection.ConnectionString = "Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
    $Connection.Open()
    $Command = New-Object System.Data.SQLClient.SQLCommand
    $Command.Connection = $Connection
    $Command.CommandText = $DbQuery
    $Reader = $Command.ExecuteReader()
    $SQLTable = New-Object System.Data.DataTable
    $SQLTable.Load($Reader)
    $Connection.Close()
    Return $SQLTable
}
Function Set-GroupMembers {
    # This logs terminating and non-terminating events.
    $ErrorActionPreference = "Stop"
    Try {
        $ScriptState = "Information"
        <# FOR TESTING
        $SQLTable = ""
        $SourceId = "{00000000-0000-0000-0000-000000000000}"
        $ManagedEntityId = "{00000000-0000-0000-0000-000000000000}"
        #>
        $DiscoveryData = $MomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
        # Get PowerShell version.
        $PSVersion = $PSVersionTable.PSVersion
        [string]$PSMajor = $PSVersion.Major
        [string]$PSMinor = $PSVersion.Minor
        $PSVersion = $PSMajor + "." + $PSMinor
        # Common variables.
        $SetupRegKey = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
        $OpsDbServer = (Get-ItemProperty $SetupRegKey).DatabaseServerName
        $OpsDbName = (Get-ItemProperty $SetupRegKey).DatabaseName
        $SCOMGroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.SQLCatB']$")
        $CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='SqlServer' and Category ='CatB' and status = 'Active'"
        $ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]"
        <# FOR TESTING
        #$OpsDbServer="bad_error"
        #$OpsDbName="bad_db"
        #>
        # Get CMDB list.
        $CmdbTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $CMDBQuery
        # Get SCOM list.
        $SCOMTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $SCOMQuery
        ForEach ($ConfigItem In $CmdbTable) {
            $Object = $ConfigItem.Name
            # Compare CMDB list to SCOM list, if match found add to discovery.
            $Match = select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet
            If ($Match -eq $true) {
                $ObjectInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
                $ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
                $RelationshipInstance = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupSQLCatBContainsWindowsComputers']$")
                $RelationshipInstance.Source = $SCOMGroupInstance
                $RelationshipInstance.Target = $ObjectInstance
                $DiscoveryData.AddInstance($RelationshipInstance)   
            }
        }
        # Submit discovery data back to Operations Manager and complete the script.
        $DiscoveryData
        <# FOR TESTING
        $MomApi.Return($DiscoveryData)
        #>
        Write-Log -ScriptState $ScriptState
    }
    Catch {
        $ScriptState = "Warning"
        $Message += $_.Exception.Message
        Write-Log -ScriptState $ScriptState 
    }
}
# All scripts should have this preamble.
[datetime]$StartTime = Get-Date
$MomApi = New-Object -comObject 'MOM.ScriptAPI'
$ScriptName = "SQLCatB.ps1"
$Account = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$Mp = "Microsoft.SCOM.CMDB.Monitoring"
$MpVersion = "2023.10.13.3"
$MpWorkflow = "Microsoft.SCOM.Discovery.SQLCatB"
# Run script.
Set-GroupMembers -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--WindowsClusterCatA-->
			<Discovery ID="Cmdb.Discovery.WindowsClusterCatA" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.WindowsClusterCatA"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>18000</IntervalSeconds>
					<SyncTime/>
					<ScriptName>WindowsClusterCatA.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
Function Write-Log {
    Param($ScriptState)
    if ($ScriptState -eq "Information") {
        $EventId = 17609
        $EventLevel = 0 # 0=Info
    }
    else {
        $EventId = 17610
        $EventLevel = 2 # 2=Warning
    }
    $End = Get-Date
    $TimeCount = (New-TimeSpan -Start $StartTime -End $End)
    $Minutes = $TimeCount.Minutes
    $Seconds = $TimeCount.Seconds
    $Milliseconds = $TimeCount.Milliseconds
    $MomApi.LogScriptEvent("$ScriptName executed and ran for $Minutes`m $Seconds`s $Milliseconds`ms", $EventId, $EventLevel, "`nRunning As: $Account`nWorkflow Name: $MpWorkflow`nManagement Pack: $Mp ($MpVersion)`nPowerShell Version: $PSVersion`n$Message")
    Break
}
Function Get-SQLTable {
    param($OpsDbServer, $OpsDbName, $DbQuery)
    $Connection = New-Object System.Data.SQLClient.SQLConnection
    $Connection.ConnectionString = "Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
    $Connection.Open()
    $Command = New-Object System.Data.SQLClient.SQLCommand
    $Command.Connection = $Connection
    $Command.CommandText = $DbQuery
    $Reader = $Command.ExecuteReader()
    $SQLTable = New-Object System.Data.DataTable
    $SQLTable.Load($Reader)
    $Connection.Close()
    Return $SQLTable
}
Function Set-GroupMembers {
    # This logs terminating and non-terminating events.
    $ErrorActionPreference = "Stop"
    Try {
        $ScriptState = "Information"
        <# FOR TESTING
        $SQLTable = ""
        $SourceId = "{00000000-0000-0000-0000-000000000000}"
        $ManagedEntityId = "{00000000-0000-0000-0000-000000000000}"
        #>
        $DiscoveryData = $MomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
        # Get PowerShell version.
        $PSVersion = $PSVersionTable.PSVersion
        [string]$PSMajor = $PSVersion.Major
        [string]$PSMinor = $PSVersion.Minor
        $PSVersion = $PSMajor + "." + $PSMinor
        # Common variables.
        $SetupRegKey = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
        $OpsDbServer = (Get-ItemProperty $SetupRegKey).DatabaseServerName
        $OpsDbName = (Get-ItemProperty $SetupRegKey).DatabaseName
        $SCOMGroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.WindowsClusterCatA']$")
        $CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='WindowsCluster' and Category ='CatA' and status = 'Active'"
        $ScomQuery="SELECT DisplayName AS Name from [$OpsDbName].[dbo].[MT_Microsoft`$Windows`$Cluster]"
        <# FOR TESTING
        #$OpsDbServer="bad_error"
        #$OpsDbName="bad_db"
        #>
        # Get CMDB list.
        $CmdbTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $CMDBQuery
        # Get SCOM list.
        $SCOMTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $SCOMQuery
        ForEach ($ConfigItem In $CmdbTable) {
            $Object = $ConfigItem.Name
            # Compare CMDB list to SCOM list, if match found add to discovery.
            $Match = select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet
            If ($Match -eq $true) {
                $ObjectInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='ClusterLib!Microsoft.Windows.Cluster']$")
                $ObjectInstance.AddProperty("$MPElement[Name='ClusterLib!Microsoft.Windows.Cluster']/Name$", $Object)
                $RelationshipInstance=$DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupWindowsClusterCatAContainsWindowsClusters']$")
                $RelationshipInstance.Source = $SCOMGroupInstance
                $RelationshipInstance.Target = $ObjectInstance
                $DiscoveryData.AddInstance($RelationshipInstance)   
            }
        }
        # Submit discovery data back to Operations Manager and complete the script.
        $DiscoveryData
        <# FOR TESTING
        $MomApi.Return($DiscoveryData)
        #>
        Write-Log -ScriptState $ScriptState
    }
    Catch {
        $ScriptState = "Warning"
        $Message += $_.Exception.Message
        Write-Log -ScriptState $ScriptState 
    }
}
# All scripts should have this preamble.
[datetime]$StartTime = Get-Date
$MomApi = New-Object -comObject 'MOM.ScriptAPI'
$ScriptName = "WindowsClusterCatA.ps1"
$Account = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$Mp = "Microsoft.SCOM.CMDB.Monitoring"
$MpVersion = "2023.10.13.3"
$MpWorkflow = "Microsoft.SCOM.Discovery.WindowsClusterCatA"
# Run script.
Set-GroupMembers -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--WindowsClusterCatB-->
			<Discovery ID="Cmdb.Discovery.WindowsClusterCatB" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.WindowsClusterCatB"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>18300</IntervalSeconds>
					<SyncTime/>
					<ScriptName>WindowsClusterCatB.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
Function Write-Log {
    Param($ScriptState)
    if ($ScriptState -eq "Information") {
        $EventId = 17609
        $EventLevel = 0 # 0=Info
    }
    else {
        $EventId = 17610
        $EventLevel = 2 # 2=Warning
    }
    $End = Get-Date
    $TimeCount = (New-TimeSpan -Start $StartTime -End $End)
    $Minutes = $TimeCount.Minutes
    $Seconds = $TimeCount.Seconds
    $Milliseconds = $TimeCount.Milliseconds
    $MomApi.LogScriptEvent("$ScriptName executed and ran for $Minutes`m $Seconds`s $Milliseconds`ms", $EventId, $EventLevel, "`nRunning As: $Account`nWorkflow Name: $MpWorkflow`nManagement Pack: $Mp ($MpVersion)`nPowerShell Version: $PSVersion`n$Message")
    Break
}
Function Get-SQLTable {
    param($OpsDbServer, $OpsDbName, $DbQuery)
    $Connection = New-Object System.Data.SQLClient.SQLConnection
    $Connection.ConnectionString = "Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
    $Connection.Open()
    $Command = New-Object System.Data.SQLClient.SQLCommand
    $Command.Connection = $Connection
    $Command.CommandText = $DbQuery
    $Reader = $Command.ExecuteReader()
    $SQLTable = New-Object System.Data.DataTable
    $SQLTable.Load($Reader)
    $Connection.Close()
    Return $SQLTable
}
Function Set-GroupMembers {
    # This logs terminating and non-terminating events.
    $ErrorActionPreference = "Stop"
    Try {
        $ScriptState = "Information"
        <# FOR TESTING
        $SQLTable = ""
        $SourceId = "{00000000-0000-0000-0000-000000000000}"
        $ManagedEntityId = "{00000000-0000-0000-0000-000000000000}"
        #>
        $DiscoveryData = $MomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
        # Get PowerShell version.
        $PSVersion = $PSVersionTable.PSVersion
        [string]$PSMajor = $PSVersion.Major
        [string]$PSMinor = $PSVersion.Minor
        $PSVersion = $PSMajor + "." + $PSMinor
        # Common variables.
        $SetupRegKey = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
        $OpsDbServer = (Get-ItemProperty $SetupRegKey).DatabaseServerName
        $OpsDbName = (Get-ItemProperty $SetupRegKey).DatabaseName
        $SCOMGroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.WindowsClusterCatB']$")
        $CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='WindowsCluster' and Category ='CatB' and status = 'Active'"
        $ScomQuery="SELECT DisplayName AS Name from [$OpsDbName].[dbo].[MT_Microsoft`$Windows`$Cluster]"
        <# FOR TESTING
        #$OpsDbServer="bad_error"
        #$OpsDbName="bad_db"
        #>
        # Get CMDB list.
        $CmdbTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $CMDBQuery
        # Get SCOM list.
        $SCOMTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $SCOMQuery
        ForEach ($ConfigItem In $CmdbTable) {
            $Object = $ConfigItem.Name
            # Compare CMDB list to SCOM list, if match found add to discovery.
            $Match = select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet
            If ($Match -eq $true) {
                $ObjectInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='ClusterLib!Microsoft.Windows.Cluster']$")
                $ObjectInstance.AddProperty("$MPElement[Name='ClusterLib!Microsoft.Windows.Cluster']/Name$", $Object)
                $RelationshipInstance=$DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupWindowsClusterCatBContainsWindowsClusters']$")
                $RelationshipInstance.Source = $SCOMGroupInstance
                $RelationshipInstance.Target = $ObjectInstance
                $DiscoveryData.AddInstance($RelationshipInstance)   
            }
        }
        # Submit discovery data back to Operations Manager and complete the script.
        $DiscoveryData
        <# FOR TESTING
        $MomApi.Return($DiscoveryData)
        #>
        Write-Log -ScriptState $ScriptState
    }
    Catch {
        $ScriptState = "Warning"
        $Message += $_.Exception.Message
        Write-Log -ScriptState $ScriptState 
    }
}
# All scripts should have this preamble.
[datetime]$StartTime = Get-Date
$MomApi = New-Object -comObject 'MOM.ScriptAPI'
$ScriptName = "WindowsClusterCatB.ps1"
$Account = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$Mp = "Microsoft.SCOM.CMDB.Monitoring"
$MpVersion = "2023.10.13.3"
$MpWorkflow = "Microsoft.SCOM.Discovery.WindowsClusterCatB"
# Run script.
Set-GroupMembers -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--WindowsClusterCatC-->
			<Discovery ID="Cmdb.Discovery.WindowsClusterCatC" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.WindowsClusterCatC"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>18600</IntervalSeconds>
					<SyncTime/>
					<ScriptName>WindowsClusterCatC.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
Function Write-Log {
    Param($ScriptState)
    if ($ScriptState -eq "Information") {
        $EventId = 17609
        $EventLevel = 0 # 0=Info
    }
    else {
        $EventId = 17610
        $EventLevel = 2 # 2=Warning
    }
    $End = Get-Date
    $TimeCount = (New-TimeSpan -Start $StartTime -End $End)
    $Minutes = $TimeCount.Minutes
    $Seconds = $TimeCount.Seconds
    $Milliseconds = $TimeCount.Milliseconds
    $MomApi.LogScriptEvent("$ScriptName executed and ran for $Minutes`m $Seconds`s $Milliseconds`ms", $EventId, $EventLevel, "`nRunning As: $Account`nWorkflow Name: $MpWorkflow`nManagement Pack: $Mp ($MpVersion)`nPowerShell Version: $PSVersion`n$Message")
    Break
}
Function Get-SQLTable {
    param($OpsDbServer, $OpsDbName, $DbQuery)
    $Connection = New-Object System.Data.SQLClient.SQLConnection
    $Connection.ConnectionString = "Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
    $Connection.Open()
    $Command = New-Object System.Data.SQLClient.SQLCommand
    $Command.Connection = $Connection
    $Command.CommandText = $DbQuery
    $Reader = $Command.ExecuteReader()
    $SQLTable = New-Object System.Data.DataTable
    $SQLTable.Load($Reader)
    $Connection.Close()
    Return $SQLTable
}
Function Set-GroupMembers {
    # This logs terminating and non-terminating events.
    $ErrorActionPreference = "Stop"
    Try {
        $ScriptState = "Information"
        <# FOR TESTING
        $SQLTable = ""
        $SourceId = "{00000000-0000-0000-0000-000000000000}"
        $ManagedEntityId = "{00000000-0000-0000-0000-000000000000}"
        #>
        $DiscoveryData = $MomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
        # Get PowerShell version.
        $PSVersion = $PSVersionTable.PSVersion
        [string]$PSMajor = $PSVersion.Major
        [string]$PSMinor = $PSVersion.Minor
        $PSVersion = $PSMajor + "." + $PSMinor
        # Common variables.
        $SetupRegKey = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
        $OpsDbServer = (Get-ItemProperty $SetupRegKey).DatabaseServerName
        $OpsDbName = (Get-ItemProperty $SetupRegKey).DatabaseName
        $SCOMGroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.WindowsClusterCatC']$")
        $CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='WindowsCluster' and Category ='CatC' and status = 'Active'"
        $ScomQuery="SELECT DisplayName AS Name from [$OpsDbName].[dbo].[MT_Microsoft`$Windows`$Cluster]"
        <# FOR TESTING
        #$OpsDbServer="bad_error"
        #$OpsDbName="bad_db"
        #>
        # Get CMDB list.
        $CmdbTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $CMDBQuery
        # Get SCOM list.
        $SCOMTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $SCOMQuery
        ForEach ($ConfigItem In $CmdbTable) {
            $Object = $ConfigItem.Name
            # Compare CMDB list to SCOM list, if match found add to discovery.
            $Match = select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet
            If ($Match -eq $true) {
                $ObjectInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='ClusterLib!Microsoft.Windows.Cluster']$")
                $ObjectInstance.AddProperty("$MPElement[Name='ClusterLib!Microsoft.Windows.Cluster']/Name$", $Object)
                $RelationshipInstance=$DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupWindowsClusterCatCContainsWindowsClusters']$")
                $RelationshipInstance.Source = $SCOMGroupInstance
                $RelationshipInstance.Target = $ObjectInstance
                $DiscoveryData.AddInstance($RelationshipInstance)   
            }
        }
        # Submit discovery data back to Operations Manager and complete the script.
        $DiscoveryData
        <# FOR TESTING
        $MomApi.Return($DiscoveryData)
        #>
        Write-Log -ScriptState $ScriptState
    }
    Catch {
        $ScriptState = "Warning"
        $Message += $_.Exception.Message
        Write-Log -ScriptState $ScriptState 
    }
}
# All scripts should have this preamble.
[datetime]$StartTime = Get-Date
$MomApi = New-Object -comObject 'MOM.ScriptAPI'
$ScriptName = "WindowsClusterCatC.ps1"
$Account = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$Mp = "Microsoft.SCOM.CMDB.Monitoring"
$MpVersion = "2023.10.13.3"
$MpWorkflow = "Microsoft.SCOM.Discovery.WindowsClusterCatC"
# Run script.
Set-GroupMembers -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--ADFSCatA-->
			<Discovery ID="Cmdb.Discovery.ADFSCatA" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.ADFSCatA"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>18900</IntervalSeconds>
					<SyncTime/>
					<ScriptName>ADFSCatA.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
Function Write-Log {
    Param($ScriptState)
    if ($ScriptState -eq "Information") {
        $EventId = 17609
        $EventLevel = 0 # 0=Info
    }
    else {
        $EventId = 17610
        $EventLevel = 2 # 2=Warning
    }
    $End = Get-Date
    $TimeCount = (New-TimeSpan -Start $StartTime -End $End)
    $Minutes = $TimeCount.Minutes
    $Seconds = $TimeCount.Seconds
    $Milliseconds = $TimeCount.Milliseconds
    $MomApi.LogScriptEvent("$ScriptName executed and ran for $Minutes`m $Seconds`s $Milliseconds`ms", $EventId, $EventLevel, "`nRunning As: $Account`nWorkflow Name: $MpWorkflow`nManagement Pack: $Mp ($MpVersion)`nPowerShell Version: $PSVersion`n$Message")
    Break
}
Function Get-SQLTable {
    param($OpsDbServer, $OpsDbName, $DbQuery)
    $Connection = New-Object System.Data.SQLClient.SQLConnection
    $Connection.ConnectionString = "Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
    $Connection.Open()
    $Command = New-Object System.Data.SQLClient.SQLCommand
    $Command.Connection = $Connection
    $Command.CommandText = $DbQuery
    $Reader = $Command.ExecuteReader()
    $SQLTable = New-Object System.Data.DataTable
    $SQLTable.Load($Reader)
    $Connection.Close()
    Return $SQLTable
}
Function Set-GroupMembers {
    # This logs terminating and non-terminating events.
    $ErrorActionPreference = "Stop"
    Try {
        $ScriptState = "Information"
        <# FOR TESTING
        $SQLTable = ""
        $SourceId = "{00000000-0000-0000-0000-000000000000}"
        $ManagedEntityId = "{00000000-0000-0000-0000-000000000000}"
        #>
        $DiscoveryData = $MomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
        # Get PowerShell version.
        $PSVersion = $PSVersionTable.PSVersion
        [string]$PSMajor = $PSVersion.Major
        [string]$PSMinor = $PSVersion.Minor
        $PSVersion = $PSMajor + "." + $PSMinor
        # Common variables.
        $SetupRegKey = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
        $OpsDbServer = (Get-ItemProperty $SetupRegKey).DatabaseServerName
        $OpsDbName = (Get-ItemProperty $SetupRegKey).DatabaseName
        $SCOMGroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.ADFSCatA']$")
        $CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='FederationServer' and Category ='CatA' and status = 'Active'"
        $ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]"
        <# FOR TESTING
        #$OpsDbServer="bad_error"
        #$OpsDbName="bad_db"
        #>
        # Get CMDB list.
        $CmdbTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $CMDBQuery
        # Get SCOM list.
        $SCOMTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $SCOMQuery
        ForEach ($ConfigItem In $CmdbTable) {
            $Object = $ConfigItem.Name
            # Compare CMDB list to SCOM list, if match found add to discovery.
            $Match = select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet
            If ($Match -eq $true) {
                $ObjectInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
                $ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
                $RelationshipInstance = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupADFSCatAContainsWindowsComputers']$")
                $RelationshipInstance.Source = $SCOMGroupInstance
                $RelationshipInstance.Target = $ObjectInstance
                $DiscoveryData.AddInstance($RelationshipInstance)   
            }
        }
        # Submit discovery data back to Operations Manager and complete the script.
        $DiscoveryData
        <# FOR TESTING
        $MomApi.Return($DiscoveryData)
        #>
        Write-Log -ScriptState $ScriptState
    }
    Catch {
        $ScriptState = "Warning"
        $Message += $_.Exception.Message
        Write-Log -ScriptState $ScriptState 
    }
}
# All scripts should have this preamble.
[datetime]$StartTime = Get-Date
$MomApi = New-Object -comObject 'MOM.ScriptAPI'
$ScriptName = "ADFSCatA.ps1"
$Account = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$Mp = "Microsoft.SCOM.CMDB.Monitoring"
$MpVersion = "2023.10.13.3"
$MpWorkflow = "Microsoft.SCOM.Discovery.ADFSCatA"
# Run script.
Set-GroupMembers -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--ADFSCatB-->
			<Discovery ID="Cmdb.Discovery.ADFSCatB" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.ADFSCatB"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>19200</IntervalSeconds>
					<SyncTime/>
					<ScriptName>ADFSCatB.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
Function Write-Log {
    Param($ScriptState)
    if ($ScriptState -eq "Information") {
        $EventId = 17609
        $EventLevel = 0 # 0=Info
    }
    else {
        $EventId = 17610
        $EventLevel = 2 # 2=Warning
    }
    $End = Get-Date
    $TimeCount = (New-TimeSpan -Start $StartTime -End $End)
    $Minutes = $TimeCount.Minutes
    $Seconds = $TimeCount.Seconds
    $Milliseconds = $TimeCount.Milliseconds
    $MomApi.LogScriptEvent("$ScriptName executed and ran for $Minutes`m $Seconds`s $Milliseconds`ms", $EventId, $EventLevel, "`nRunning As: $Account`nWorkflow Name: $MpWorkflow`nManagement Pack: $Mp ($MpVersion)`nPowerShell Version: $PSVersion`n$Message")
    Break
}
Function Get-SQLTable {
    param($OpsDbServer, $OpsDbName, $DbQuery)
    $Connection = New-Object System.Data.SQLClient.SQLConnection
    $Connection.ConnectionString = "Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
    $Connection.Open()
    $Command = New-Object System.Data.SQLClient.SQLCommand
    $Command.Connection = $Connection
    $Command.CommandText = $DbQuery
    $Reader = $Command.ExecuteReader()
    $SQLTable = New-Object System.Data.DataTable
    $SQLTable.Load($Reader)
    $Connection.Close()
    Return $SQLTable
}
Function Set-GroupMembers {
    # This logs terminating and non-terminating events.
    $ErrorActionPreference = "Stop"
    Try {
        $ScriptState = "Information"
        <# FOR TESTING
        $SQLTable = ""
        $SourceId = "{00000000-0000-0000-0000-000000000000}"
        $ManagedEntityId = "{00000000-0000-0000-0000-000000000000}"
        #>
        $DiscoveryData = $MomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
        # Get PowerShell version.
        $PSVersion = $PSVersionTable.PSVersion
        [string]$PSMajor = $PSVersion.Major
        [string]$PSMinor = $PSVersion.Minor
        $PSVersion = $PSMajor + "." + $PSMinor
        # Common variables.
        $SetupRegKey = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
        $OpsDbServer = (Get-ItemProperty $SetupRegKey).DatabaseServerName
        $OpsDbName = (Get-ItemProperty $SetupRegKey).DatabaseName
        $SCOMGroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.ADFSCatB']$")
        $CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='FederationServer' and Category ='CatB' and status = 'Active'"
        $ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]"
        <# FOR TESTING
        #$OpsDbServer="bad_error"
        #$OpsDbName="bad_db"
        #>
        # Get CMDB list.
        $CmdbTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $CMDBQuery
        # Get SCOM list.
        $SCOMTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $SCOMQuery
        ForEach ($ConfigItem In $CmdbTable) {
            $Object = $ConfigItem.Name
            # Compare CMDB list to SCOM list, if match found add to discovery.
            $Match = select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet
            If ($Match -eq $true) {
                $ObjectInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
                $ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
                $RelationshipInstance = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupADFSCatBContainsWindowsComputers']$")
                $RelationshipInstance.Source = $SCOMGroupInstance
                $RelationshipInstance.Target = $ObjectInstance
                $DiscoveryData.AddInstance($RelationshipInstance)   
            }
        }
        # Submit discovery data back to Operations Manager and complete the script.
        $DiscoveryData
        <# FOR TESTING
        $MomApi.Return($DiscoveryData)
        #>
        Write-Log -ScriptState $ScriptState
    }
    Catch {
        $ScriptState = "Warning"
        $Message += $_.Exception.Message
        Write-Log -ScriptState $ScriptState 
    }
}
# All scripts should have this preamble.
[datetime]$StartTime = Get-Date
$MomApi = New-Object -comObject 'MOM.ScriptAPI'
$ScriptName = "ADFSCatB.ps1"
$Account = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$Mp = "Microsoft.SCOM.CMDB.Monitoring"
$MpVersion = "2023.10.13.3"
$MpWorkflow = "Microsoft.SCOM.Discovery.ADFSCatB"
# Run script.
Set-GroupMembers -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--McAfeeDisableMonitoring - deprecated don't use.-->
			<Discovery ID="Cmdb.Discovery.McAfeeDisableMonitoring" Enabled="false" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.McAfeeDisableMonitoring"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>19800</IntervalSeconds>
					<SyncTime/>
					<ScriptName>McAfeeDisableMonitoring.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
#---------------------------------------------------------------------------------------------------
Function LogAndQuit {

$End=Get-Date
If ($CountError -gt 0) {
$EventLevel=1 # Log error event.
} ElseIf ($CountWarning -gt 0) {
$EventLevel=2 # Log warning event.
} Else {
$EventLevel=0 # Log info event.
}
$EventId=17621
$Mins=(New-TimeSpan -Start $start -End $end).minutes
$Secs=(New-TimeSpan -Start $start -End $end).seconds
# Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
$ObjMomApi.LogScriptEvent("The script $ScriptName executed in $Mins`m:$Secs`s", $EventId, $EventLevel, "Warnings: $CountWarning, Errors: $CountError`nRunning as: $Account`nWorkflow Name: $WorkflowName`nManagement Pack: $MpName (2023.10.13.3)`nPowerShell Version: $PSVersion`n$Message") # $Error dumps errors into the event.
}
#---------------------------------------------------------------------------------------------------
Function TerminatingError
{
$CountError+=1
$Message+="[CODE_SECTION_$CodeSection] A terminating error occurred. Error output: (" + $_.Exception.Message + ")."
EmptySnapshot
}
#---------------------------------------------------------------------------------------------------
Function SQLQuery {
param($OpsDbServer,$OpsDbName,$DbQuery)
$Connection=New-Object System.Data.SQLClient.SQLConnection
$Connection.ConnectionString="Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
$Connection.Open()
$Command=New-Object System.Data.SQLClient.SQLCommand
$Command.Connection=$Connection
$Command.CommandText=$DbQuery
$Reader=$Command.ExecuteReader()
$SqlTable=New-Object System.Data.DataTable
$SqlTable.Load($Reader)
$Connection.Close()
Return $SqlTable
}
#---------------------------------------------------------------------------------------------------
Function EmptySnapshot {
$DiscoveryData.IsSnapshot=$false # this is empty non-snapshot data.
SubmitDiscovery
}
#---------------------------------------------------------------------------------------------------
Function SubmitDiscovery {
<# FOR TESTING
$ObjMomApi.Return($DiscoveryData)
#>
$DiscoveryData
LogAndQuit
}
#---------------------------------------------------------------------------------------------------
Function GroupDiscovery {
Try{
<# FOR TESTING
$SqlTable=""
$SCOMTable=""
$SourceId="{00000000-0000-0000-0000-000000000000}"
$ManagedEntityId="{00000000-0000-0000-0000-000000000000}"
$Message=""
$CountError=0
$CountWarning=0
$CmdbTable=0
$InSCOM=0
$NotInSCOM=0
#>
<# CODE_SECTION_1
Set variables and load things we'll need.
#>
$CodeSection="1"
$Start=Get-Date
$Account=[System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$ObjMomApi=New-Object -comObject 'MOM.ScriptAPI' # MOMScriptAPI object.
$DiscoveryData=$ObjMomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
$SCOMGroupInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.McAfeeDisableMonitoring']$")
$SetupRegKey="HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
$OpsDbServer=(Get-ItemProperty $SetupRegKey).DatabaseServerName
$OpsDbName=(Get-ItemProperty $SetupRegKey).DatabaseName
<#
Not needed.
$DwDbServer=(Get-ItemProperty $SetupRegKey).DataWarehouseDBServerName
$DWDbName=(Get-ItemProperty $SetupRegKey).DataWarehouseDBName
#>
$MpName="SCOM.Cmdb"
$WorkflowName="Cmdb.Discovery.McAfeeDisableMonitoring"
$ScriptName="McAfeeDisableMonitoring.ps1"
$CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='McAfee' and Category ='CatA' and status = 'Disabled'"
$ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]"
$InSCOM=0
$NotInSCOM=0
<# FOR TESTING
#$OpsDbServer="bad_error"
#$OpsDbName="bad_db"
#>
<# CODE_SECTION_2.
Get powershell version.
This is shown in events to assist troubleshooting if powershell doesn't play nice.
#>
$CodeSection="2"
$PSVersion=$PSVersionTable.PSVersion
[string]$PSMajor=$PSVersion.Major
[string]$PSMinor=$PSVersion.Minor
$PSVersion=$PSMajor + "." + $PSMinor
<# CODE_SECTION_3
Query databases.
#>
$CodeSection="3"
$DbQuery=$CmdbQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get cmdb list.
$RecordCount=($SqlTable.name).count
$CmdbTable=$SqlTable
$Message+="CMDB Records: $RecordCount`n"
<#
Removed this in 2023.10.13.3.
If ($RecordCount -lt 1) {
EmptySnapshot # If query fails or no records quit.
} Else {
#>
$DbQuery=$ScomQuery
$SqlTable=SQLQuery -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $DbQuery # Get SCOM list.
$SCOMTable=$SqlTable
ForEach ($i In $CmdbTable) {
$Object=$i.Name
$match=select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet # Compare cmdb list to SCOM list. Confirmed do need to use "\b".
If ($match -eq $true) {
$InSCOM+=1
# If a match is found create discovery data and relationship between the SCOM group and the object.
$ObjectInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
$ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
$RelationshipInstance=$DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupMcAfeeDisableMonitoringContainsWindowsComputers']$")
$RelationshipInstance.Source=$SCOMGroupInstance
$RelationshipInstance.Target=$ObjectInstance
$DiscoveryData.AddInstance($RelationshipInstance)   
} Else {
$NotInSCOM+=1
$CountWarning+=1
$MissingObjects+="$Object`n"
}
}
If ($NotInSCOM -gt 0) {
$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM (list below) `n$MissingObjects"
} Else {$Message+="In SCOM: $InSCOM`nNot in SCOM: $NotInSCOM`n$MissingObjects"
}
SubmitDiscovery
#} # end else
}
Catch
{
TerminatingError
}
}
GroupDiscovery -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>
			<!--WindowsCertificateDisableMonitoring-->
			<Discovery ID="Cmdb.Discovery.WindowsCertificateDisableMonitoring" Enabled="false" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Cmdb.Group.WindowsCertificateDisableMonitoring"/>
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
					<IntervalSeconds>20400</IntervalSeconds>
					<SyncTime/>
					<ScriptName>WindowsCertificateDisableMonitoring.ps1</ScriptName>
					<ScriptBody><![CDATA[
Param ($SourceID, $ManagedEntityID)
Function Write-Log {
    Param($ScriptState)
    if ($ScriptState -eq "Information") {
        $EventId = 17609
        $EventLevel = 0 # 0=Info
    }
    else {
        $EventId = 17610
        $EventLevel = 2 # 2=Warning
    }
    $End = Get-Date
    $TimeCount = (New-TimeSpan -Start $StartTime -End $End)
    $Minutes = $TimeCount.Minutes
    $Seconds = $TimeCount.Seconds
    $Milliseconds = $TimeCount.Milliseconds
    $MomApi.LogScriptEvent("$ScriptName executed and ran for $Minutes`m $Seconds`s $Milliseconds`ms", $EventId, $EventLevel, "`nRunning As: $Account`nWorkflow Name: $MpWorkflow`nManagement Pack: $Mp ($MpVersion)`nPowerShell Version: $PSVersion`n$Message")
    Break
}
Function Get-SQLTable {
    param($OpsDbServer, $OpsDbName, $DbQuery)
    $Connection = New-Object System.Data.SQLClient.SQLConnection
    $Connection.ConnectionString = "Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
    $Connection.Open()
    $Command = New-Object System.Data.SQLClient.SQLCommand
    $Command.Connection = $Connection
    $Command.CommandText = $DbQuery
    $Reader = $Command.ExecuteReader()
    $SQLTable = New-Object System.Data.DataTable
    $SQLTable.Load($Reader)
    $Connection.Close()
    Return $SQLTable
}
Function Set-GroupMembers {
    # This logs terminating and non-terminating events.
    $ErrorActionPreference = "Stop"
    Try {
        $ScriptState = "Information"
        <# FOR TESTING
        $SQLTable = ""
        $SourceId = "{00000000-0000-0000-0000-000000000000}"
        $ManagedEntityId = "{00000000-0000-0000-0000-000000000000}"
        #>
        $DiscoveryData = $MomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
        # Get PowerShell version.
        $PSVersion = $PSVersionTable.PSVersion
        [string]$PSMajor = $PSVersion.Major
        [string]$PSMinor = $PSVersion.Minor
        $PSVersion = $PSMajor + "." + $PSMinor
        # Common variables.
        $SetupRegKey = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
        $OpsDbServer = (Get-ItemProperty $SetupRegKey).DatabaseServerName
        $OpsDbName = (Get-ItemProperty $SetupRegKey).DatabaseName
        $SCOMGroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Cmdb.Group.WindowsCertificateDisableMonitoring']$")
        $CmdbQuery="SELECT Name from [SCOMCmdb].[dbo].[Configuration] where Class='WindowsCertificate' and Status='Disabled'"
        $ScomQuery="SELECT principalname AS Name from [$OpsDbName].[dbo].[MTV_Microsoft`$Windows`$OperatingSystem]"
        <# FOR TESTING
        #$OpsDbServer="bad_error"
        #$OpsDbName="bad_db"
        #>
        # Get CMDB list.
        $CmdbTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $CMDBQuery
        # Get SCOM list.
        $SCOMTable = Get-SQLTable -OpsDbServer $OpsDbServer -OpsDbName $OpsDbName -DbQuery $SCOMQuery
        ForEach ($ConfigItem In $CmdbTable) {
            $Object = $ConfigItem.Name
            # Compare CMDB list to SCOM list, if match found add to discovery.
            $Match = select-string -inputobject $SCOMTable.Name "\b$Object\b" -quiet
            If ($Match -eq $true) {
				$ObjectInstance=$DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
				$ObjectInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $Object)
                $RelationshipInstance=$DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Cmdb.Relationship.SCOMGroupWindowsCertificateDisableMonitoringContainsWindowsComputers']$")
                $RelationshipInstance.Source = $SCOMGroupInstance
                $RelationshipInstance.Target = $ObjectInstance
                $DiscoveryData.AddInstance($RelationshipInstance)   
            }
        }
        # Submit discovery data back to Operations Manager and complete the script.
        $DiscoveryData
        <# FOR TESTING
        $MomApi.Return($DiscoveryData)
        #>
        Write-Log -ScriptState $ScriptState
    }
    Catch {
        $ScriptState = "Warning"
        $Message += $_.Exception.Message
        Write-Log -ScriptState $ScriptState 
    }
}
# All scripts should have this preamble.
[datetime]$StartTime = Get-Date
$MomApi = New-Object -comObject 'MOM.ScriptAPI'
$ScriptName = "WindowsCertificateDisableMonitoring.ps1"
$Account = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$Mp = "Microsoft.SCOM.CMDB.Monitoring"
$MpVersion = "2023.10.13.3"
$MpWorkflow = "Microsoft.SCOM.Discovery.WindowsCertificateDisableMonitoring"
# Run script.
Set-GroupMembers -SourceId $SourceId -ManagedEntityId $ManagedEntityId
          ]]></ScriptBody>
					<Parameters>
						<Parameter>
							<Name>SourceId</Name>
							<Value>$MPElement$</Value>
						</Parameter>
						<Parameter>
							<Name>ManagedEntityId</Name>
							<Value>$Target/Id$</Value>
						</Parameter>
					</Parameters>
					<TimeoutSeconds>60</TimeoutSeconds>
				</DataSource>
			</Discovery>

		</Discoveries>
	</Monitoring>
	<LanguagePacks>
		<LanguagePack ID="ENU" IsDefault="false">
			<DisplayStrings>
				<DisplayString ElementID="SCOM.Cmdb">
					<Name>SCOM Cmdb</Name>
					<Description>Populates groups using SQL queries.</Description>
				</DisplayString>
				<!--WindowsServer-->
				<DisplayString ElementID="Cmdb.Group.WindowsServerCatA">
					<Name>CMDB Windows Server CatA</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.WindowsServerCatA">
					<Name>Populate Cmdb.Group.WindowsServerCatA</Name>
					<Description>This discovery rule populates the group Cmdb.Group.WindowsServerCatA.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Group.WindowsServerCatB">
					<Name>CMDB Windows Server CatB</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.WindowsServerCatB">
					<Name>Populate Cmdb.Group.WindowsServerCatB</Name>
					<Description>This discovery rule populates the group Cmdb.Group.WindowsServerCatB.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Group.WindowsServerCatC">
					<Name>CMDB Windows Server CatC</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.WindowsServerCatC">
					<Name>Populate Cmdb.Group.WindowsServerCatC</Name>
					<Description>This discovery rule populates the group Cmdb.Group.WindowsServerCatC.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Group.HealthServiceWatcherCatA">
					<Name>CMDB Health Service Watcher CatA</Name>
					<Description>Contains Health Service Watcher objects of Cmdb.Group.WindowsServerCatA group members. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.HealthServiceWatcherCatA">
					<Name>Populate Cmdb.Group.HealthServiceWatcherCatA</Name>
					<Description>This discovery rule populates the group Cmdb.Group.HealthServiceWatcherCatA</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Group.HealthServiceWatcherCatB">
					<Name>CMDB Health Service Watcher CatB</Name>
					<Description>Contains Health Service Watcher objects of Cmdb.Group.WindowsServerCatB group members. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.HealthServiceWatcherCatB">
					<Name>Populate Cmdb.Group.HealthServiceWatcherCatB</Name>
					<Description>This discovery rule populates the group Cmdb.Group.HealthServiceWatcherCatB</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Group.HealthServiceWatcherCatC">
					<Name>CMDB Health Service Watcher CatC</Name>
					<Description>Contains Health Service Watcher objects of Cmdb.Group.WindowsServerCatC group members. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.HealthServiceWatcherCatC">
					<Name>Populate Cmdb.Group.HealthServiceWatcherCatC</Name>
					<Description>This discovery rule populates the group Cmdb.Group.HealthServiceWatcherCatC</Description>
				</DisplayString>
				<!--ADDS-->
				<DisplayString ElementID="Cmdb.Group.ADDSCatA">
					<Name>CMDB ADDS CatA</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.ADDSCatA">
					<Name>Populate Cmdb.Group.ADDSCatA</Name>
					<Description>This discovery rule populates the group Cmdb.Group.ADDSCatA.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Group.ADDSCatB">
					<Name>CMDB ADDS CatB</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.ADDSCatB">
					<Name>Populate Cmdb.Group.ADDSCatB</Name>
					<Description>This discovery rule populates the group Cmdb.Group.ADDSCatB.</Description>
				</DisplayString>
				<!--DNS-->
				<DisplayString ElementID="Cmdb.Group.DNSCatA">
					<Name>CMDB DNS CatA</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.DNSCatA">
					<Name>Populate Cmdb.Group.DNSCatA</Name>
					<Description>This discovery rule populates the group Cmdb.Group.DNSCatA.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Group.DNSCatB">
					<Name>CMDB DNS CatB</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.DNSCatB">
					<Name>Populate Cmdb.Group.DNSCatB</Name>
					<Description>This discovery rule populates the group Cmdb.Group.DNSCatB.</Description>
				</DisplayString>
				<!--DHCP-->
				<DisplayString ElementID="Cmdb.Group.DHCPCatA">
					<Name>CMDB DHCP CatA</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.DHCPCatA">
					<Name>Populate Cmdb.Group.DHCPCatA</Name>
					<Description>This discovery rule populates the group Cmdb.Group.DHCPCatA.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Group.DHCPCatB">
					<Name>CMDB DHCP CatB</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.DHCPCatB">
					<Name>Populate Cmdb.Group.DHCPCatB</Name>
					<Description>This discovery rule populates the group Cmdb.Group.DHCPCatB.</Description>
				</DisplayString>
				<!--IIS-->
				<DisplayString ElementID="Cmdb.Group.IISCatA">
					<Name>CMDB IIS CatA</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.IISCatA">
					<Name>Populate Cmdb.Group.IISCatA</Name>
					<Description>This discovery rule populates the group Cmdb.Group.IISCatA.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Group.IISCatB">
					<Name>CMDB IIS CatB</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.IISCatB">
					<Name>Populate Cmdb.Group.IISCatB</Name>
					<Description>This discovery rule populates the group Cmdb.Group.IISCatB.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Group.IISCatC">
					<Name>CMDB IIS CatC</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.IISCatC">
					<Name>Populate Cmdb.Group.IISCatC</Name>
					<Description>This discovery rule populates the group Cmdb.Group.IISCatC.</Description>
				</DisplayString>
				<!--SQL-->
				<DisplayString ElementID="Cmdb.Group.SQLCatA">
					<Name>CMDB SQL CatA</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.SQLCatA">
					<Name>Populate Cmdb.Group.SQLCatA</Name>
					<Description>This discovery rule populates the group Cmdb.Group.SQLCatA.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Group.SQLCatB">
					<Name>CMDB SQL CatB</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.SQLCatB">
					<Name>Populate Cmdb.Group.SQLCatB</Name>
					<Description>This discovery rule populates the group Cmdb.Group.SQLCatB.</Description>
				</DisplayString>
				<!--WindowsCluster-->
				<DisplayString ElementID="Cmdb.Group.WindowsClusterCatA">
					<Name>CMDB Windows Cluster CatA</Name>
					<Description>Contains Windows Cluster objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.WindowsClusterCatA">
					<Name>Populate Cmdb.Group.WindowsClusterCatA</Name>
					<Description>This discovery rule populates the group Cmdb.Group.WindowsClusterCatA.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Group.WindowsClusterCatB">
					<Name>CMDB Windows Cluster CatB</Name>
					<Description>Contains Windows Cluster objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.WindowsClusterCatB">
					<Name>Populate Cmdb.Group.WindowsClusterCatB</Name>
					<Description>This discovery rule populates the group Cmdb.Group.WindowsClusterCatB.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Group.WindowsClusterCatC">
					<Name>CMDB Windows Cluster CatC</Name>
					<Description>Contains Windows Cluster objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.WindowsClusterCatC">
					<Name>Populate Cmdb.Group.WindowsClusterCatC</Name>
					<Description>This discovery rule populates the group Cmdb.Group.WindowsClusterCatC.</Description>
				</DisplayString>
				<!--ADFS-->
				<DisplayString ElementID="Cmdb.Group.ADFSCatA">
					<Name>CMDB ADFS CatA</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.ADFSCatA">
					<Name>Populate Cmdb.Group.ADFSCatA</Name>
					<Description>This discovery rule populates the group Cmdb.Group.ADFSCatA.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Group.ADFSCatB">
					<Name>CMDB ADFS CatB</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.ADFSCatB">
					<Name>Populate Cmdb.Group.ADFSCatB</Name>
					<Description>This discovery rule populates the group Cmdb.Group.ADFSCatB.</Description>
				</DisplayString>
				<!--McAfee-->
				<DisplayString ElementID="Cmdb.Group.McAfeeDisableMonitoring">
					<Name>CMDB McAfee Disable Monitoring</Name>
					<Description>Contains McAfee Agent objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.McAfeeDisableMonitoring">
					<Name>Populate Cmdb.Group.McAfeeDisableMonitoring</Name>
					<Description>This discovery rule populates the group Cmdb.Group.McAfeeDisableMonitoring.</Description>
				</DisplayString>
				<!--WindowsCertificate-->
				<DisplayString ElementID="Cmdb.Group.WindowsCertificateDisableMonitoring">
					<Name>CMDB Windows Certificate Disable Monitoring</Name>
					<Description>Contains Windows Computer objects populated from a SQL database query. This group is in the SCOM.Cmdb management pack.</Description>
				</DisplayString>
				<DisplayString ElementID="Cmdb.Discovery.WindowsCertificateDisableMonitoring">
					<Name>Populate Cmdb.Group.WindowsCertificateDisableMonitoring</Name>
					<Description>This discovery rule populates the group Cmdb.Group.WindowsCertificateDisableMonitoring.</Description>
				</DisplayString>
			</DisplayStrings>
		</LanguagePack>
	</LanguagePacks>
</ManagementPack>
